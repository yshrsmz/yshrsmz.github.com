[
  
  {
    "title"    : "YarnとReactとTypeScriptとDuplicate identifierエラー",
    "category" : "programming",
    "tags"     : " react, typescript, yarn, renovate, til",
    "url"      : "/2021/06/06/dedupe-react-type-conflict/",
    "date"     : "June 6, 2021",
    "excerpt"  : "React と TypeScript で使っていると、型定義の更新時に下記のようなエラーに遭遇することがある\n\nRun yarn app:build\nError: ../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts(3047,14): error TS2300: Duplicate identifier &#39;LibraryManagedAttributes&#39;.\nError: ../../node_m...",
  "content"  : "React と TypeScript で使っていると、型定義の更新時に下記のようなエラーに遭遇することがある\n\nRun yarn app:build\nError: ../../node_modules/@types/react-dom/node_modules/@types/react/index.d.ts(3047,14): error TS2300: Duplicate identifier &#39;LibraryManagedAttributes&#39;.\nError: ../../node_modules/@types/react/index.d.ts(3047,14): error TS2300: Duplicate identifier &#39;LibraryManagedAttributes&#39;.\nError: Process completed with exit code 2.\n\n\n@types/react の型定義が複数あって解決に失敗している感じ。\n\nyarn.lock を作り直せばもちろん解決できるんだけど、もっとスマートなやり方があった。\n\nyarn v1 だったら atlassian/yarn-deduplicate を使えばいいし、 yarn v2 だったらビルトインコマンドの yarn dedupe を使えばよい。\n\nrenovate を利用してパッケージ更新をしているなら、postUpdateOptions で yarnDedupeFewer か yarnDedupeHighest を設定してあげればいい感じにしてくれそう。\n\n"
} ,
  
  {
    "title"    : "tailwindcss の config ファイルを babel-plugin-preval で読み込む",
    "category" : "programming",
    "tags"     : " node.js, tailwindcss, typescript, til",
    "url"      : "/2021/04/28/tailwindcss-babel-preval/",
    "date"     : "April 28, 2021",
    "excerpt"  : "tailwindcss の tailwind.config.js をコードから参照したいとき、なにも考えなくていいなら tailwindcss/resolveConfig を使えば実現できる。\n\nただこのやり方だとビルド時にだけあればいいプラグインなどが依存関係に入ってきてしまい、成果物が肥大化してしまう。\n\nそこで公式ドキュメントでは babel-plugin-preval 使うといいよ、って書いてあるけどじゃあ実際どう使うの、ということは書いてない。\n\nこうやる。\n\n場所はどこでもいい...",
  "content"  : "tailwindcss の tailwind.config.js をコードから参照したいとき、なにも考えなくていいなら tailwindcss/resolveConfig を使えば実現できる。\n\nただこのやり方だとビルド時にだけあればいいプラグインなどが依存関係に入ってきてしまい、成果物が肥大化してしまう。\n\nそこで公式ドキュメントでは babel-plugin-preval 使うといいよ、って書いてあるけどじゃあ実際どう使うの、ということは書いてない。\n\nこうやる。\n\n場所はどこでもいいんだけど、 babel が解決できる場所に下記のような内容のファイルを作成する。今回は ./config/tailwindcss.js とした。\n\n// @preval\n// babel-plugin-prevalでコンパイル時に実行される\n// see https://tailwindcss.com/docs/configuration#referencing-in-java-script\nconst resolveConfig = require(&#39;tailwindcss/resolveConfig&#39;)\nconst tailwindConfig = require(&#39;../tailwind.config&#39;)\n\nconst config = resolveConfig(tailwindConfig)\n\nmodule.exports = {\n  colors: config.theme.colors,\n}\n\n\nいくつか書き方があるけど、今回は @preval を使う。\n今回は colors だけ export しているけど、用途に応じて config.theme を export したり、いろいろできる。\n\nbabel-plugin-preval はトランスパイルなしで実行されるので、実行環境でそのまま動かせるコードを書く必要がある。\nまた、最終的な成果物も同様である(っぽい)。export default {...} ではなく module.exports = {...} にしているのはそのため。\n\nbabel の設定に preval プラグインを追加したら、あとはコンパイルするだけ。\n\nコードからは\n\nimport { colors } from &#39;~/config/tailwindcss&#39;\n\n\n的に参照できる。\n\nTypeScript の場合は好きに型定義したらいい\n\ndeclare module &#39;~/config/tailwindcss&#39; {\n  // `~/tailwind.config.js` のtheme.colorsと対応\n  interface TailwindColors {\n    // 色定義\n\n    [key: string]: string | Record&amp;lt;string, string&amp;gt;\n  }\n  export const colors: TailwindColors\n}\n\n"
} ,
  
  {
    "title"    : "yarn install と NODE_ENV",
    "category" : "programming",
    "tags"     : " node.js, docker, til",
    "url"      : "/2021/04/27/yarn-install-node-env/",
    "date"     : "April 27, 2021",
    "excerpt"  : "TL;DR;\n\nNODE_ENV=production が設定済みの環境で yarn install を実行すると yarn install --production と同等の動作をする\n\n\n\n言われてみればそれはそう、って感じではあるし、ドキュメントにもそう書いてある。\n\nARG BUILD_ENV=production\n\nFROM public.ecr.aws/bitnami/node:14.16.1 AS build-stage\n\nARG BUILD_ENV\nENV NODE_ENV...",
  "content"  : "TL;DR;\n\nNODE_ENV=production が設定済みの環境で yarn install を実行すると yarn install --production と同等の動作をする\n\n\n\n言われてみればそれはそう、って感じではあるし、ドキュメントにもそう書いてある。\n\nARG BUILD_ENV=production\n\nFROM public.ecr.aws/bitnami/node:14.16.1 AS build-stage\n\nARG BUILD_ENV\nENV NODE_ENV=${BUILD_ENV}\n\nRUN install_packages curl ca-certificates\nRUN curl -sfL https://install.goreleaser.com/github.com/tj/node-prune.sh | bash -s -- -b /usr/local/bin\n\nWORKDIR /app\nCOPY . .\n\nRUN yarn install\nRUN yarn build:${BUILD_ENV}\nRUN yarn install --production\nRUN /usr/local/bin/node-prune\n\nFROM public.ecr.aws/bitnami/node:14.16.1-prod AS production-stage\n\nARG BUILD_ENV\nENV NODE_ENV ${BUILD_ENV}\n\nRUN install_packages curl ca-certificates\n\nCOPY --from=build-stage /app /app\n\nWORKDIR /app\n\nENTRYPOINT [ &quot;./node_modules/.bin/nuxt&quot;, &quot;start&quot; ]\n\n\nこんな Dockerfile を書いて、 BUILD_ENV=production で実行した時に yarn build:production が失敗しててめっちゃつまった。エラー的には ts-loader が見つからないとかそんな感じ。\n\nいろいろ書き換えながら試してたら、最初に書いてたとおり NODE_ENV=production と環境変数を設定しちゃってたのが原因だった。devDependencies がインストールされない状態。\n\n\n  Yarn will not install any package listed in devDependencies if the NODE_ENV environment variable is set to production\n\n\nドキュメントにもそう書いてあった。\n\n今回の場合は、 build-stage ではそもそも NODE_ENV 必要なかったので ENV NODE_ENV=${BUILD_ENV} をこのステージから削除して解決。\n\nドキュメントはちゃんと読みましょう。\n"
} ,
  
  {
    "title"    : "2020年を振り返って",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2020/12/31/lookingback-2020/",
    "date"     : "December 31, 2020",
    "excerpt"  : "2020年を振り返るよ。\n買ってよかったもののまとめはこちら\n\n目次\n\n  仕事    \n      2018年の後半から作っていたアプリがようやくリリースされた\n      Nuxt.jsで記事メディアの立ち上げ\n      Nuxt.jsで既存サービスのリニューアル(進行中)\n    \n  \n  個人(プロジェクト)    \n      MonotweetyがTwitter APIのアクセス制限された\n      Twitter4kt\n    \n  \n  個人(生活)    \n    ...",
  "content"  : "2020年を振り返るよ。\n買ってよかったもののまとめはこちら\n\n目次\n\n  仕事    \n      2018年の後半から作っていたアプリがようやくリリースされた\n      Nuxt.jsで記事メディアの立ち上げ\n      Nuxt.jsで既存サービスのリニューアル(進行中)\n    \n  \n  個人(プロジェクト)    \n      MonotweetyがTwitter APIのアクセス制限された\n      Twitter4kt\n    \n  \n  個人(生活)    \n      新型コロナウィルス\n      フェレットが死んだ\n      猫が増えた\n      アボカド育て始めた\n    \n  \n\n\n仕事\n\n今年はAndroidアプリエンジニアというよりはWebフロントエンドエンジニアとしての仕事が多かった。\nAndroidとWebフロントと掛け持ちしてるとタスク溢れが深刻なのでどうにかしたい。\n\n2018年の後半から作っていたアプリがようやくリリースされた\n\n長かった。実装に時間がかかったというよりはビジネス的なアレコレでのびのびになっていた感じ。\nKotlin Multiplatform Projectで、Android/iOS向けに作ってます。\nプレゼンテーション層(ViewModel)より下はすべて共通コード。\n\n内訳はおおよそこんな感じで、まあまあ頑張ったんではなかろうか\n\n弊Kotlin Multiplatform Project(Android/iOS)のコード内訳です。Obj-CとJavaの部分は直接取り込む必要のあった外部ライブラリなのでそれは差っ引いてほしい。 pic.twitter.com/PX8nevjR4y&amp;mdash; せーい (@_yshrsmz) September 24, 2020\n\nちょっと詳しい解説はこちらにまとめている。\nどうでもいいけど、↑この記事は勉強会で話した内容をベースに書いた。発表するにあたって構成はちゃんとまとめてあるので、記事自体は結構な速度で書くことができ、よい感じだった。\n来年はもうちょっと発表の機会を増やして、発表ベースでブログ書いていってもいいかもしれない。\n\nNuxt.jsで記事メディアの立ち上げ\n\n4-5月にかけてシュッと作った。\nNuxt.jsの静的サイト生成モードで出力して、S3にデプロイする感じ。\n\nAndroidDagashiとほぼ同じ実装でやってるのでそこまで悩むことはなかったけど、仕事としてWebフロントエンドやるのは6年ぶりなのでまあ緊張した。\n\nデプロイの最適化とかまだまだできることはあるので引き続きやっていく。\n\nNuxt.jsで既存サービスのリニューアル(進行中)\n\n古いSpring Bootで書かれた8年もののサービスを今風な技術スタックで書き直そうぜ！　というプロジェクト。\nざっくり言うと既存のサーバサイドはGraphQL APIに書き直して、フロントエンドはNuxt.jsでSSRしよう、という感じ。\n\n昨今のWebフロントエンドは本当に求められるものが多いなあ、AWS完全に理解した、とか言いながらいろいろやっている。\n\n趣味で始めたことを仕事に転用して、更にそこからステップアップして、といい感じで趣味と実益を兼ねられていて大変良い流れになっている気がしている。\n\n個人(プロジェクト)\n\nやっぱ本業のほうがある程度忙しいと個人開発まで頭がまわらないなー、と改めて感じた一年だった。\nコロナ禍で外に出る機会が減って体力が落ちてるのもあるとは思うけど。\n\nMonotweetyがTwitter APIのアクセス制限された\n\nお前のクライアントからスパムっぽいツイート多いんだが、と神は仰せです。\n\nTwitterの対応には若干うんざりしつつもいい機会なので、１から書き直してみた。 \nRxJavaからKotlin Coroutinesにしてみたり、プレゼンテーション層をMVIにしてみたり。\n開発開始が2016年だから、今となっては古い思想で作っているコードも多くて自分のコードながらなかなか新鮮だった。\n\nTwitterKit for Androidからも移行しなきゃだと思ってたので、この機会に依存を削除。\nTwitter4Jを使うのもアレなので後述するTwitter APIクライアントライブラリを自作してみた。\n\nスパム的なメンションを行えないようにフッターに@を入れられないようにしてみたけど、API開放したよって返信メールで「ツイートに含むメンションは一つまでにしろ」とか「自発メンションをするな」とか言われたのでbot運用で使ってるAPIキーと思われている可能性が微レ存。\nたしかにツイート作成以外のエンドポイントはほとんど使ってないから、スパムbotと思われても仕方ない見え方をしているかも。\n\nそもそも@マークをツイートできないようにするか、あるいは定期的にタイムライン取得して普通のクライアントアプリに見えるようにしてみるとか、再公開にはもうちょい作業が必要そう。\n\nMonotweetyは自分が使いたくて作っているものなので、公開した結果スパム認定されて自分も使えなくなってしまっては意味がない。そもそも公開停止して完全個人利用にしてしまうのもありかもしれない。\n\nTwitter4kt\n\nhttps://github.com/yshrsmz/twitter4kt\n\nMonotweetyの件と関連して作り始めた自家製のTwitter APIクライアントライブラリ。\nOAuth周りとかリクエストの署名周りとか、仕様を調べながら実装してなかなかおもしろかった。\n\n現状JVMしかないけど一応Kotlin Multiplatform Projectな構成で作っている。\n\nとりあえず自分のニーズが満たせればいいのでサポートしてるエンドポイントは限られているけど、継続的にメンテして育てていけたらいいなあ、とは思っている。\n\n個人(生活)\n\n新型コロナウィルス\n\n幸い身近なところで感染している人は今のところいなそう。\n\n勤務先的には今のところ週二回リモートワークが全体の方針だけど、相談して週一回くらいの出社にしている。\n\n一番の懸念は運動量なのでなんとかしたいところ。\n\nリングフィットアドベンチャーは続かないし、夜散歩は運動負荷的に足りるのか足りないのか…\n\n妻も同じような働き方してるので四六時中一緒だけど、今のところ仲良くやっている。\n同じAndroidアプリエンジニアだったりするので、お互いの仕事が何となくわかってかつ共通の話題が多いのもプラスに働いてるのかも。\n\nフェレットが死んだ\n\nちょうど(と言っていいのかはアレだけど)コロナ禍でほぼリモートワークだったのが幸いして看病できたし、看取ることもできた。\n例年通りに通勤していたら彼はもっと早くに死んでいただろうし、死の過程を見届けることもできなかっただろう。\n\n8月9日(日)、およそ7年半。インスリノーマだった。\n8月8日の朝から意識はあるけどご飯は全然食べない、という状態だった。夜妻が様子を見に行ったらベッドの外でまばたきもせずぐったりしていた。口元にウェットフードを持っていっても、いつもなら目の色を変えてがっついていたペーストを持っていっても反応しない。\n\nああ、その時が来たんだな、と思った。\n\nそれからは妻と交代で見守って、8月9日の17時くらいに亡くなった。\n言い方は悪いけど面白いもので、私がちょっとポテチ食べたいなーと思ってリビングに行って15〜30分くらい目を離している隙に逝ってしまった。ポテチ食べながら妻と「結構体力あったんだねー」なんて話していたというのに。\n\nケージの前に戻ったら明らかにお腹が動いてなくて、触っても鼓動もなくて息もしてなくて。\n抱き上げて妻を呼んで、「がんばったねえ」とか言いながらちょっと泣いてしまった。\n\nすぐにからだを拭いて、発泡スチロールの箱に保冷剤と一緒に入れた。本当に偶然なんだけど、ちょうどその日にまとめ買いしていた冷凍ラムチョップが届いていたので程よい大きさの発泡スチロールの箱が手元にあったのだ。\nそしてその日のうちに火葬の予約を入れて、次の日に火葬。翌週の動物病院の予約をキャンセルしたりもした。\n\n火葬は専用のトラックに来てもらって、近所の道路上でやってもらう感じだった。一時間もかからないで真っ白い骨になって、小さな骨壷に収まってしまった。\n\nちょうど三連休の中日に逝き、翌日葬儀の都合もついて、しかも都合のいいことに保冷用の発泡スチロール箱まであって、と本当に最後の段取りがうまいフェレットだった。こんな偶然、なかなかない。\n\nいろいろ不出来な飼い主だったけど、彼と過ごした七年半はとてもよいものだった。ありがとう。\n\n後日談\n\nフェレットの死後一瞬間くらいの間に、夜の散歩中にハクビシンとアライグマを、日中にたぬきを見かけた。\nコロナ禍に入ってから夜散歩をするのが趣味で、ハクビシンは今年に入って一度見かけたことがあるけど、アライグマとたぬきは初めてだった。\n特に信仰のない私でも霊的なものの存在を信じてしまいそうになるようなタイミングだった。\n「寂しくないように送ってくれたのかねえ」、なんて妻と言い合ったりした。\n\n猫が増えた\n\n#また舌しまい忘れてる pic.twitter.com/0CfsBTpmey&amp;mdash; せーい (@_yshrsmz) December 28, 2020\n\n増えたと言うか増やした。\nフェレット死んだあとシャム猫？をひろう夢を見たのがきっかけ(今思うと”シャム猫”というよりはシルバーミットだったんだと思う)。\n\nしばらく散歩がてら探してたけどその子とは巡り会えず(かわりにハクビシンやらアライグマやらたぬきには遭遇したけど)、そうこうしているうちにあれやこれやで保護猫カフェから引き取ることになった。\n\nキジトラ中毛ボブテイルな女の子で、うちにはいなかったタイプで大変かわいい。\n\n子猫はマジでエンタメだしいろんなことやらかす天然のデバッガーだしで日々楽しいと同時に忙しい。\n\n先住には色々な面でストレスになってそうなのでうまいことフォローしていってあげたい。\n\nアボカド育て始めた\n\n初夏くらいからアボカドを育てている。\nスターバックスのフラペチーノ用容器で水耕栽培からはじめ、つい最近ベラボン+ガラス鉢に植え替えた。\n作業机の近くの窓辺に置いて毎日見守っていると、不思議と情が湧いてくる。\n\n発芽までは１ヶ月から２ヶ月くらいかかるけど、一度芽が出るとわりとすくすく育つ。\n\nコロナ禍始まってから育て始めたアボカド。最初は水耕栽培で、今はベラボン。少猫がマジでヤンチャで右側は若葉をかじられてしまった… pic.twitter.com/8mL9ZBjhHo&amp;mdash; せーい (@_yshrsmz) December 31, 2020\n\nただ分別のない子猫と共生させるのはむずかしい。\n\n\n\nそんなこんなな2020年でした。\n\n来年もやっていきましょう。\n"
} ,
  
  {
    "title"    : "2020年買ってよかったもの",
    "category" : "diary",
    "tags"     : " diary, bestbuy",
    "url"      : "/2020/12/28/bestbuy2020/",
    "date"     : "December 28, 2020",
    "excerpt"  : "買ってよかったもの振り返るよ。\nタイトルがリンクになってます。\n\n目次\n\n  生活    \n      CASIO Privia PX-S1000BK(88鍵盤 電子ピアノ)\n      ソファ\n      棚付き昇降式テーブル 幅120cm\n      コレス コーングラインダー シルバー C330\n      PostCoffee\n      NIID X URBANATURE クロスボディバッグ 防水 Radiant Urban Sling R1\n    \n  \n  ガジェット   ...",
  "content"  : "買ってよかったもの振り返るよ。\nタイトルがリンクになってます。\n\n目次\n\n  生活    \n      CASIO Privia PX-S1000BK(88鍵盤 電子ピアノ)\n      ソファ\n      棚付き昇降式テーブル 幅120cm\n      コレス コーングラインダー シルバー C330\n      PostCoffee\n      NIID X URBANATURE クロスボディバッグ 防水 Radiant Urban Sling R1\n    \n  \n  ガジェット    \n      Amazonベーシック モニターアーム デュアル ディスプレイタイプ\n      オカムラ オフィスチェア シルフィ― エキストラハイバック メッシュ アジャストアーム 樹脂脚 ブラックフレーム\n      JVC SP-A7WT-B NAGARAKU ウェアラブルネックスピーカー\n      Xperia 5 II\n      Moonlander(左右分割キーボード)\n    \n  \n\n\n生活\n\nCASIO Privia PX-S1000BK(88鍵盤 電子ピアノ)\n\nせっかく家にいる時間が増えたので楽器でもやろうと思って購入。\n鍵盤もそこそこ重くていい感じ。\n\nフルートやってたので楽譜は読めたけど、やっぱり複数音が出る楽器は難しい。\n\nソファ\n\nソファの座面と背もたれ部分が別れてて、好きなように配置することができる。何か作業するときは浅く座るようにもできるし、背もたれをどかせば簡単なベッドのようにも使える。\n\n棚付き昇降式テーブル 幅120cm\n\n昇降式テーブルはいいぞ。\n食事中は低くできるし、作業時には高くできる。棚があるのでテーブルの上をきれいに保つこともできる(保てるとは言っていない)。\n\nコレス コーングラインダー シルバー C330\n\n買ったというか妻から誕生日プレゼントでもらった。\n付属のコンテナ？はプラ製で帯電してしまうのが玉に瑕。我が家では陶器製のマグカップで代用している。\n\n毎日朝昼コーヒー豆挽いて飲んでいるけど、メンテナンスもしやすいし大変よい。\n\nPostCoffee\n\nコーヒー関連でこれも。\n月に一回か二回、コーヒー豆を届けてくれるサービス。\n\n届いたコーヒーに対して感想をつけていくと次第に自分好みのコーヒー豆が届くようになっていく。\n一度の配達で三種類の豆が来るので、色々楽しめていい感じ。\n\nNIID X URBANATURE クロスボディバッグ 防水 Radiant Urban Sling R1\n\n一目惚れしてKickstarterで支援したものが届いた。\nギリギリiPad Proの11inchが入るくらいのサイズ感。\n\nサイドポケットやら底面のベルトやら、細かいギミックが好き。\nNIIDのバッグはどれもスタイリッシュでお気に入りのブランドの一つ。\n\nガジェット\n\nAmazonベーシック モニターアーム デュアル ディスプレイタイプ\n\nこれとAmazonベーシック モニターアーム ノートパソコン用 アーム マウントトレーをあわせて使っている。\n\n机の上を広く使いたくて導入。最初はモニターアーム+ノートPCスタンドで運用してたけど、ノートPCもアームで支持するようにしたら捗るんじゃないかと思い立ってデュアルアームに変更。\n\n机の上は広く使えるようになったけど、残念ながらその分置くものも増えてきれいになったようには見えない。\nケーブル類の整理が来年の課題。天板の下も有効活用していきたい。\n\nオカムラ オフィスチェア シルフィ― エキストラハイバック メッシュ アジャストアーム 樹脂脚 ブラックフレーム\n\n4月くらいに首と腰の調子がめちゃくちゃ悪くなったタイミングで購入。\nそれまでがパイプ椅子に毛が生えたくらいの椅子だったから調子悪くなるのも当たり前。\n\nホントならヘッドレストがもう少し調整できるやつとかじっくり検討したかったけど、最速で届いてそこそこ性能のいいやつの中から選んでこれにした。トータルでは満足している。\n\nJVC SP-A7WT-B NAGARAKU ウェアラブルネックスピーカー\n\nリモートワークの強い味方。\nメガネをしている関係でヘッドホン系は長時間つけられないし、イヤホンタイプのやつも耳が痛くなるからやはり長時間は無理。\n\n家の中で使うぶんには音漏れを気にする必要はないので重宝している。\n首元にスピーカーがあるので、ある程度音を絞れば別の部屋から聞こえる心配もほぼない。\n音質はそこそこだけど主にビデオ会用なので特に気にしてない。\n\nバッテリーもスペック上は連続15時間いけることになっているし、実際仕事で一日つけっぱなしにしていて充電が追加で必要になったことはない。\n\n唯一の欠点は充電がMicro USBな点。\n\nXperia 5 II\n\n今年はOnePlus 8 ProとかRakuten Miniとかスマホはいくつか買ったけど、ダントツでXperia 5 IIが良かった。\n\nOnePlus 8 Proは5GHzのWiFiになかなか繋がらず、繋がってもすぐに2.5GHzに切り替わってしまったりしてストレスマックスだったし、Rakuten Miniはそもそもメイン端末にできるようなスペックじゃないし。OnePlus 8 ProメインでSuica用にRakuten Mini持てばいいかなーって思ってたけどやはり二台持ちは面倒くさいということに気づいてXperia 5 IIを選択。\n\n手にちょうど収まる大きさで、持った瞬間「ああ、OnePlu 8 Proって重かったんだな」と実感した。やっぱり最近のスマホは大きくなりすぎている…\n\nMoonlander(左右分割キーボード)\n\n久しぶり既製品キーボード。ErgoDox EZでおなじみのメーカーさん。\nサムクラスタがチルトできたり、折りたたみ式のパームレストが本体にくっついてたり野心的。\n\n久しぶりの既製品左右分割キーボード、Moonlander。折り畳めるパームレストが本体についてたりサムクラスタがチルトできたりして結構良い。ファームウェアはqmk! pic.twitter.com/yFQTKIJthm&amp;mdash; せーい (@_yshrsmz) December 28, 2020\n\n\nキースイッチのホットスワップにも対応。\nqmk_firmwareでカスタマイズ性担保しつつも、簡単なのであれば専用のグラフィカルなUIからキーマップ作れるのもよい。\n"
} ,
  
  {
    "title"    : "Kotlin Multiplatform Projectを導入してみて",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2020/12/26/review-kmp-in-production/",
    "date"     : "December 26, 2020",
    "excerpt"  : "本記事はAndroid Advent Calendar 2020の24日目です。\n\nこの記事は某勉強会で発表したもののトランスクリプト＋αです。\n\n実際に仕事のAndroidアプリでKotlin Multiplatform Project(以後KMP)を導入してみてどんな感じだったか、というのをまとめていきます。\n\n目次\n\n  前提\n  コード割合\n  アーキテクチャ    \n      レポジトリ構成\n      CI\n      KMPコードのアーキテクチャ\n      ViewMod...",
  "content"  : "本記事はAndroid Advent Calendar 2020の24日目です。\n\nこの記事は某勉強会で発表したもののトランスクリプト＋αです。\n\n実際に仕事のAndroidアプリでKotlin Multiplatform Project(以後KMP)を導入してみてどんな感じだったか、というのをまとめていきます。\n\n目次\n\n  前提\n  コード割合\n  アーキテクチャ    \n      レポジトリ構成\n      CI\n      KMPコードのアーキテクチャ\n      ViewModelのインターフェイス\n      共通化できないコードを共通コードで使う\n      利用しているKMPのライブラリ\n    \n  \n  KMPのメリット    \n      使い慣れた言語で書ける\n      工数削減\n      用語/仕様に差が生まれない\n      Viewを各プラットフォームで書ける\n      導入する範囲を選べる\n    \n  \n  KMPのデメリット    \n      学習コスト\n      KMPはまだα版\n    \n  \n  まとめ    \n      KMPを使ってよかったか\n      KMPをおすすめできるか\n    \n  \n\n\n前提\n\n\n  チーム構成: Android、iOS、デザイナー、バックエンド、各一人ずつ\n  API: GraphQL\n  参照系がメインのシンプルなアプリ\n\n\nコード割合\n\n\n\nGitHubのコード割合的にはこんな感じです。Kotlinが48%。\nただこれだとノイズが多いので、もう少しシンプルにしてみましょう。\n\nまず、Objective-CとJavaは古の社内ライブラリなので除外します。\nその他、レイアウトファイルやら設定ファイルやら諸々も除外して、純粋にKotlinとSwiftの行数のみで比較してみます。\nそうすると、こんな感じになります。\n\n\n  \n    \n      区分\n      割合\n    \n  \n  \n    \n      KMP\n      68%\n    \n    \n      Android(Kotlin)\n      16%\n    \n    \n      iOS(Swift)\n      16%\n    \n  \n\n\n全体のおよそ7割がKotlinで書かれた共通コードです。\nこの数字はiOS/Android合わせた全体に対しての比率なので、各OS毎で計算すると8割近くが共通コードとなっています。\n\nアーキテクチャ\n\nレポジトリ構成\n\nレポジトリ構成はモノレポを採用しています。KMP, Android, iOSすべてのコードを一つのレポジトリで管理している、ということです。\n\nモノレポを採用している理由はいくつかあるのですが、一番大きいのは「共通コードの読み込みが簡単」というものです。\n\nモノレポじゃない選択肢としてKMP, Android, iOSをそれぞれ別個のレポジトリで管理する、というものも考えられます。\nしかし、その場合だとKMPの成果物を各OSのレポジトリから使用する際にひと手間必要になってきます。\n\ngit submoduleで読み込むのか\n\nprivateなMaven RepositoryやCocoaPods Repositoryを作るのか\n\nあるいはsymlinkか…？\n\nなどなど。\nモノレポであればこういったことに悩む必要はありません。\n\n今回のプロジェクトではAndroid/iOS間でのコード共有だけだったのでこの方針にしましたが、サーバサイドとのコード共有もしたい、とか要件が複雑になってきたらレポジトリの分割を検討してもいいと思います。\n\n.\n├── android-features\n│   ├── common\n│   └── debugmenu\n├── androidApp\n├── core\n│   ├── base\n│   ├── di\n│   ├── model\n│   └── semver\n├── data\n│   ├── graphql-api\n│   ├── graphql-document\n│   ├── local\n│   ├── remote\n│   └── repository\n├── domain\n├── features\n│   ├── domain\n│   └── presentation\n├── iosApp\n├── presentation\n│   ├── analytics\n│   ├── auth\n│   ├── build\n│   ├── error\n│   ├── message\n│   ├── presentation-all\n│   ├── presentation-base\n│   └── servicestatus\n└── testing\n    ├── annotation\n    └── mpp-test\n\n\nディレクトリ構成はおおよそこんな感じです。\nandroid-features, androidApp, iosApp以外がKMPのモジュールです。\n\nモノレポにした副次的なメリットとして、自分の直接担当してないOSのコードへのオーナーシップが生まれる、というのがありました。\niOSの人が共通コードを書く際はKMPのコードとiOS側のコードが含まれるPRを作るわけで、そうすると自然とiOSのコードも読むようになります。次第にiOS側のコードに対する提案とか、もっと言うとKMPのコードに対応するAndroid/iOSのコードを両方とも一人で書いてしまう、ということも相互に発生するようになってきました。\n\nCI\n\nCIはbitriseを採用しています。設定は特に凝ったことをする必要はなくて、一つのレポジトリに対してAndroidとiOSのCI設定をそれぞれ行うだけです。\n\nPRが作られたりコミットがpushされると、AndroidとiOSのビルドが同時並行で走ります。\niOS向けのビルドではKotlin/Nativeのテストを行い、Android向けのビルドではKotlin/JVMのテストを行います。\n\niOSのビルドはどうしても時間がかかってしまうので、ktlintなど共通コード向けのLintはより軽量なAndroidのCIで実施しています。\n\nKMPコードのアーキテクチャ\n\n全体的にはレイヤードアーキテクチャを採用しています。\n\n+-----------+\n| ViewModel |\n+-----------+\n    |  |\n    |  +----------+\n    V             V\n+---------+   +---------+\n| UseCase |   | UseCase |\n+---------+   +---------+\n    | |               |\n    | +------------+  |\n    V              V  V\n+------------+   +------------+\n| Repository |   | Repository |\n+------------+   +------------+\n    |  |                    |\n    |  +---------------+    +-----...\n    V                  V\n+------------+   +-----------+\n| RemoteData |   | LocalData |\n+------------+   +-----------+\n\n\nクラスの依存グラフはおおよそこんな感じになっています。レイヤードアーキテクチャのよくある構成になっているのではないかと思います。\n\nプレゼンテーション層から下はすべてKMPで書かれた共通コードです。\n逆に言うと、OS固有のコードは基本的にActivityとかViewControllerとか、View層のものだけになっています。\n\nデータ層のみKMPで共通化、とか色々共通化の度合いに選択肢はあったのですが、せっかくの新規アプリなので「KMPでどこまでできるのか」を確かめる意味合いも含めてこのような決断をしました。\n\n色々難しい点もありましたが、共通コードの割合も前述の通りかなりいい線いってますし、結果的に良かったのではないかと考えています。\n\nViewModelのインターフェイス\n\nさて、プレゼンテーション層より下はすべて共通コード、としたことで各OS側から意識する必要のあるKMPのコードは基本的にViewModelだけにすることができました。\n\nではViewModelは一体どんなインターフェイスになっているのでしょうか。\n\n// MviViewModelはAndroid側ではandroidxのViewModelを継承している\nabstract class MviViewModel&amp;lt;INTENT, ACTION, STATE, EFFECT&amp;gt; : ViewModel() {\n    val state: STATE\n    val states: Flow&amp;lt;STATE&amp;gt;\n    val effects: Flow&amp;lt;Event&amp;lt;EFFECT&amp;gt;&amp;gt;\n    val dispatch(intent: INTENT)\n    fun onCleared()\n}\n\n\n擬似コードですが、ざっくり上記がViewModelのインターフェイスです。\n\n今回のアプリではプレゼンテーション層のデザインパターンとしてMVI(Model-View-Intent)を採用しています。\nMVIについての詳細な説明は他の詳しい記事に譲りますが、下記のような特徴があります。\n\n\n  単方向データフロー\n  ImmutableなState\n\n\n誤解を承知で大変ざっくり言ってしまうと、画面毎にReduxをする、というのが結構近い表現なのかなと思います。\n\nよく見かけるMVIのパターンに追加して、今回のアプリでは Effect というものを追加しています。\nこれはToastやDialogの表示、あるいは画面遷移イベントなど、一時的なイベントをViewに通知するための仕組みです。\nこういったイベント類をStateに含んでしまうと管理が複雑になってしまいがちなので、別物として扱っています。\n\n上記のコードを見ていただくと、EffectはEventというクラスでラップされています。このEventクラスは、Android界隈でよく話題になる、SingleLiveEvent問題に対応するためのクラスです。\n\n最近はStateFlowやSharedFlowが追加されこの辺の問題にも新たなアプローチが追加されそうですが、Flowを使っているからといってこの問題が100%解決できるわけではありません。そのため、本アプリでは今のところEventラッパーを利用して同じイベントが再通知されることを防いでいます。\n\n全体的な処理の流れは下記のようになります。\n\n\n  Viewからdispatchメソッドを通じてイベント(Intent)がViewModelに通知される\n  ViewModelは通知されたイベントをもとに対応する処理を行い、新しいStateやEffectをFlowに流す\n  Viewは購読しているStateやEffectのFlowから新しいState/Effectを受け取り、状態を更新する\n\n\niOSからの使い方\n\nViewModelのインターフェイスについて解説しましたが、ViewModelからの出力はkotlinx.coroutinesのFlowになっています。\nこのFlow、iOSからはそのまま使うことができません。\n\nそのため、下記のようなラッパークラスを用意してあげる必要があります。\n\nclass ViewModelAdapter&amp;lt;Intent, STATE, EFFECT&amp;gt;(\n    private val viewModel: MviViewModel&amp;lt;INTENT, *, STATE, EFFECT&amp;gt;,\n    private val coroutineContext: CoroutineContext\n): CoroutineScope {\n    override val coroutineContext = ...\n    fun dispatch(intent: INTENT)\n    fun onStateChanged(callback: (state: STATE) -&amp;gt; Unit) {\n        launch {\n            viewModel.states\n              .onEach { state -&amp;gt; callback(state) }\n              .collect()\n        }\n    }\n    fun onEffectReceived(callback: (effect: EFFECT) -&amp;gt; Unit)\n    fun onCleared()\n}\n\n\nとまあこんな感じです。\n\n共通化できないコードを共通コードで使う\n\n各OS向けのライブラリとかOS固有の機能を共通側から使いたい場合もあります。\nたとえばFirebaseAnalyticsなどです。\n\nこういった場合には下記の二種類の方法が考えられます。\n\n\n  expect/actualを使う\n  interfaceをKMP側で定義し、各プラットフォームで実装クラスを用意\n\n\nどちらでも要件は達成できますが、テスト時にモックと入れ替えたりすることを考えるとinterfaceで用意するほうが楽です。\n公式でもexpect/actualの利用は最小限に留めるよう推奨されているので、本アプリでもそのようにしています。\n\n利用しているKMPのライブラリ\n\n\n  \n    \n      ジャンル\n      ライブラリ\n    \n  \n  \n    \n      DI\n      Kodein\n    \n    \n      非同期/並列処理\n      kotlinx.coroutines, CoroutineWorker, Stately\n    \n    \n      通信\n      Ktor, kgql(GraphQL), kotlinx.serialization\n    \n    \n      ローカルキャッシュ\n      sqldelight, multiplatform-settings\n    \n    \n      環境変数的なの\n      BuildKonfig\n    \n    \n      ログ\n      Napier\n    \n  \n\n\nKMPのメリット\n\n使い慣れた言語で書ける\n\nAndroidエンジニアから見たらこれがかなり大きいでしょう。\niOSエンジニアからすると、新言語という意味では他のクロスプラットフォームソリューションと大差ないかもしれません。SwiftとKotlinは似ているとよく言われますが、実際どうなんでしょうね。\n\n工数削減\n\n本アプリでのケースではViewModel以下がすべて共通です。そのため、Android/iOSそれぞれ別で作っている場合と比べると、ViewModel以下の作成にかける工数が単純計算で半分ですみます(個人の感想です。実際の効果を保証するものではありません)。\n\n自分がAndroidのViewを書いている間にiOSの人が別画面のViewModelを作っていて、AndroidのViewが書き終わったと思ったらAndroid担当は自分しかいないのに次の画面のViewModelがもう完成している、ということが実際にありました。\n\n同じコードを共有するわけですからViewのコードも似通ったものになります。相互にコードを参考にしあったり実装の相談をしたり、ということもしやすいです。\n\n用語/仕様に差が生まれない\n\nプレゼンテーション層が共通ですから、必然的に用語も同じになります。\nたとえばユーザのプロフィール画面がiOSではAccountViewControllerでAndroidではProfileFragment、とか言うことは起きないわけです。ViewModelの名前がAccountViewModelだったら両OSともにそれに沿った名前になります。\n\nビジネス的に重要な部分も共通にできるので、入力フォームのバリデーションロジックがプラットフォームで異なるとか、ログの値や名称がプラットフォームで異なる、とかいう事態も回避することができます。\n\nアプリ開発であるあるな「え、こんな機能あったんですか、Androidでは実装してないです…」も、共通部分のコードはAndroid/iOS両方のエンジニアがレビューしているはず、という前提に立てば基本的に発生しないはずです。\n\nViewを各プラットフォームで書ける\n\nこれは考え方によるかもしれませんが、KMPでは基本的にViewを各プラットフォームで書くことになります。\nそのため、各OSの特性やデザインガイドラインを意識したUIを最適な方法で作ることができます。最新OSの機能も自由に使えるはずです。\n\nKMPでもViewを共通化したい、という場合は現状すぐれた選択肢はないのですが、将来的にはJetpack Compose(というかJetBrains版のComposeというか)が対応するかもしれません\n\n導入する範囲を選べる\n\nこれも他のクロスプラットフォームソリューションと比べたときのメリットになると思います。\n\n本アプリではできるだけたくさんのコードを共通化することを目標に開発していましたが、もちろんプロジェクトのニーズに応じて導入する範囲を選ぶことも可能です。\nたとえばリモートAPIクライアントだけKMPで書いてAndroid/iOS/Webフロントエンドで共有したい、とか。\n\nKMPの成果物は、Androidからはjarやaar、iOSからはframework、JavaScriptからはnpmパッケージというように、各プラットフォームで自然に利用できる形で出力されます。\n使う側のコードでは特に込み入った設定は必要ないので、既存のプロジェクトでも比較的導入しやすいのではないかな、と思います。\n\nKMPのデメリット\n\n学習コスト\n\nデメリットという観点だと学習コストが一覧大きいでしょう。\n\nまずiOSの人にKotlinを学んでもらう必要があります。\n\nAndroidエンジニアも、Kotlin普段遣いしているから楽勝、とはいきません。\n\nKotlin/Nativeには、マルチスレッド周りの挙動を中心に色々とKotlin/JVMとは異なる仕様がいくつかあります。\nAndroidの感覚で並列処理を書いてしまうと、iOSでクラッシュするコードになってしまうことが多々あります。\nこの特性を理解し、iOS(Kotlin/Native)で動くことをテスト等で確認しながら開発を進めていく必要があります。ちなみにiOSでちゃんと動けば基本的にAndroidでもちゃんと動きます。\n\n日本語の資料がまだ少ない、というのも人によっては障害になるでしょう。\n英語の資料はそこそこありますし、Kotlin公式Slackでは活発にやり取りが行われているので、英語でのコミュケーションができれば必要な知識はだいたい揃います。\nGitHub/YouTrackのissueを読むのも色々な不具合をしらべる有効な手立てです。\n\nKMPはまだα版\n\nNetflixやDropboxをはじめ、本番環境に導入している企業が多いので忘れてしまいがちですが、KMPはまだα版です。\n破壊的変更もしばしばあります。\n\n最近だと、Kotlin 1.4.0に対応するKtorのリリースで、いきなりマルチスレッド対応版のkotlinx.coroutinesが必須になったことは記憶に新しいです。\n\n将来的にKotlin/Nativeのメモリ管理モデルが完全にリプレースされることが予告されている点も、α版感あふれる事項です。\n\n「なにもしてないのにIDEが真っ赤になった、よくわからないけど色々なキャッシュを全削除したら直った」みたいなこともたまに、普通のAndroid開発よりは高い頻度で発生します。\n\nライブラリも、ファイル操作周りをはじめ、まだ基本的なものが揃っていなかったりします。\nまあこれは考え方によってはチャンスでもあります。\n競合が少ないので、自分で作ったライブラリがコミュニティのデファクト・スタンダードになれる可能性も比較的高いです。\n\nまとめ\n\nKMPを使ってよかったか\n\nこれはYESと言い切れます。\n\nコードの共通化を無理なく、使いやすい言語で実現することができ、工数の削減も叶いました。\n\n既存のプロジェクトへの導入も容易ですし、ビジネスロジックのみ共有したい、という要件の場合には有効な選択肢になりうると考えています。\n\nKMPをおすすめできるか\n\nこの観点では、条件付きのYESになります。\n\nKMPの学習コストは決して低くはないです。\n日本語の資料もまだ少ないですし、ある程度自分で調べる力が必要です。\n\nフレームワーク側の実装を読んだり、GitHubやYouTrackのissueを調べたり。あるいは英語の文献を読んだりKotlin Slackをはじめとした英語のコミュニティで発言をしたり。\n\nKMPが安定してくるに従って改善していくでしょうが、現状はある程度エンジニアとしての地力が求められる環境である、と言えるでしょう。\n\n経験の浅い人が多いチームで、しかしそれでもクロスプラットフォームで開発したい、という場合もあるかと思います。\nそういった場合は、KMPではなくFlutterを選んだほうがいいかもしれません。\n\nFlutterのほうが日本人のコミュニティが大きいですし、Viewまで共通で書けるため、各プラットフォームの知識はKMPほど必要ありません。\n\nあるいはクロスプラットフォームを選択したい、という方針と真っ向から対立してしまいますが、素直にAndroid版とiOS版を個別で実装して経験を積む、という選択肢を検討してみるのもアリだと思います。\nFlutterにしてもKMPにしても各OSの仕様を知らないと解決できない問題が存在します。要件が複雑になればなるほどそういったケースは増えてくるので、各OSの知見がチーム内に少ない状態でクロスプラットフォームを選択してしまうと、結果的に工数が増えてしまう可能性があります。\n\n\n\n以上です。\n\nなんだかんだ色々書きましたが、私は日々KMPで開発してて大変楽しいです。\n"
} ,
  
  {
    "title"    : "楽天モバイルをAndroid11なOnePlus 8 Proで使う",
    "category" : "diary",
    "tags"     : " diary, android, til",
    "url"      : "/2020/12/18/rakuten-mobile-oneplus8pro/",
    "date"     : "December 18, 2020",
    "excerpt"  : "普通にSIMさしてAPN設定しただけでは通信できるようにならない\n\n\n  \n    \n      項目\n      値\n    \n  \n  \n    \n      APN名\n      楽天(rakuten.jp)\n    \n    \n      APN\n      rakuten.jp\n    \n    \n      MCC\n      440\n    \n    \n      MNC\n      11\n    \n    \n      APNタイプ\n      default,supl,d...",
  "content"  : "普通にSIMさしてAPN設定しただけでは通信できるようにならない\n\n\n  \n    \n      項目\n      値\n    \n  \n  \n    \n      APN名\n      楽天(rakuten.jp)\n    \n    \n      APN\n      rakuten.jp\n    \n    \n      MCC\n      440\n    \n    \n      MNC\n      11\n    \n    \n      APNタイプ\n      default,supl,dun\n    \n    \n      APNプロトコル\n      IPv4/IPv6\n    \n    \n      APNローミングプロトコル\n      IPv4/IPv6\n    \n    \n      PDPタイプ\n      IPv4/IPv6\n    \n  \n\n\nPDPタイプに関してはOnePlus8Proに入力欄はない\n\nこの設定をしたあと、追加で下記も必要\n\n\n  電話アプリを起動\n  *#*#4636#*#*を入力し、「テスト中」モードに入る\n  「携帯電話情報」をタップ\n  「優先ネットワークの設定」から「LTE only」を選択\n\n\n以上で通信が可能になる。\n\nたまに設定がリセットされることもあるらしい。\n"
} ,
  
  {
    "title"    : "Nuxt.js静的サイトモードのfallbackのSPAモードとnuxtServerInit",
    "category" : "programming",
    "tags"     : " vue.js, nuxt.js, til",
    "url"      : "/2020/06/29/nuxtserverinit-in-spa-fallback/",
    "date"     : "June 29, 2020",
    "excerpt"  : "大前提として、nuxtServerInitというAction名のとおり、これはサーバサイドでしか実行されない。\n静的サイトモードだと、設定によるけどgenerateコマンドの実行時に呼ばれる。\n\nそしてfallbackのSPAモード。これは動的に扱いたいroute用の機能だけど、このSPAモード用のhtml(200.htmlとか404.htmlとか)の生成時にはnuxtServerInitは呼ばれない。\n\nSPAモードではnuxtServerInit呼ばれない、という仕様なんだから確かにそ...",
  "content"  : "大前提として、nuxtServerInitというAction名のとおり、これはサーバサイドでしか実行されない。\n静的サイトモードだと、設定によるけどgenerateコマンドの実行時に呼ばれる。\n\nそしてfallbackのSPAモード。これは動的に扱いたいroute用の機能だけど、このSPAモード用のhtml(200.htmlとか404.htmlとか)の生成時にはnuxtServerInitは呼ばれない。\n\nSPAモードではnuxtServerInit呼ばれない、という仕様なんだから確かにそのとおり。なんだけどこれを完全に失念しててSPAモードで表示していた一部ページと、そこから遷移した各ページで一部データにアクセスできない、という状況が生まれてしまっていた。\n\n解決する方法はいくつかあるけど、今回はSPAモードでもnuxtServerInitを呼ぶ方法を採用した。\n実装は簡単。\n\nまずはStateに初期化済みかどうか判定できる値を用意する。initialized: booleanみたいな値を用意するのでもいいだろう。\n\n次にpluginを追加する。単純に、Stateが初期化済みでなければnuxtServerInitを実行する。\nresとかreqとかcontextの一部の値はクライアント側ではアクセスできないので、そこは注意が必要。\n\n// ~/plugins/init.client.ts\nimport { Context } from &#39;@nuxt/types&#39;\nimport { RootState } from &#39;~/store&#39;\n\nexport default async function ({ app, store }: Context): Promise&amp;lt;void&amp;gt; {\n  if (!(store.state as RootState).initialized) {\n    await store.dispatch(&#39;nuxtServerInit&#39;, app.context)\n  }\n}\n\n\nnuxt.config.tsのplugin設定はこんな感じに\n\nplugins: [\n    ...,\n    { src: &#39;~/plugins/init.client.ts&#39;, mode: &#39;client&#39; },\n]\n\n\nmode: &#39;client&#39;が重要。nuxtServerInitはサーバサイドでは普通に呼ばれるので、SPAモード(=ブラウザ側)でのみ処理されればいい。\n\n参考\n\n\n  Generate and dynamic route fallback if static file is not generated · Issue #7051 · nuxt/nuxt.js\n\n"
} ,
  
  {
    "title"    : "Nuxt.jsでgenerateした時のfallbackオプションについて",
    "category" : "programming",
    "tags"     : " vue.js, nuxt.js, til",
    "url"      : "/2020/06/13/nuxt-generate-fallback/",
    "date"     : "June 13, 2020",
    "excerpt"  : "https://ja.nuxtjs.org/api/configuration-generate/#fallback\n\ngenerate.fallback=true にすると 404.html が生成される。\nこれ、動的にルーティングしたいページへのリクエストが来たときに、「URLはそのままで404.htmlを提供する」という使い方をするものだった。\n最初この使い方がよくわかってなくて、単純に存在しないページへのリクエストがあったときに単純にリダイレクトしてたけど、そういうことじゃなかった...",
  "content"  : "https://ja.nuxtjs.org/api/configuration-generate/#fallback\n\ngenerate.fallback=true にすると 404.html が生成される。\nこれ、動的にルーティングしたいページへのリクエストが来たときに、「URLはそのままで404.htmlを提供する」という使い方をするものだった。\n最初この使い方がよくわかってなくて、単純に存在しないページへのリクエストがあったときに単純にリダイレクトしてたけど、そういうことじゃなかった。\n\n404.html ということで単純なエラーページぽく見えていたけど、実際はこのhtml上でURLに基づいてルーティングをしてくれる。\nそこで解決できたらそのままページを表示するし見つからなければ/components/layout/error.vueで書いたエラーページに遷移するし、という挙動。\n\nわかってしまえばそりゃそうだ、という話でした。\n"
} ,
  
  {
    "title"    : "AndroidDagashiを支える技術",
    "category" : "programming",
    "tags"     : " github, vue.js, nuxt.js, androiddagashi",
    "url"      : "/2020/06/05/tech-stack-of-androiddagashi/",
    "date"     : "June 5, 2020",
    "excerpt"  : "AndroidDagashi、ご存知ですか。\n\n英語圏のものを中心に、Android関連のニュース/記事を日本人向けにまとめている週一更新のまとめサイトです。\n2018年の2月に開設して、おかげさまで2年が経ちました。\n\nさて今日はAndroidDagashiをどうやって運用しているかざっくりまとめてみます。\n\n\n\n全体像を図示するとだいたいこんな感じです\n\n\n\nAndroidDagashiはドメインからわかる通り、GitHub Pagesでホストされた静的サイトです。\nVue.jsを利用...",
  "content"  : "AndroidDagashi、ご存知ですか。\n\n英語圏のものを中心に、Android関連のニュース/記事を日本人向けにまとめている週一更新のまとめサイトです。\n2018年の2月に開設して、おかげさまで2年が経ちました。\n\nさて今日はAndroidDagashiをどうやって運用しているかざっくりまとめてみます。\n\n\n\n全体像を図示するとだいたいこんな感じです\n\n\n\nAndroidDagashiはドメインからわかる通り、GitHub Pagesでホストされた静的サイトです。\nVue.jsを利用したWebアプリケーションフレームワークであるNuxt.jsの、静的サイト生成機能を使っています。\n\nこのサイトは、2つのGitHubレポジトリで構成されています。\n一つはサイト本体のコードが置いてあるAndroidDagashi/androiddagashi.github.io。\nそして、記事データを管理するAndroidDagashi/AndroidDagashi です。\n\nAndroidDagashi/AndroidDagashi では、1マイルストーンを各週のページ、1 issueを1リンクとして管理しています。シェアしたいリンクをissueとして投稿して、そのissueを対応する週のマイルストーンに紐づける感じです。\n\nデプロイにはAndroidDagashi/androiddagashi.github.ioのGitHub Actionsを利用しています。\n\nデプロイ関係のワークフローは下記の3つです。\n\n\n  1時間に一度、AndroidDagashi/AndroidDagashiから記事データを取得してサイト用のJSONファイルに加工し、pushする\n  AndroidDagashi/androiddagashi.github.ioへのpushをトリガーに起動し、サイトをビルドしGitHub Pagesにデプロイする\n  GitHub Pagesへのデプロイ完了をトリガーに起動し、新着記事があったらTwitterへ投稿する\n\n\nサイト用JSONファイルの作成ワークフローはclose済みのマイルストーンを取得するようになっています。\n1時間毎に動かしているのは、コメントとかあった時に反映するためにですね(現状あまり活用できていませんが…)。\n\nJSONの生成ジョブは、特定のissueへのコメントで実行できるようにもしています。\nだいぶ泥臭い設定になっていますが、2020年5月末現在GitHub Actionは手動実行をサポートしていないのでその代替手段です。\n\n\n\nそんな感じで、日々の運用作業は\n\n\n  リンク(issue)を投稿する\n\n\nだけです。\n\nただそれ以外に毎週のリリース作業として、\n\n\n  その週に投稿されたリンクからめぼしいものをピックアップしてマイルストーンのサマリを作成\n  リリース直前(だいたい日曜の20時リリースなので19時-20時の間)にマイルストーンをclose\n\n\nがあります。\n\n半年前くらいまでは新着通知のツイートも手動だったんですが、一念発起して自動化しました(だいぶ楽になった)。\nやろうと思えばサマリの作成とマイルストーンのcloseも自動化できそうな気はするので、今後の課題です。\n\n\n\nおわりに\n\n以上、ざっくりとしたAndroidDagashiのサイトについての説明でした。\n\nこの仕組み自体はGitHubとFirebase(無料枠で済むしTwitterに投稿とかしなければいらない)だけで成り立っているので、結構いろんな分野で汎用的に使えるのではないかなー、と思っています。AndroidDagashiでは記事データのレポジトリもサイトのレポジトリもpublicで運用していますが、privateにしても特に問題はないはずです。\n\nandroiddagashi.github.io はMITライセンスで公開しているので、気になった方はご自由にフォークして遊んでみてください。\nコントリビュートもお待ちしております！\n"
} ,
  
  {
    "title"    : "GitHub Actionsでworkflowからpushしたときに後続のworkflowが起動しなくなった件",
    "category" : "programming",
    "tags"     : " GitHub Actions, til",
    "url"      : "/2020/04/18/actions-checkout-v2-push/",
    "date"     : "April 18, 2020",
    "excerpt"  : "GitHub Actionsを使ってGitHub Pagesを運用している。\n定期的にあるAPIから情報を取得して、更新があったらレポジトリにpushする。そしてそのpushをトリガーにしてGitHub Pagesにサイトをデプロイする、というフロー。\n\nこれがついさっきいろいろコードを更新してたら動かなくなった。\n自分でpushするときはデプロイ用のworkflowが動くけど、workflowからpushするときは動かないのだ。\n\n動き的には、GitHub Actions動かすと自動で設...",
  "content"  : "GitHub Actionsを使ってGitHub Pagesを運用している。\n定期的にあるAPIから情報を取得して、更新があったらレポジトリにpushする。そしてそのpushをトリガーにしてGitHub Pagesにサイトをデプロイする、というフロー。\n\nこれがついさっきいろいろコードを更新してたら動かなくなった。\n自分でpushするときはデプロイ用のworkflowが動くけど、workflowからpushするときは動かないのだ。\n\n動き的には、GitHub Actions動かすと自動で設定されるアクセストークンを利用している時のような動作だ。このトークンは、無限ループを防ぐためにpush時にworkflowがトリガーされない。\n\nしかし、workflowの設定ファイルを見ても自分で用意した別のアクセストークンを利用している。\n\nGitHubのフォーラムを探してみると、そのものズバリなトピックがあった。\n\n結論から言うと、 actions/checkout をv2に更新したのが原因だった。\nv2からは後続のgitコマンドで、デフォルトのアクセストークンが使われるような設定になっていたのだ。\n\nということで actions/checkout@v2 の設定に persist-credentials: false を設定したら復旧した\n\n- name: Checkout\n  uses: actions/checkout@v2\n  with:\n    persist-credentials: false\n\n\n参考\n\n\n  actions/checkout: Action for checking out a repo\n  Solved: Re: Push from action (even with PAT) does not trig… - GitHub Community Forum\n\n\n"
} ,
  
  {
    "title"    : "(KMP) &#39;ERROR: Cause: invalid type code: 00&#39; が出たときにすること",
    "category" : "programming",
    "tags"     : " kotlin, til, kmp",
    "url"      : "/2020/04/08/dealing-with-invalid-type-code-00/",
    "date"     : "April 8, 2020",
    "excerpt"  : "IntelliJ IDEAでKotlin Multiplatform Projectを開くと、たまにこんなエラーでGradle Projectの同期に失敗することがある。\n\nCause: invalid type code: 00\nNew Gradle Sync is not supported due to containing Kotlin Module\n\n\nエラーメッセージからはなんのことやらよくわからないのだけれど、対処方法は簡単。\n\nIntelliJの Preferences を...",
  "content"  : "IntelliJ IDEAでKotlin Multiplatform Projectを開くと、たまにこんなエラーでGradle Projectの同期に失敗することがある。\n\nCause: invalid type code: 00\nNew Gradle Sync is not supported due to containing Kotlin Module\n\n\nエラーメッセージからはなんのことやらよくわからないのだけれど、対処方法は簡単。\n\nIntelliJの Preferences を開いて、Experimental &amp;gt; Gradle &amp;gt; Only sync the active variant を無効にするだけだ。\n\n参考\n\n  MPP, IDE: “ERROR: Cause: invalid type code: 00” on project import in MPP with Android target with Gradle JDK 1.8 : KT-34997\n\n"
} ,
  
  {
    "title"    : "2019年シュトーレンまとめ",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2020/02/03/2019-stollen-wrapup/",
    "date"     : "February 3, 2020",
    "excerpt"  : "2019年食べたシュトーレンを振り返るよ。\n\n2019年は計15本のシュトーレンを食べた。\n今までも毎年数本買って食べてたんだけど、特にメモってなくて前年に「これ微妙だな…」って思ったやつもまた買っちゃったりしてたので今年はまとめてみよう、と思った次第。\nそしたら調子に乗りすぎていつの間にかこんな本数に。\n\nそれぞれ一言コメント書いてこうかと思ってたけど、Twitterからコピペするのに疲れたので印象的なものだけ。\n\n前提知識ですが筆者はどちらかといえばしっとりめなシュトーレンが好み。\n\n...",
  "content"  : "2019年食べたシュトーレンを振り返るよ。\n\n2019年は計15本のシュトーレンを食べた。\n今までも毎年数本買って食べてたんだけど、特にメモってなくて前年に「これ微妙だな…」って思ったやつもまた買っちゃったりしてたので今年はまとめてみよう、と思った次第。\nそしたら調子に乗りすぎていつの間にかこんな本数に。\n\nそれぞれ一言コメント書いてこうかと思ってたけど、Twitterからコピペするのに疲れたので印象的なものだけ。\n\n前提知識ですが筆者はどちらかといえばしっとりめなシュトーレンが好み。\n\n2019年最初の #シュトーレン はポンパドウル。だいぶパンぽい。もっと密度があってしっとりしてるほうが好みだな pic.twitter.com/42HrCnvsDE&amp;mdash; せーい (@_yshrsmz) November 11, 2019\n\n2019年2つ目の #シュトーレン はANDERSENのもの。これもだいぶパンぽくてしっとり感は控えめ。マジパンは大きいのがゴロッと入ってる pic.twitter.com/qyyj41WSCo&amp;mdash; せーい (@_yshrsmz) November 11, 2019\n\n2019年3つ目の #シュトーレン はLES DEUX MAGOT PARISのもの。実はだいぶ詰まってて、食べるとナツメグが口中に広がって華やかな感じ。マジパンは練り込まれててそれとわかる状態にはなってなさそう pic.twitter.com/UbGo6gamty&amp;mdash; せーい (@_yshrsmz) November 23, 2019\n\n2019年4つ目の #シュトーレン は大阪の五感のもの。和風のシュトーレンで、干柿とか柚子が入っててちょっと違った華やかさがある。生地はフワフワしつつもしっとりした感じ pic.twitter.com/gIy9GI1J08&amp;mdash; せーい (@_yshrsmz) November 25, 2019\n\n2019年5つ目の #シュトーレン はカーべー・ケージのもの。しっとりめでフルーツも多め。オレンジピールとシトロンピールが効いてる pic.twitter.com/wPjqock4i5&amp;mdash; せーい (@_yshrsmz) November 27, 2019\n\n2019年6つ目の #シュトーレン は東急キャピトルホテル ORIGAMIのもの。洋酒が効いていて、もちろんマジパンもはいってるけどそれよりは洋酒でしっとりしてる感じ pic.twitter.com/UuOa85L35k&amp;mdash; せーい (@_yshrsmz) December 2, 2019\n\nこれめちゃくちゃ洋酒が効いてて、どちらかといえば大人のデザートって感じのシュトーレンだった。\n\n2019年7つめの #シュトーレン はTHIERRY MARXのもの。外装の粉砂糖多めでポロポロ崩れやすい。大きめのマジパンがゴロッと入っててしっとりさは好みであるものの、ドライフルーツの種類は少なめでもう少し味の変化がほしい。あ、ラムも効いてる。 pic.twitter.com/eIdWnJ4ASv&amp;mdash; せーい (@_yshrsmz) December 7, 2019\n\n2019年8つめの #シュトーレン はKINOKUNIYAのもの。これ2018年のイチオシだったんだけど今年もやっぱりおいしい！　しっとり感も味の彩りもほどよい。オレンジピール？がいい感じ pic.twitter.com/LdZXMIzuPO&amp;mdash; せーい (@_yshrsmz) December 13, 2019\n\n2019年9個目の #シュトーレン は、和楽紅屋のもの。ドライフルーツのかわりに豆がたくさん入っている。甘納豆とか甘い豆が好きなら選択肢としてあり。ちょっと変わったやさしい味 pic.twitter.com/1Xnc7YDUXL&amp;mdash; せーい (@_yshrsmz) December 16, 2019\n\n和風シュトーレンならこれ。豆菓子好きもこれ。\n\n2019年10個目の #シュトーレン はKINOKUNIYAのチョコレートシュトーレン。スパイスとかシュトーレンぽさはありつつもチョコレートで濃厚 pic.twitter.com/bWpKXYzCfj&amp;mdash; せーい (@_yshrsmz) December 16, 2019\n\n外装はチョコレートというよりはココアパウダーだったのかしらん？\nかなりベチャベチャしていた。同じチョコ系シュトーレンだったらジョエル・ロブションの方が好み。\n\n2019年10個めの #シュトーレン はジョエル・ロブションのもの。わりとさくさく目の食感で、ドライフルーツも種類多め。いちじくの味がよい。 pic.twitter.com/fUaOmjMVJi&amp;mdash; せーい (@_yshrsmz) December 21, 2019\n\nジョエル・ロブションのシュトーレンは二本とも当たりだった。\nもう9本も食べてだいぶ飽き始めていた時期だったので、知人宅にでやったホームパーティにお土産として持ち込んだんだけど、家でまるまる一本食べても良かったなーと思うくらい。\n\n2019年11個めの #シュトーレン はジョエル・ロブションのショコラ。プレーンなやつと同じで食感はさくさく。アールグレイの風味と貴腐ワインに漬けたレーズンがよい pic.twitter.com/7IYFjW9QNo&amp;mdash; せーい (@_yshrsmz) December 21, 2019\n\n2019年１２個目の #シュトーレン はル・パン神戸北野のもの。しっとりだけどこれが本来のものなのか家で寝かせた結果なのかわからない。味はスタンダードで甘さ控えめ pic.twitter.com/IWIxh1BQtC&amp;mdash; せーい (@_yshrsmz) December 26, 2019\n\n2019年13個目の #シュトーレン はFar East Bazaarのもの。ドライフルーツがたくさんのってて華やかな見た目。古代小麦とデーツを使ってるだけあって生地はすこし野趣を感じるというか、黒パンぽさが少しあるというか。今まで食べてきたのとは全く違う方向の甘さでおもしろい。 pic.twitter.com/rYiJq00t7t&amp;mdash; せーい (@_yshrsmz) December 27, 2019\n\n古代小麦とデーツ！って感じの重い食感だった。これはこれでありだけどシュトーレンか？\n\n2019年14個目の #シュトーレン はミル・ヴィラージュのもの。パン寄りでスタンダード、ふわふわちょっとしっとりな感じ。 pic.twitter.com/xoOyAYEhBT&amp;mdash; せーい (@_yshrsmz) December 31, 2019\n\n2019年15個目の #シュトーレン はネモ・ベーカリーのもの。和栗がゴロッと入ってて独特な味わい。結構好み pic.twitter.com/OMGpPopaPs&amp;mdash; せーい (@_yshrsmz) January 4, 2020\n\n栗好きならあり。\n\nリピートしたいもの\n\n\n  LES DEUX MAGOT PARIS\n  カーべー・ケージ\n  東急キャピトルホテル ORIGAMI\n  KINOKUNIYAのプレーン\n  ジョエル・ロブション\n\n\nまとめ\n\n1シーズンで15本も食べると飽きる\n\n"
} ,
  
  {
    "title"    : "2019年を振り返って",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2019/12/31/lookingback-2019/",
    "date"     : "December 31, 2019",
    "excerpt"  : "2019年を振り返るよ。\n\n仕事\n\nKotlin Multiplatform ProjectでAndroidとiOSのモバイルアプリを作っています。新規のプロジェクトで、ようやくリリースできそうな気配。\nKMP、いろいろ考えることはあるけれどなかなかうまいこと回せている気がする。\nうちのチームではプレゼンテーション層からKMPで共通化しているんだけど、自分がAndroidの画面を作ってるうちにiOSの人が新規のViewModelを作っていて、すぐに新しい画面に取りかかれる、というのはなかな...",
  "content"  : "2019年を振り返るよ。\n\n仕事\n\nKotlin Multiplatform ProjectでAndroidとiOSのモバイルアプリを作っています。新規のプロジェクトで、ようやくリリースできそうな気配。\nKMP、いろいろ考えることはあるけれどなかなかうまいこと回せている気がする。\nうちのチームではプレゼンテーション層からKMPで共通化しているんだけど、自分がAndroidの画面を作ってるうちにiOSの人が新規のViewModelを作っていて、すぐに新しい画面に取りかかれる、というのはなかなか素敵な経験だった。\n\n個人\n\n今年は結局Flutterでアプリ出せなかったのが心残り。\nやはり本業がある程度楽しいと個人開発まで手が回らないなあ、という印象。\nいくつかライブラリは公開できたけど、これはまあ仕事の延長みたいなところはある。\n\nTabs2Links\n\nブログ書くときに参考サイトのリンクをまとめるのが手間だったので作ったChrome拡張機能。紹介記事はこちら。\n\nBuildKonfig\n\nKotlin Multiplatform ProjectでAndroidのBuildConfigに相当する、APIキーとか埋め込む機能が欲しくて作ったGradle Plugin。\n幸い同じようなニーズを持っている人は多かったらしく、そこそこ使ってもらえてるみたい。\n紹介記事はこちら。\nこの記事書いたときからちょっと変わってて、共通の定数しかないときは普通のobjectを生成するようになってたり、あと近いうちにnullableがサポートされる予定。\n\nkgql\n\nGraphQLのドキュメントから、kotlinx.serializationでいい感じにJSONにパースできるコードを生成するGradle Plugin。\n紹介記事はこちら。\n\nAndroidDagashi\n\nおかげさまで100回を迎えることできた。新しくメンバーも迎えて、2020年も粛々とやっていく。\n技術的な点で行くとデプロイ周りのジョブをCircleCIからGitHub Actionsに移行したり、あとはツイートを自動化したりとかやった。\n\nデス・ストランディング\n\nこれ何気に小島監督作品初プレイだった。荷物運ぶだけなのにこんなに面白くできるんだなあ、と。\nアクション要素もあるけどほどほどで、わりとゆるーくできてよかった。\n\nミニチュアペイント\n\n\n\nふと思い立ってミニチュアペイントを始めてみた。\n最初はウォーハンマーをいくつか塗って、その後もっとかわいいのが塗りたくなってKingdomDeathに手を出した。\nちまちま塗るのなかなか楽しくて、立体塗り絵って感じ。シタデルカラーはもうシステムが出来上がっているので調色で戸惑うことも殆どなくてよい。\n気がついたら塗装ブースが増えてたりエアコンプレッサー(TWIN CUBE)が増えてたり、結構な沼です。2020年もゆるゆる浸かっていこうと思う。\n\n2020年の目標\n\n個人でメンテしてるアプリ/サービスが多くなってくるとそっちのメンテの時間も捻出しなきゃでアレ。\n今年はAndroid版OmnitweetyとMonotweetyをまとめてしまおうかと計画中。\nあと我が家のペット関連で作りたいアプリがあるのでそれも形にしたい。\n"
} ,
  
  {
    "title"    : "2019年買ってよかったもの",
    "category" : "diary",
    "tags"     : " diary, bestbuy",
    "url"      : "/2019/12/31/bestbuy2019/",
    "date"     : "December 31, 2019",
    "excerpt"  : "買ってよかったもの振り返るよ。\n\n生活雑貨とか\n\nほうき&amp;amp;ちりとりセット\n\n\n\nルンバも生息しているけど、階段とかルンバが使えない場所の掃除に最適。\nダイソンの掃除機もあるにはあるけど、結構ゴツいやつなので全く使わなくなってしまった。\n掃除したいときにサッと使えるのもポイント高い。\n\nココアクア\n\nグラスで育てる観葉植物。東急ハンズで購入。\n職場の机においてて、いつも視界の端に入って癒やされる。\n植物の成長とかあまり意識してこなかったけど、数日で結構伸びてたりして「ああ生きてるんだ...",
  "content"  : "買ってよかったもの振り返るよ。\n\n生活雑貨とか\n\nほうき&amp;amp;ちりとりセット\n\n\n\nルンバも生息しているけど、階段とかルンバが使えない場所の掃除に最適。\nダイソンの掃除機もあるにはあるけど、結構ゴツいやつなので全く使わなくなってしまった。\n掃除したいときにサッと使えるのもポイント高い。\n\nココアクア\n\nグラスで育てる観葉植物。東急ハンズで購入。\n職場の机においてて、いつも視界の端に入って癒やされる。\n植物の成長とかあまり意識してこなかったけど、数日で結構伸びてたりして「ああ生きてるんだなあ」とか気づけて良い。\n毎日帰宅前に写真とってて、これつなげて動画にしたら面白いかなーって思ってたけど、実際やってみたら日によって思ったより正面がずれててあまり面白い絵にならなかった。\n\n輪怐のバックパック\n\n独特な形状に一目惚れして購入。\nギリギリMacbook Pro 15インチも入るくらいのサイズ感。\nデザインに惹かれて買ったけど、収納量も充分で実用的。\n\nいびき防止用のテープ\n\n\n\n専用のものもあるけど、こういう包帯とかとめるテープで充分用が足りしコスパも良い。\n確実に口が閉じられるので、マスクするよりよっぽど効果がある。\n\nガジェット類\n\n今年は珍しくスマホを買わなかった。\nPixel4がProject Soli使えたら買ってたんだけど…\n来年はフォルダブル端末で面白いの出てくれたらいいなあ。\n\nEIZO FlexScan 27.0インチ ディスプレイモニター\n\n\n\n職場で使っててめちゃくちゃ良かったので家にも設置。\nつい最近モニターアームも導入したので快適な作業環境が整いました。\n4Kだし色もきれいだし、あとあまり使わないけど縦でも使えるのがよい。\n\nMacbook Pro\n\n13インチのCTOでメモリとCPUをアップグレード。\nスペック的には16インチがいいんだけど、やはり大きさがネック。\n13インチにメモリ32GB載るようになってほしい…\n\n"
} ,
  
  {
    "title"    : "(KMP) commonTestをRobolectricで実行する",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2019/11/06/robolectric-and-kotlin-mpp-commontest/",
    "date"     : "November 6, 2019",
    "excerpt"  : "AndroidXのandroidx.test.ext:junitを利用するとサクッとできます。\n\n基本的な方針は、Kotlin/Native向けにcommonTestを実行するときはkotlin-testを使いつつ、Android向けに実行するときはJUnit4上でRobolectricを使います。\n\nちなみにcommonTestのテストクラスはこんな感じになります。\n\n@RunWith(AndroidJunit4::class)\nclass SomeTest {\n\n    @Before...",
  "content"  : "AndroidXのandroidx.test.ext:junitを利用するとサクッとできます。\n\n基本的な方針は、Kotlin/Native向けにcommonTestを実行するときはkotlin-testを使いつつ、Android向けに実行するときはJUnit4上でRobolectricを使います。\n\nちなみにcommonTestのテストクラスはこんな感じになります。\n\n@RunWith(AndroidJunit4::class)\nclass SomeTest {\n\n    @BeforeTest\n    fun setup() {}\n\n    @AfterTest\n    fun tearDown() {}\n\n    @Test\n    fun `It should do something`() {}\n}\n\n\nこのRunWithやAndroidJUnit4を作っていきます。\n\nまずはライブラリの追加。\ncommonTestではkotlin-testを読み込みつつ、androidTestではkotlin-testとandroidx.test.ext:junitやRobolectricを読み込んでいく。iosTestは特に必要ありません。\n\nkotlin {\n    android()\n    iosX64(&quot;ios&quot;) {\n        binaries {\n            framework()\n        }\n    }\n\n    sourceSets {\n        commonMain {}\n        commonTest {\n            dependencies {\n                implementation &quot;org.jetbrains.kotlin:kotlin-test-common:1.3.51&quot;\n                implementation &quot;org.jetbrains.kotlin:kotlin-test-annotations-common:1.3.51&quot;\n            }\n        }\n\n        androidMain {}\n        androidTest {\n            dependencies {\n                implementation &quot;org.jetbrains.kotlin:kotlin-test:1.3.51&quot;\n                implementation &quot;org.jetbrains.kotlin:kotlin-test-junit:1.3.51&quot;\n                implementation &quot;androidx.test:core:1.2.1-alpha02&quot;\n                implementation &quot;androidx.test.ext:junit:1.1.2-alpha02&quot;\n                implementation &quot;org.robolectric:robolectric:4.3.1&quot;\n            }\n        }\n\n        iosMain {}\n        iosTest {}\n    }\n}\n\n\nまず共通部分のexpect定義\n\n// commonTest\nimport kotlin.reflect.KClass\n\nexpect annotation class RunWith(val value: KClass&amp;lt;out Runner&amp;gt;)\nexpect abstract class Runner\nexpect class AndroidJUnit4 : Runner\n\n\n次にAndroid向けのactual定義。\njunitやandroidxの該当クラスへのtypealiasです。\n\n// androidTest\nactual typealias RunWith = org.junit.runner.RunWith\nactual typealias Runner = org.junit.runner.Runner\nactual typealias AndroidJUnit4 = androidx.test.ext.junit.runners.AndroidJUnit4\n\n\n最後にiOS向けのactual定義\n\n// iosTest\nimport kotlin.reflect.KClass\n\nactual annotation class RunWith(actual val value: KClass&amp;lt;out Runner&amp;gt;)\nactual abstract class Runner\nactual class AndroidJUnit4 : Runner()\n\n\niOS側の定義は見てわかるように、単純なプレースホルダです。\niOS向けのcommonTestはiOSシミュレータ上で実行されるので(そういうGradleタスクを書く必要はありますが)特にRobolectric的なものは必要ありません。\n\nandroidTestは、instrumentation testのような顔をしていますがjvm上で動くためRobolectricが必要になります。\n\nここで使っているandroidx.test.ext.junit.runners.AndroidJUnit4はクロスプラットフォーム対応のテストランナーで、実行環境に応じてテストランナーをいい感じに切り替えてくれます。jvm環境だったら勝手にRobolectricTestRunnerを使ってくれるスグレモノです。ちゃんと設定をすればinstrumentation testでも同じテストケースが使えちゃうはず。\n\nあとは適当にテストケースを書いて、androidTest/resources/your/package/robolectric.propertiesに諸々Robolectricの設定を書いていけば終わりです。\n\n./gradlew testDebugUnitTestとかやったらRobolectricを使ってcommonTestのテストケースが実行されます。\n\nこのコードは別モジュールに切り出してテスト用ライブラリとして運用するとよさそう。\n"
} ,
  
  {
    "title"    : "(KMP) Ignore some commonTests in a specific platform",
    "category" : "programming",
    "tags"     : " kotlin, kmp, english",
    "url"      : "/2019/07/25/ignoring-tests-in-particular-platform-kotlin-mpp-en/",
    "date"     : "July 25, 2019",
    "excerpt"  : "In Kotlin Multiplatform Project, it is common to write tests in commonTest, as you can run it on all platforms you configured. However, while you want to make test “common” as much as you can, there might be some test cases you can’t run on some s...",
  "content"  : "In Kotlin Multiplatform Project, it is common to write tests in commonTest, as you can run it on all platforms you configured. However, while you want to make test “common” as much as you can, there might be some test cases you can’t run on some specific platform. So, what to do?\n\nA very naive way is to move those “non-common” test cases to platform-specific test directories. It is okay if you only target two platforms, but what if you want 3 or more target platforms? I don’t think it’s a good practice to have the same test cases in several platform-specific test directories.\n\nSo here’s the thing. Kotlin Multiplatform Project has ‘expect/actual mechanism’, with which you can provide platform-specific declarations. With this, you can declare custom @Ignore annotation, which selectively ignores test cases on specific platforms.\n\nAssume you have 2 target platforms; Android and iOS. \nYou want to create an annotation which tells test runner to ignore the annotated cases/classes on iOS.\n\nFirst, you need to need the ‘expect’ declaration in common code.\n\n// commonMain\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nexpect annotation class IgnoreIos\n\n\nThen you need to write corresponding ‘actual’ declarations in each platform.\n\n// androidMain\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nactual annotation class IgnoreIos\n\n\n// iosMain\nactual typealias IgnoreIos = kotlin.test.Ignore\n\n\nThe key point here is in iOS ‘IgnoreIos’ is a typealias for kotlin.test.Ignore, but it’s just a useless annotation in Android. So it works as kotlin.test.Ignore in iOS but does nothing in Android.\n"
} ,
  
  {
    "title"    : "Using Kotlin Coroutines and Channel from Swift",
    "category" : "programming",
    "tags"     : " kotlin, kmp, swift, english",
    "url"      : "/2019/06/14/using-coroutines-from-swift-en/",
    "date"     : "June 14, 2019",
    "excerpt"  : "A while ago I wrote an article about Kotlin Coroutines’ Channel and Android Lifecycle.\n\nAnd some days later someone came to ask me “How can we use Coroutines/Channel from iOS code?”\n\nI had wrote about it briefly in Japanese, but I thought I should...",
  "content"  : "A while ago I wrote an article about Kotlin Coroutines’ Channel and Android Lifecycle.\n\nAnd some days later someone came to ask me “How can we use Coroutines/Channel from iOS code?”\n\nI had wrote about it briefly in Japanese, but I thought I should write it in English too, so here it is.\n\n\n\nAssume that I have a ViewModel like this.\n\nclass ViewModel(coroutineContext: CoroutineContext) : CoroutineScope {\n  val states: Channel&amp;lt;State&amp;gt;\n}\n\n\nState is a data class which holds all UI state, and ViewModel.states emits state update.\n\nConsuming this val states: Channel&amp;lt;State&amp;gt; is easy in Android. Just consume it(check out my previous post for the detail!)\n\nBut in iOS(Swift), it’s not that easy. You can’t just consume it.\n\nSo how?\n\nI think there are two ways:\n\n\n  Extend ViewModel and convert Channel to ordinary callback\n  Create “Adapter” which implement CoroutineScope\n\n\nChoice 1 is simple and easy to understand. Just like this.\n\nclass ViewModelForIos(coroutineContext: CoroutineContext) : ViewModel(coroutineContext) {\n    fun onStateChanged(stateChanged: (State) -&amp;gt; Unit) {\n        launch {\n            states.consumeEach { newState -&amp;gt;\n                stateChanged(newState)\n            }\n        }\n    }\n}\n\n\nBecause now you don’t need to deal with channel directly, you can use this ViewModel#observeState in Swift.\n\nChoice 2 is a bit complex, but still not that difficult.\n\nclass ViewModelAdapter(\n    val context: CoroutineContext \n): CoroutineScope {\n\n    private val job = SupervisorJob()\n    override val coroutineContext: CoroutineContext = job + uiContext\n\n    fun onSateChanged(viewModel: ViewModel, stateChanged: (state: ExchangeFromState) -&amp;gt; Unit) {\n        launch {\n            viewModel.states.consumeEach {\n                stateChanged(it)\n            }\n        }\n    }\n\n    fun dispose() {\n        job.cancel()\n    }\n}\n\n\nHere’s simple Adapter implementation. You can use this in Swift like below.\n\nlet viewModel = ViewModel(AppDispatcher)  // implement your own CoroutineContext\nlet adapter = ViewModelAdapter(AppDispatcher)\n\nadapter.onStateChanged(viewModel) { state in \n    updateView(state)\n    return KotlinUnit()\n}\n\n// call this when you don&#39;t need update anymore\nadapter.dispose()\n\n\nActually, these two snippets are doing samething. Converting channel to callback.\n\nChoice 2 might look like a lot of code, but you can use generics and in total you will save lots of lines of code conpared to choice 1. I personally call it “Adapter” pattern.\n\nHope this helps someone.\n\nHave a good day!\n"
} ,
  
  {
    "title"    : "Kotlin Multiplatform Projectで考えることいろいろ",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2019/04/16/thoughts-on-kotlin-mpp/",
    "date"     : "April 16, 2019",
    "excerpt"  : "グダグダ書くよ\n\n\n\nAndroid/iOSアプリをKotlin Multiplatform Projectで作るのにいい感じのアーキテクチャをいろいろ試行錯誤している。\n\nKotlin Multiplatform Projectでアプリを作るにあたって、単純にAndroidアプリを作るようにはいかないところがいくつかあるので、なかなかおもしろい。\nその”おもしろい”点というのは、たとえば下記のような点だ。\n\n\n  Kotlin Multiplatform ProjectではRxが使えない...",
  "content"  : "グダグダ書くよ\n\n\n\nAndroid/iOSアプリをKotlin Multiplatform Projectで作るのにいい感じのアーキテクチャをいろいろ試行錯誤している。\n\nKotlin Multiplatform Projectでアプリを作るにあたって、単純にAndroidアプリを作るようにはいかないところがいくつかあるので、なかなかおもしろい。\nその”おもしろい”点というのは、たとえば下記のような点だ。\n\n\n  Kotlin Multiplatform ProjectではRxが使えない\n  LiveDataもAndroid Specificなので使えない\n  非同期は基本Coroutinesでやる必要がある\n  CoroutinesはSwiftから使えない\n  Kotlin/Nativeではfreezingというランタイムの特性があり、変更可能なデータがスレッドをまたげない\n\n\n前提条件\n\n\n  筆者はMVI(Model - View - Intent)推し\n  Clean Architectureぽい階層型のアーキテクチャを採用している\n\n\n非同期\n\n最初の３つはまあ言いたいことは同じで、つまりリアクティブを実現するための仕組みがKotln Coroutinesしかない、ということだ。\nデータのストリームは基本的にKotlin CoroutinesのChannelを利用して表現することになりそう。\nFlowというコールドストリームの実装が1.3.30で来たけど、ViewModelから公開するStateのストリームにはChannelのほうが相性は良さそう。\nユースケースとかデータ層とか、場所によっては使えそう。このへんの使い分けはRxJavaのSubject/Observableと変わらない。\nChannelをFlowに変換していろいろなオペレータで加工する、というのは勿論ありうるしようやくRx的なことができるようになって嬉しい限り。\n\nLiveDataは最近更新が途絶えてるけどMultiplatform対応のライブラリがあるので、それを更新すればいけなくもない。\nとはいえKotlin Coroutinesがかなり充実してきているのでわざわざ使う必要もなさそう。\n\nAndroidではActivity/FragmentでChannelをLiveDataに変換してあげるとちょっと扱いやすくなるかもしれない。\n最近はAndroid JetpackのCoroutinesサポートが充実してきたのであんま必要ないかも。\n\nCoroutinesとSwift\n\nただCoroutinesはSwiftから直接呼べないので、コールバック形式に変換してあげる必要がある。\nあるいは、CoroutineScopeを実装したアダプタのようなものを作ってあげるのもいいかもしれない。\n\nclass ViewModel : CoroutineScope{\n  val states: Channel&amp;lt;State&amp;gt;\n}\n\n\nたとえば上記のようなViewModelがあったとして、このval states: Channel&amp;lt;State&amp;gt;はSwift側からは普通に触ることはできない。\nそこで下記のようなクラスを用意する。\n\nclass StateListener(val context: CoroutineContext) : CoroutineScope {\n  override val coroutineContext = context + SupervisorJob()\n\n  fun listenToStateUpdate(viewModel: ViewModel, callback: (state: State) -&amp;gt; Unit) {\n    launch {\n      viewModel.states.consumeEach { s -&amp;gt; \n        callback(s)\n      }\n    }\n  }\n}\n\n\nこれをSwiftで書かれたViewControllerで使えば、ViewModelのI/Fを変えないまま使い回すことができる。\nViewModelもStateListenerもCoroutineScopeを実装しているので、適当なタイミングでCoroutineScope#cancel()を呼んであげればライフサイクル的な問題もないはず。\nただこれは基本的にただのリスナですよー、って認識を徹底してここにiOS固有のロジックを書かないようにしたほうがいい。\n\nあと、Kotlin/Nativeではジェネリクスが使えない(使えるけど、Kotlin外から見るとAnyになってしまう)ので、このリスナクラスはViewModelごとに作ってあげる必要がある。\nObjective-Cヘッダのジェネリクスまわりは1.3.40から改善しそうなので期待。\n\nちなみにKotlin/Native上のCorutinesはメインスレッドしかサポートしてないので注意が必要。\ncommonコードでAndroidのDispatchers.IOとか意識したい場合は、下記の用にexpect - actualで書き分けたらよい。\n\n// common\nexpect val mainContext: CoroutineContext\nexpect val backgroundContext: CoroutineContext\n\n\n// android\nactual val mainContext: CoroutineContext = Dispatchers.Main\nactual val backgroundContext: CoroutineContext = Dispatchers.IO\n\n// ios. 自分で用意したメインスレッド用のDispatcherを使う\nactual val mainContext: CoroutineContext = ApplicationDispatcher\nactual val backgroundContext: CoroutineContext = ApplicationDispatcher\n\n\nfreezing\n\nKotlin/NativeではConcurrencyのモデルがJVMとはかなり異なっている。\nWorkerというAPIを使えば並列処理はできるけど、そもそもKotlin/NativeにしかないAPIなのでKMPでcommonコードから扱いたいときは各プラットフォーム用の抽象化が難しい。\n\nまた、Workerとメインスレッドでオブジェクトをやり取りする際はオブジェクトをfreezeしなければならない。freezeしたオブジェクトは変更不可能になり、varで宣言した値でも再アサインしようとするとInvalidMutabilityExceptionが投げられる(そう、ランタイムの特性なのだ！)。\nまた、freezeされたオブジェクトを参照してたり参照したりしてるオブジェクト(オブジェクトのサブグラフ)もfreezeされるのでよくわからないことになる。\nAtomicReference系の一部クラスを使うこともできるけど非常に限られたAPIで、無理をして実装するよりは新しいパラダイムになれたほうがよさそう。\n\nちなみにfreezeされたコールバックのラムダ式とかからCoroutinesを使おうとすると、マルチスレッド対応してないので前述のInvalidMutabilityExceptionを投げて死ぬ。\n\nコールバックをサブグラフに注意しつつThreadLocalで保持して、freezeされたラムダ内からメインスレッドに戻した後に呼ぶ、とか回りくどいことをやれば一応回避はできる。できるけどメインスレッドには戻ってしまう。\n\n詳しくは文末の参考資料に挙げた記事を読んでみてほしい。\ntouchlab/DroidconKotlinが実装としては参考になる。\n\nちなみにKotlin Multiplatform対応のSQLIte3ラッパーsquare/sqldelightのクエリリスナはfreezeされるので、この辺の考慮が必要。\n\nまとめ\n\n\n  リアクティブプログラミングはKotlin CoroutinesのChannel/Flowを使って実現\n  Swiftから使うときはコールバック形式に変換するかアダプタを作ってあげる\n  freezing厄介\n\n\n実際に採用したアーキテクチャについてはまた後ほど詳しく書くかも。\n\n参考\n\n\n  kotlin-native/CONCURRENCY.md at master · JetBrains/kotlin-native\n  Kotlin/Native (Stranger) Threads – Kevin Galligan – Medium\n  Kotlin Native Stranger Threads Ep 2 – Kevin Galligan – Medium\n  Kpgalligan/20190315/generics by kpgalligan · Pull Request #2850 · JetBrains/kotlin-native\n  Support multi-threaded coroutines on Kotlin/Native · Issue #462 · Kotlin/kotlinx.coroutines\n  touchlab/DroidconKotlin\n\n"
} ,
  
  {
    "title"    : "Kotlin Coroutines&#39; Channel and lifecycle of Android&#39;s components",
    "category" : "programming",
    "tags"     : " kotlin, android, english",
    "url"      : "/2019/04/08/kotlin-channel-and-android-lifecycle-en/",
    "date"     : "April 8, 2019",
    "excerpt"  : "How should we handle Kotlin Coroutines’ channel in Android’s components, especially in Activity/Fragment?\n\nThis is the English translation of the previous post.\n\nclass FooViewModel {\n    private var _state: State\n    val state: State\n        get()...",
  "content"  : "How should we handle Kotlin Coroutines’ channel in Android’s components, especially in Activity/Fragment?\n\nThis is the English translation of the previous post.\n\nclass FooViewModel {\n    private var _state: State\n    val state: State\n        get() = _state\n\n    private val _states = BroadcastChannel&amp;lt;State&amp;gt;(1)\n    val states: ReceiveChannel&amp;lt;State&amp;gt;\n        get() = _states.openSubscription().also { _states.offer(state) }\n\n    // reducer and other stuff here\n}\n\n\nSay we havve a ViewModel like above.\nIt’s based on MVI-like architecture. FooViewModel.states will notify us if there’s any state update.\n\nThis FooViewModel is in a Kotlin Multiplatform Project Module is targeting Android and iOS, so we can’t use LiveData.\nOf cource we can choose to create some kind of Observable by ourselves, but because we have Kotlin Coroutines, I’d like to use Channel.\n\nThe problem is, how we should handle channel inside Activity/Fragment, based on its lifecycle. Channel cannot be paused/resumed, so we need to came up with something.\n\nTwo ideas poped up into my head: LifecycleObserver and LiveData.\n\nclass ChannelLifecycleObserver(\n    private val owner: LifecycleOwner\n) : LifecycleObserver, CoroutineScope by MainScope() {\n\n    private val channels = mutableMapOf&amp;lt;ChannelHandler&amp;lt;*&amp;gt;, Job?&amp;gt;()\n\n    private val shouldBeActive\n        get() = owner.lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)\n\n    private var isActive: Boolean = false\n\n    fun &amp;lt;T&amp;gt; add(handle: ChannelHandler&amp;lt;T&amp;gt;) {\n        val job = if (shouldBeActive) {\n            handle.start(this)\n        } else null\n\n        channels[handle] = job\n    }\n\n    @Suppress(&quot;unused&quot;)\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY)\n    fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        if (owner.lifecycle.currentState == Lifecycle.State.DESTROYED) {\n            cancel()\n            return\n        }\n\n        val newActive = shouldBeActive\n        // skip subsequent process if the active state is not changed\n        // ex: STARTED -&amp;gt; RESUMED\n        if (isActive == newActive) {\n            return\n        }\n        isActive = newActive\n\n        if (isActive) {\n            println(&quot;should be active, register channels&quot;)\n\n            channels.entries.forEach { (handle, job) -&amp;gt;\n                if (job?.isActive == true) {\n                    job.cancel()\n                }\n                channels[handle] = handle.start(this)\n            }\n        } else {\n            println(&quot;should be inactive, deregister channels&quot;)\n            channels.entries.forEach { (handle, job) -&amp;gt;\n                job?.cancel()\n                channels[handle] = null\n            }\n        }\n    }\n\n    data class ChannelHandler&amp;lt;T&amp;gt;(val channelFactory: () -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;, val action: (T) -&amp;gt; Unit) {\n        fun start(coroutineScope: CoroutineScope): Job {\n            return coroutineScope.launch {\n                channelFactory().consumeEach { value -&amp;gt;\n                    action(value)\n                }\n            }\n        }\n    }\n}\n\n/**\n * Start/Cancel subscribing [ReceiveChannel] depending on a provided [lifecycleObserver].\n */\nfun &amp;lt;E&amp;gt; (() -&amp;gt; ReceiveChannel&amp;lt;E&amp;gt;).consumeEach(lifecycleObserver: ChannelLifecycleObserver, action: (E) -&amp;gt; Unit) {\n    lifecycleObserver.add(\n        ChannelLifecycleObserver.ChannelHandler(\n            channelFactory = this,\n            action = action\n        )\n    )\n}\n\n\nImplementation is fairly simple. Inspired  by LiveData, just start subscribing to a channel the Activity/Fragment enters onStart/onResume, and canceled the cached Job when the Activity/Fragment enters onPause/onStop.\nActual usage is below.\n\nclass FooActivity: AppCompatActivity() {\n    val channelLifecycle by lazy { ChannelLifecycleObserver(this) }\n    val viewModel: FooViewModel by lazy { /* Obtain a ViewModel */ }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_foo)\n\n        // add to lifecycle\n        lifecyle.addObserver(channelLifecycle)\n\n        // use method reference!\n        viewModel::states.consumeEach(channelLifecycle) { state -&amp;gt;\n            Log.d(&quot;FooActivity&quot;, &quot;State Updated: $state&quot;)\n        }\n    }\n}\n\n\nIt’s implemented as an extension function for a method and for me it looks a bit weired, but it is necessary since ReceiveChannel is un-reusable after its cancellation and exposing BroadcastChannel is not acceptable. So we need to re-create ReceiveChannel each time.\nWe assume that the latest data is cached inside the ViewModel.\n\nImplementation using LiveData should be pretty much the same, but I didn’t dig into it so much as I don’t want to think about the cache by LiveData.\n\nclass ChannelLiveData&amp;lt;T&amp;gt;(\n    private val channelFactory: () -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;\n) : LiveData&amp;lt;T&amp;gt;(), CoroutineScope by MainScope() {\n\n    private var job: Job? = null\n\n    override fun onActive() {\n        super.onActive()\n\n        job = launch {\n            channelFactory().consumeEach { value -&amp;gt;\n                setValue(value)\n            }\n        }\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n\n        job?.cancel()\n    }\n}\n\nfun &amp;lt;T&amp;gt; (() -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;).toLiveData(): LiveData&amp;lt;T&amp;gt; = ChannelLiveData(this)\n\n\nPlease not that you should not call these in lifecycle events which will be called many times in its whole lifecycle, such as onStart or onResume. Each time you call fun &amp;lt;E&amp;gt; (() -&amp;gt; ReceiveChannel&amp;lt;E&amp;gt;).consumeEach(lifecycleObserver, action), it will cache that call regardless of the previous call, and you eventually duplicate subscription.\n"
} ,
  
  {
    "title"    : "Kotlin CoroutinesのChannelとAndroidのライフサイクル",
    "category" : "programming",
    "tags"     : " kotlin, android",
    "url"      : "/2019/04/04/kotlin-channel-and-android-lifecycle/",
    "date"     : "April 4, 2019",
    "excerpt"  : "Kotlin CoroutinesのChannelをAndroidでいい感じに使うにはどうしたらいいかなー、という話。\n\nclass FooViewModel {\n    private var _state: State\n    val state: State\n        get() = _state\n\n    private val _states = BroadcastChannel&amp;lt;State&amp;gt;(1)\n    val states: ReceiveChannel&amp;...",
  "content"  : "Kotlin CoroutinesのChannelをAndroidでいい感じに使うにはどうしたらいいかなー、という話。\n\nclass FooViewModel {\n    private var _state: State\n    val state: State\n        get() = _state\n\n    private val _states = BroadcastChannel&amp;lt;State&amp;gt;(1)\n    val states: ReceiveChannel&amp;lt;State&amp;gt;\n        get() = _states.openSubscription().also { _states.offer(state) }\n\n    // reducerとか他にいろいろある\n}\n\n\nちょーざっくりこんな感じのViewModelがあるとする。\nMVI的なアーキテクチャになっていて、 FooViewModel.states がStateの更新を通知してくれる。\nこのViewModelはKotlin Multiplatformなモジュールに存在し、Android/iOSで使い回すために LiveData を使うことはできない。\n適当なObservableを実装することもできるけど、まあせっかくなのでKotlin CoroutinesのChannelを使ってみようと思いこんな感じになっている。\n\n問題は、この FooViewModel.states をどうやってActivity/Fragmentのライフサイクルにあわせて使うか、ということだ。\nChannelは現状pause/resumeができないので、なんとかする必要がある。\n\nパッと思いついたのは LiveData を実装する方法と LifecycleObserver を実装する方法だ。\n\nclass ChannelLifecycleObserver(\n    private val owner: LifecycleOwner\n) : LifecycleObserver, CoroutineScope by MainScope() {\n\n    private val channels = mutableMapOf&amp;lt;ChannelHandler&amp;lt;*&amp;gt;, Job?&amp;gt;()\n\n    private val shouldBeActive\n        get() = owner.lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)\n\n    private var isActive: Boolean = false\n\n    fun &amp;lt;T&amp;gt; add(handle: ChannelHandler&amp;lt;T&amp;gt;) {\n        val job = if (shouldBeActive) {\n            handle.start(this)\n        } else null\n\n        channels[handle] = job\n    }\n\n    @Suppress(&quot;unused&quot;)\n    @OnLifecycleEvent(Lifecycle.Event.ON_ANY)\n    fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        if (owner.lifecycle.currentState == Lifecycle.State.DESTROYED) {\n            cancel()\n            return\n        }\n\n        val newActive = shouldBeActive\n        // skip subsequent process if the active state is not changed\n        // ex: STARTED -&amp;gt; RESUMED\n        if (isActive == newActive) {\n            return\n        }\n        isActive = newActive\n\n        if (isActive) {\n            println(&quot;should be active, register channels&quot;)\n\n            channels.entries.forEach { (handle, job) -&amp;gt;\n                if (job?.isActive == true) {\n                    job.cancel()\n                }\n                channels[handle] = handle.start(this)\n            }\n        } else {\n            println(&quot;should be inactive, deregister channels&quot;)\n            channels.entries.forEach { (handle, job) -&amp;gt;\n                job?.cancel()\n                channels[handle] = null\n            }\n        }\n    }\n\n    data class ChannelHandler&amp;lt;T&amp;gt;(val channelFactory: () -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;, val action: (T) -&amp;gt; Unit) {\n        fun start(coroutineScope: CoroutineScope): Job {\n            return coroutineScope.launch {\n                channelFactory().consumeEach { value -&amp;gt;\n                    action(value)\n                }\n            }\n        }\n    }\n}\n\n/**\n * Start/Cancel subscribing [ReceiveChannel] depending on a provided [lifecycleObserver].\n */\nfun &amp;lt;E&amp;gt; (() -&amp;gt; ReceiveChannel&amp;lt;E&amp;gt;).consumeEach(lifecycleObserver: ChannelLifecycleObserver, action: (E) -&amp;gt; Unit) {\n    lifecycleObserver.add(\n        ChannelLifecycleObserver.ChannelHandler(\n            channelFactory = this,\n            action = action\n        )\n    )\n}\n\n\n実装はシンプルで、LiveData の処理を参考にしつつViewを更新できる状態になったらChannelを購読開始、Viewに触れない状態になったらキャッシュしておいたJobをキャンセル、としている。\nActivity/Fragmentでこんな感じに使う。\n\nclass FooActivity: AppCompatActivity() {\n    val channelLifecycle by lazy { ChannelLifecycleObserver(this) }\n    val viewModel: FooViewModel by lazy { /* ViewModelを取得 */ }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_foo)\n\n        // add to lifecycle\n        lifecyle.addObserver(channelLifecycle)\n\n        // use method reference!\n        viewModel::states.consumeEach(channelLifecycle) { state -&amp;gt; \n            Log.d(&quot;FooActivity&quot;, &quot;State Updated: $state&quot;)\n        }\n    }\n}\n\n\nメソッド参照の拡張関数になっている点が若干気持ち悪いが、これは　ReceiveChannel がcancelされたあとに再利用できないからだ。\nかと言って BroadcastChannel  のまま公開するわけにもいかないので、まあ仕方ない。\nViewModel側で最新の値はキャッシュしている前提で、 ReceiveChannel を毎回作り直すことにした。\n\nLiveData のパターンもだいたい同じ感じでできるはずだけど、 LiveData 内でのキャッシュとか考え始めたらめんどくさくなって深く考えてない。\n\nclass ChannelLiveData&amp;lt;T&amp;gt;(\n    private val channelFactory: () -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;\n) : LiveData&amp;lt;T&amp;gt;(), CoroutineScope by MainScope() {\n\n    private var job: Job? = null\n\n    override fun onActive() {\n        super.onActive()\n\n        job = launch {\n            channelFactory().consumeEach { value -&amp;gt;\n                setValue(value)\n            }\n        }\n    }\n\n    override fun onInactive() {\n        super.onInactive()\n\n        job?.cancel()\n    }\n}\n\nfun &amp;lt;T&amp;gt; (() -&amp;gt; ReceiveChannel&amp;lt;T&amp;gt;).toLiveData(): LiveData&amp;lt;T&amp;gt; = ChannelLiveData(this)\n\n\nどっちの実装もそうだけど、onResume とか画面のライフサイクル内で複数回呼ばれる場所に書いてしまうと実行されるたびにChannelの購読数が増え、処理が重複してしまうので注意が必要。\n\n単純に LiveData の onActive/onInactive でフラグをトグルして setValue 呼ぶかどうか判定する感じにしたらもしかしたら一番楽かもしれない。でもなんか購読しっぱなしが気持ち悪くてなかったことにした。\n"
} ,
  
  {
    "title"    : "MacでAndroidエミュレータのDNSサーバを変える",
    "category" : "programming",
    "tags"     : " android, mac",
    "url"      : "/2019/03/26/change-dns-server-android-emulator/",
    "date"     : "March 26, 2019",
    "excerpt"  : "Androidエミュレータのhostsを変えるのはちょっと手間なので、ローカルでDNSサーバをたててなんとかしてみる。\n\ndnsmasqというツールを使う。\n\ndnsmasqのインストール/設定\n\n$ brew install dnsmasq\n\n\n/etc/dnsmasq.hosts を作成。\n\ndnsmasqで使っていくhostsファイル。\nMac自身で使う必要はないので別に用意する。\n記法は普通のhostsファイルと同じ。\n\n/usr/local/etc/dnsmasq.conf に下...",
  "content"  : "Androidエミュレータのhostsを変えるのはちょっと手間なので、ローカルでDNSサーバをたててなんとかしてみる。\n\ndnsmasqというツールを使う。\n\ndnsmasqのインストール/設定\n\n$ brew install dnsmasq\n\n\n/etc/dnsmasq.hosts を作成。\n\ndnsmasqで使っていくhostsファイル。\nMac自身で使う必要はないので別に用意する。\n記法は普通のhostsファイルと同じ。\n\n/usr/local/etc/dnsmasq.conf に下記を追加。\n\n# dnsmasqだけで使うhostsファイル\naddn-hosts=/etc/dnsmasq.hosts\n# ログを出力したければ下記を追加。\n# パスは任意の場所で構わない。先にディレクトリを作っておくこと\nlog-queries\nlog-facility=/usr/local/var/log/dnsmasq/dnsmasq.log\n\n\ndnsmasqの起動\n\n$ sudo brew services start dnsmasq\n\n\nAndroidエミュレータの起動\n\nDNSサーバを設定するためコマンドラインから起動する\n\n$ emulator -avd AVD_NAME -dns-server 127.0.0.1\n\n\nエミュレータの名前は $ emulator -list-avds で取得できる。\n\nPANIC: Missing emulator engine program for &#39;x86&#39; CPU.\n\nが出る場合は違うコマンドを参照している。\nPATHに$ANDROID_HOME/emulatorを追加すること。その際、$ANDROID_HOME/toolsより先に記述する。\n"
} ,
  
  {
    "title"    : "ChromeのタブからMarkdown記法のリンクを生成する拡張機能、Tabs2Linksを作った",
    "category" : "programming",
    "tags"     : " chrome-extension, javascript, vue.js, tabs2links",
    "url"      : "/2019/03/20/chrome-extension-tabs2links/",
    "date"     : "March 20, 2019",
    "excerpt"  : "ブログ書く時に参考サイトのタイトルやらURLやらまとめるのがめんどくさいので作ったよ。\nインストールはこちら。\n\n\n\nアイコンから拡張機能を起動すると、こんな感じで現在のWindow内のタブが一覧で表示される。\nここでどのタブを出力に含めるか選択することができる。\n\n\n\n“Output”タブを選択すると、各タブのタイトルとURLがMarkdown記法でフォーマットされた文字列が表示される。\n\n出力したいサイトをまとめたウィンドウ作ってコピペ、って使い方を想定。\nもちろんチェックボックスぽち...",
  "content"  : "ブログ書く時に参考サイトのタイトルやらURLやらまとめるのがめんどくさいので作ったよ。\nインストールはこちら。\n\n\n\nアイコンから拡張機能を起動すると、こんな感じで現在のWindow内のタブが一覧で表示される。\nここでどのタブを出力に含めるか選択することができる。\n\n\n\n“Output”タブを選択すると、各タブのタイトルとURLがMarkdown記法でフォーマットされた文字列が表示される。\n\n出力したいサイトをまとめたウィンドウ作ってコピペ、って使い方を想定。\nもちろんチェックボックスぽちぽちしてもいい。\n\nあとでHTML形式の出力に対応したい気持ちもある。\nユーザが自由にカスタマイズできるようにするのも面白そうだけど、そこまでやるかは未定。\nあとアイコンが雑すぎるのでどうにかしたい。\n\n使った技術とか。\n\n今回はTypeScript x Vuex x BootstrapVueで開発している。\n\nAndroidDagashiのサイトをNuxt.jsで作ってて手に馴染んでいるっていうのもあるけど、やっぱりVue.jsは使いやすい。\nUIフレームワークはBootstrapVueで、これは特に強い理由があるわけでもないけど、Vuetifyとか使ってガッツリ「アプリケーション」な見た目にする必要もないかなあ、という感じ。\nコードはGitHubで公開しているので気になった方はぜひ確認してみてほしい。\n\nリンク\n\n\n  Tabs2Links - Chrome ウェブストア\n  yshrsmz/chrome-tabs2links\n  Android Dagashi\n  BootstrapVue\n\n\n"
} ,
  
  {
    "title"    : "Kotlin Multiplatform Project向けのGraphQLラッパー生成ライブラリ、kgqlを作った",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2019/02/27/kgql-graphql-kotlin-mpp/",
    "date"     : "February 27, 2019",
    "excerpt"  : "AndroidとKotlin Multiplatform Projectで使える、GraphQLのドキュメントからコードを生成するGradle Pluginを作った。\nkgqlという。\n\nこれ実際の成果物を見てもらうのが早いと思うので、こんな感じ。\n\n// User.gql\nquery User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    bio\n    avatarUrl\n    company\n    ...",
  "content"  : "AndroidとKotlin Multiplatform Projectで使える、GraphQLのドキュメントからコードを生成するGradle Pluginを作った。\nkgqlという。\n\nこれ実際の成果物を見てもらうのが早いと思うので、こんな感じ。\n\n// User.gql\nquery User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    bio\n    avatarUrl\n    company\n    createdAt\n  }\n}\n\nquery Viewer {\n  viewer {\n    login\n  }\n}\n\n\nたとえばすごいシンプルだけど、上記のGraphQLドキュメントからはこんなコードが生成される。\n内部的にはgraphql-javaを使ってパースしている。\n\npackage com.sample\n\nimport com.codingfeline.kgql.core.KgqlRequestBody\nimport kotlin.String\nimport kotlin.Unit\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Optional\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\ninternal object UserDocument {\n    private val document: String = &quot;&quot;&quot;\n            |query User(${&#39;$&#39;}login: String!) {\n            |  user(login: ${&#39;$&#39;}login) {\n            |    id\n            |    login\n            |    bio\n            |    avatarUrl\n            |    company\n            |    createdAt\n            |  }\n            |}\n            |\n            |query Viewer {\n            |  viewer {\n            |    login\n            |  }\n            |}\n            |&quot;&quot;&quot;.trimMargin()\n\n    object UserQuery {\n        /**\n         * Generate Json string of [Request]\n         */\n        fun requestBody(variables: Variables): String =\n                kotlinx.serialization.json.Json.stringify(serializer(), Request(variables =\n                variables))\n\n        fun serializer(): KSerializer&amp;lt;Request&amp;gt; = Request.serializer()\n\n        @Serializable\n        data class Variables(@SerialName(value = &quot;login&quot;) val login: String)\n\n        @Serializable\n        data class Request(\n            @SerialName(value = &quot;variables&quot;) override val variables: Variables?,\n            @Optional @SerialName(value = &quot;operationName&quot;) override val operationName: String? =\n                    &quot;User&quot;,\n            @SerialName(value = &quot;query&quot;) override val query: String = document\n        ) : KgqlRequestBody&amp;lt;Variables&amp;gt;\n    }\n\n    object ViewerQuery {\n        /**\n         * Generate Json string of [Request]\n         */\n        fun requestBody(): String = kotlinx.serialization.json.Json.stringify(serializer(),\n                Request())\n\n        fun serializer(): KSerializer&amp;lt;Request&amp;gt; = Request.serializer()\n\n        @Serializable\n        data class Request(\n            @SerialName(value = &quot;variables&quot;) @Optional override val variables: Unit? = null,\n            @Optional @SerialName(value = &quot;operationName&quot;) override val operationName: String? =\n                    &quot;Viewer&quot;,\n            @SerialName(value = &quot;query&quot;) override val query: String = document\n        ) : KgqlRequestBody&amp;lt;Unit&amp;gt;\n    }\n}\n\n\n\nKotlin Multiplatform Project対応のHttpClient、Ktorと一緒に利用するとこんな感じになる。\nちなみにこの例ではGitHubのAPIを使っている。\n\npackage com.sample\n\nimport com.codingfeline.kgql.core.KgqlResponse\nimport com.codingfeline.kgql.core.KgqlError\nimport com.sample.UserDocument\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport io.ktor.client.request.headers\nimport io.ktor.client.request.post\nimport io.ktor.http.Url\nimport kotlinx.serialization.json.JSON\nimport kotlinx.serialization.Serializable\n\nconst val TOKEN = &quot;YOUR_GITHUB_TOKEN&quot;\n\n@Serializable\ndata class ViewerWrapper(\n    val viewer: Viewer\n)\n\n@Serializable\ndata class Viewer(\n    val login: String\n)\n\n@Serializable\ndata class ViewerResponse(\n    override val data: ViewerWrapper?,\n    override val errors: List&amp;lt;KgqlError&amp;gt;?\n): KgqlResponse&amp;lt;ViewerWrapper&amp;gt;\n\n\nclass GitHubApi {\n\n    private val client = HttpClient {\n        install(JsonFeature)\n    }\n\n    suspend fun fetchLogin(): Viewer? {\n\n        val response = client.post&amp;lt;String&amp;gt;(url = Url(&quot;https://api.github.com/graphql&quot;)) {\n            // ここ！\n            body = UserDocument.ViewerQuery.requestBody()\n\n            headers {\n                append(&quot;Authorization&quot;, &quot;bearer $TOKEN&quot;)\n            }\n        }\n\n        val res = JSON.parse(ViewerResponse.serializer(), response)\n\n        return res.data?.viewer\n    }\n}\n\n\nGraphQL基本的にただのPOSTなので、戻り値は好きにパースしてくれというスタンス。\n\n使い方\n\nKotlinは1.3.20以降。\nGradleは5.1.1以降を推奨。Jetifier使わなければ4.10でも動くかも。\n一応Android ProjectでもKMPでも動くはず\n\n// ./build.gradle\nbuildScript {\n    repositories {\n        jcenter()\n        maven { url &#39;https://dl.bintray.com/yshrsmz/kgql&#39; }\n    }\n    dependencies {\n        classpath &#39;org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21&#39;\n        classpath &#39;com.codingfeline.kgql:gradle-plugin:0.2.1&#39;\n    }\n}\n\n\n// ./common/build.gradle\napply plugin: &#39;org.jetbrains.kotlin.multiplatform&#39;\napply plugin: &#39;com.codingfeline.kgql&#39;\n\nrepositories {\n     maven { url &quot;https://dl.bintray.com/yshrsmz/kgql&quot; }\n}\n\nkotlin {\n    // KMPのターゲット設定\n    jvm()\n    iosX64(&#39;ios&#39;)\n}\n\nkgql {\n    // 出力されるクラスのパッケージ名\n    packageName = &quot;com.sample&quot;\n    // 入力元のGraphQLドキュメントファイルを格納するディレクトリ\n    // デフォルトは`src/main/kgql`、Android Projectは`src/${variant}/kgql`\n    // Android Projectの場合はここを変更しても意味ない。\n    sourceSet = files(&quot;src/main/kgql&quot;)\n    typeMapper = [\n        // プリミティブでない型に対応するクラスのマッパ。\n        // Gradle Pluginは対象コードにアクセス出来ないので、FQNが必要。\n        &quot;UserProfile&quot;: &quot;com.sample.data.UserProfile&quot;\n    ]\n}\n\n\n上記設定をしたら、kgql.sourceSetに指定した場所にGraphQLのドキュメントを置く。拡張子は.gqlで。\n\ngenerateKgqlInterfaceというタスクができているはずなので、実行するとドキュメントファイルが生成される。\n各種ビルドタスクに依存関係を設定してあるので、適当にビルドしても生成されるはず。\n\n今後やりたいこと\n\n現状引数のデフォルト値は無視するような作りになっているので、そこはなんとかうまい方法を考えたい。\n\nあとはもう少しインタフェースを整備して、Ktor向けのサポートライブラリも用意してあげたい。\n\nApolloの実装とか参考にしたらいいのができそう。\n\nその他\n\nKotlin Multiplatform Project周りはまだ色々整備されてないので今がチャンス！\n\nリンク\n\n\n  https://github.com/yshrsmz/kgql\n\n"
} ,
  
  {
    "title"    : "Kotlin Multiplatform Project向けのBuildConfig、BuildKonfigを作った",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2019/02/27/buildkonfig-kotlin-mpp/",
    "date"     : "February 27, 2019",
    "excerpt"  : "BuildKonfigという、Kotlin Multiplatform Projectでもbuild.gradleからコードに値を埋め込めるGradle Pluginを作った。\n\nこれは名前からもわかるように、AndroidのBuildConfigから着想を得ている。\nAndroidではbuild.gradleからBuildConfigに任意のフィールドを追加することができる。これがすごく便利で、だいたいレポジトリに含みたくないAPIトークンとか、あるいはフレーバーごとに切り替えたい定数を...",
  "content"  : "BuildKonfigという、Kotlin Multiplatform Projectでもbuild.gradleからコードに値を埋め込めるGradle Pluginを作った。\n\nこれは名前からもわかるように、AndroidのBuildConfigから着想を得ている。\nAndroidではbuild.gradleからBuildConfigに任意のフィールドを追加することができる。これがすごく便利で、だいたいレポジトリに含みたくないAPIトークンとか、あるいはフレーバーごとに切り替えたい定数をコードに埋め込むために使われているんじゃないかと思う。\n\nただ、Kotlin Multiplatform Projectでは今の所、これに相当する機能は提供されていない。\n\nないものは作ってしまえということで、BuildKonfigが出来上がった。\n\n使い方\n\nKotlinは1.3.20以降をサポートしている。\nGradleは4.10とかでも動くはずだけど、5.1.1以降を推奨。\nあとMultiplatform Projectでないと動きません。\n\n// ./build.gradle\nbuildScript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21&#39;\n        classpath &#39;com.codingfeline.buildkonfig:buildkonfig-gradle-plugin:0.3.1&#39;\n    }\n}\n\n\n// ./common/build.gradle\napply plugin: &#39;org.jetbrains.kotlin.multiplatform&#39;\napply plugin: &#39;com.codingfeline.buildkonfig&#39;\n\nkotlin {\n    // KMPのターゲット設定\n    android()\n    iosX64(&#39;ios&#39;)\n}\n\nbuildkonfig {\n    // BuildKonfigのパッケージ\n    packageName = &#39;com.example.app&#39;\n    \n    // デフォルト設定\n    defaultConfigs {\n        // buildConfigField(type, name, value)\n        // 型はString, Int, Long, Float, Booleanをサポート\n        buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;value&#39;\n    }\n    \n    targetConfigs {\n        // ターゲット名と同じキーで設定\n        android {\n            buildConfigField &#39;STRING&#39;, &#39;name2&#39;, &#39;value2&#39;\n        }\n        \n        ios {\n            buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;valueForNative&#39;\n        }\n    }\n}\n\n\nKotlin Multiplatform ProjectにはAnnotation Processorが存在しないので、コード生成をしようと思うとGradle Pluginを書くことになる。\n\ngenerateBuildKonfigタスクを実行すると、下記の３つのファイルが生成される。commonと、各ターゲット用のコードだ。\nまた、各ビルドタスクに依存関係を設定してあるので、再ビルドすると生成されるはず。\n\n// commonMain\npackage com.example.app\n\nexpect object BuildKonfig {\n    val name: String\n}\n\n\n// androidMain\npackage com.example.app\n\nactual object BuildKonfig {\n    actual val name: String = &quot;value&quot;\n    val name2: String = &quot;value2&quot;\n}\n\n\n// iosMain\npackage com.example.app\n\nactual object BuildKonfig {\n    actual val name: String = &quot;valueForNative&quot;\n}\n\n\nご覧の通りexpect-actualで生成しているので、iOSとAndroidで値を変えるなんていうのもできる。\nまた、特定のターゲットだけ追加のフィールドがほしいというユースケースにも対応できる(もちろんcommonのソースセットからは使えないけど)。\n\nプロダクトフレーバー\nあとはちょっとトリッキーだけど、プロダクトフレーバー的な機能も提供している。\n\n実はKotlin Multiplatform Projectにはプロダクトフレーバーやビルドタイプといった機能は存在しない。\nAndroidターゲットはAndroid Gradle Plugin側の設定から推移的に解決されるフレーバーがあり、Kotlin/NativeターゲットにはRelease/Debugの区別はあるけど、全体的なDebug/Releaseやフレーバーはサポートされていない。\n\nなのでBuildKonfigで提供しているフレーバー機能は、プロパティを切り替えることで実現する。\n\nまずはプロジェクトルートのgradle.propertiesにデフォルトのフレーバーを設定。\n\nbuildkonfig.flavor=dev\n\n\n次にbuild.gradleでフレーバー毎のbuildkonfig設定を記述する。\n\nbuildkonfig {\n    packageName = &#39;com.example.app&#39;\n    \n    // default configは必須\n    defaultConfigs {\n        buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;value&#39;\n    }\n    // 第一引数がフレーバー\n    defaultConfigs(&quot;release&quot;) {\n        buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;releaseValue&#39;\n    }\n    \n    targetConfigs {\n        android {\n            buildConfigField &#39;STRING&#39;, &#39;name2&#39;, &#39;value2&#39;\n        }\n        \n        ios {\n            buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;valueIos&#39;\n        }\n    }\n    // 第一引数がフレーバー\n    targetConfigs(&quot;release&quot;) {\n        ios {\n            buildConfigField &#39;STRING&#39;, &#39;name&#39;, &#39;releaseValueIos&#39;\n        }\n    }\n}\n\n\nこの設定でビルドすると、buildkonfig.flavor=devでかつdevフレーバーな設定は存在しないので、defaultConfigsとtargetConfigsからBuildKonfigが生成される。もちろんちゃんとdevフレーバーを設定してもいい。\n\nbuildkonfig.flavor=releaseに書き換えると、今度はdefualtConfigs(&quot;release&quot;)とtargetConfigs(&quot;release&quot;)も考慮してBuildKonfigが生成される。\n\n値は下記の順で優先される。\n\ntargetConfigs(&quot;flavor&quot;) &amp;gt; targetConfigs &amp;gt; defaultConfigs(&quot;flavor&quot;) &amp;gt; defaultConfigs\n\n\nコマンドラインからフレーバーを書き換えるときは普通にプロパティを引数として与えてあげればいい。\n\n$ ./gradlew assembleRelease -Pbuildkonfig.flavor=release\n\n\nそのほか\n\nKotlin Multiplatform Project周りはまだ色々整備されてないので今がチャンス！\n\nリンク\n\n\n  https://github.com/yshrsmz/BuildKonfig\n\n"
} ,
  
  {
    "title"    : "Kotlin Multiplatform ProjectでKotlin 1.3.20に移行したら出力framework名が変わった件",
    "category" : "programming",
    "tags"     : " kotlin, kmp",
    "url"      : "/2019/01/28/migrate-kotlin1320/",
    "date"     : "January 28, 2019",
    "excerpt"  : "Kotlin 1.3.20がリリースされたので、早速KMP(Android/iOS)なプロジェクトでバージョンアップしてみた。\n\nほとんど考えることはないんだけど、一箇所、KMPで対応プラットフォームを指定する箇所だけちょっと躓いた。\n\n今まではターゲットは下記のように設定していた。\n\nkotlin {\n    targets {\n        fromPreset(presets.jvm, &#39;jvm&#39;)\n        fromPreset(presets.iosX64, &#39;ios&#39;)...",
  "content"  : "Kotlin 1.3.20がリリースされたので、早速KMP(Android/iOS)なプロジェクトでバージョンアップしてみた。\n\nほとんど考えることはないんだけど、一箇所、KMPで対応プラットフォームを指定する箇所だけちょっと躓いた。\n\n今まではターゲットは下記のように設定していた。\n\nkotlin {\n    targets {\n        fromPreset(presets.jvm, &#39;jvm&#39;)\n        fromPreset(presets.iosX64, &#39;ios&#39;) {\n          compilations.main.outputKinds(&#39;FRAMEWORK&#39;)\n        }\n    }\n}\n\n// iOSのビルド時に呼び出されるタスク\ntask copyFramework {\n    def buildType = project.findProperty(&quot;kotlin.build.type&quot;) ?: &quot;DEBUG&quot;\n    def target = project.findProperty(&quot;kotlin.target&quot;) ?: &quot;ios&quot;\n    dependsOn kotlin.targets.&quot;$target&quot;.compilations.main.linkTaskName(&quot;FRAMEWORK&quot;, buildType)\n\n    doLast {\n        def srcFile = kotlin.targets.&quot;$target&quot;.compilations.main.getBinary(&quot;FRAMEWORK&quot;, buildType)\n        def targetDir = getProperty(&quot;configuration.build.dir&quot;)\n        copy {\n            from srcFile.parent\n            into targetDir\n            include &#39;data.framework/**&#39;\n            include &#39;data.framework.dSYM&#39;\n        }\n    }\n}\n\n\ncopyFrameworkタスクのほうは参考にするドキュメントによって違うだろうけど、iOSアプリをビルドするときに呼ばれる、成果物のframeworkをコピーするものだ。\n\nで、このあたりの設定を書き換えずにビルドすると、出力されるframeworkの名前が変わってしまう。\n今までは${module名}.frameworkだったのが、main.frameworkになってしまう。\n\niOS側の参照をすべて書き換えるのでも対応できなくはないけど、根本的な解決策ではないしちょっと気持ち悪い。\n\nこれの原因は1.3.20から導入された新しいDSLだ。\nターゲットの設定方法を1.3.20からの新しいDSLに書き換えると下記のようになり、今まで通り${module名}.frameworkな成果物が得られる。\nちなみにcopyタスクの方を書き換え忘れると存在しないタスクを参照しようとしてビルドが失敗する。\n\nkotlin {\n  jvm()\n  iosX64(&#39;ios&#39;) {\n    binaries {\n      framework()\n    }\n  }\n}\n\ntask copyFramework {\n    def buildType = project.findProperty(&quot;kotlin.build.type&quot;) ?: &quot;DEBUG&quot;\n    def target = project.findProperty(&quot;kotlin.target&quot;) ?: &quot;ios&quot;\n    // 上でframeworkにnamePrefixを設定した場合はその値を第一引数に与える\n    def bin = kotlin.targets.&quot;$target&quot;.compilations.main.target.binaries.findFramework(&quot;&quot;, buildType)\n    dependsOn bin.linkTask\n\n    doLast {\n        def srcFile = kotlin.targets.&quot;$target&quot;.compilations.main.target.binaries.findFramework(&quot;&quot;, buildType).outputFile\n        def targetDir = getProperty(&quot;configuration.build.dir&quot;)\n        copy {\n            from srcFile.parent\n            into targetDir\n            include &#39;data.framework/**&#39;\n            include &#39;data.framework.dSYM&#39;\n        }\n    }\n}\n\n\nこのDSLの変更により、一つのターゲットに対して複数の成果物を設定することができるようになったらしい。\n\nkotlin {\n  iosX64 {\n    binaries {\n      framework(&#39;foo&#39;)\n      framework(&#39;bar&#39;) {\n        export(project(&quot;:dependency&quot;))\n      }\n    }\n  }\n}\n\n\n例えば上みたいな書き方をすると、foo.frameworkとbar.frameworkが出力される。\n片方だけ特別な設定を加える、ということも可能だ。\n\n"
} ,
  
  {
    "title"    : "2018年を振り返って",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2018/12/31/lookingback-2018/",
    "date"     : "December 31, 2018",
    "excerpt"  : "2018年を振り返るよ\n\n仕事\n\n2017年12月から新規プロジェクトでAndroidアプリを作っていたけれど、なんやかんや色々あってクローズ。\n今は新しいチームに異動して、新規アプリの立ち上げやってます。\n\n技術的には\n\n\n  旧プロジェクト\n    \n      Android(NDK, Kotlin)\n      iOS(Swift)\n      Flutter\n    \n  \n  新プロジェクト\n    \n      Android\n      Kotlin Multiplatfo...",
  "content"  : "2018年を振り返るよ\n\n仕事\n\n2017年12月から新規プロジェクトでAndroidアプリを作っていたけれど、なんやかんや色々あってクローズ。\n今は新しいチームに異動して、新規アプリの立ち上げやってます。\n\n技術的には\n\n\n  旧プロジェクト\n    \n      Android(NDK, Kotlin)\n      iOS(Swift)\n      Flutter\n    \n  \n  新プロジェクト\n    \n      Android\n      Kotlin Multiplatform Project\n      Flutter\n    \n  \n\n\nって感じ。\n\n旧プロジェクトでは暗号周りを色々がんばる必要があったので、そのへんの学習をガッツリできてよかった。暗号技術入門第３版　秘密の国のアリスには大変お世話になりました。\niOS/Androidのアプリを作らなければいけないけどアプリ開発チームが私だけ、ってことでFlutterを採用することに。ただ、Dartで使える唯一の暗号ライブラリ(PointyCastle)がFlutter対応してなかったのでPR送りつつOpenSSL使う方法も模索して、と結局Android NDK触ったりSwift書いたりということが多かった。\n情勢の変化もあってクローズすることになったのはとても残念だった。\n\n新プロジェクトでは、モック作成にFlutter使いつつ、実際のアプリ開発ではKotlin Multiplatform Projectでいけたらいいなー、という感じで検証している。今度のチームはiOS専任の人もいるので気は楽だ。データ層をiOS/Androidで共有できたらアツいけど、今のところGradleのバージョン違いでKotlin/Nativeの公式ライブラリ群とSQLDelightが一緒に使えないので、早いところ公式ライブラリもGradle 4.10以降に更新してほしい…\n\n個人\n\nSinceTimer\n\nSinceTimerは「最後にラーメン食べたのいつだっけ？」みたいな情報を管理するためのアプリ。\n競合はいくつかあるけれど、だいたいデザインが一昔前のものだったりするのでまずはそこで価値をだせそう。\n紹介記事を書いたときから更にダークモードとアプリ内課金も実装した。今後ともやっていこう。\n紹介記事はこちら。\n\nunorm_dart\n\nunorm_dartは、今年の前半やってた方の仕事で必要に迫られて作ったライブラリ。\nDartはUnicodeの正規化をサポートしてないので、JavaScriptの実装を参考にDartに移植した。\nDartとJavaScript結構近いので、いろいろ移植できそうだなー、という感触。\n\nAndroidDagashi\n\n発端はこれ。\n\nAndroid Snackみたいな週のニュース・ブログ要約ポッドキャストの日本語版需要？&amp;mdash; せーい.aab (@_yshrsmz) 2018年1月29日\n\n黒川さんも似たようなことをやろうとしていたみたいで、一緒にやることに。最初はDropBox Paperでざっくりまとめてたけれど、まあSEOとかいろいろアレなのでGitHub Pagesを使ってサイトを作った。\n\n技術的には\n\n\n  GitHubのissueとmilestoneをCMS的に\n  フロントはNuxt.js x TypeScriptで静的サイト\n  デプロイはCircleCIで定期的に\n\n\nという感じ。最近Webフロントまわりはあまり触れてなかったので、ちょうどいい実験場になっている。\n\n英語記事の紹介がメインになっているけれど、せっかく日本語でサイト作ってるので来年はもっと日本語の記事も紹介していきたい。\n\n自作キーボード\n\n今年はHelix二台作ったりErgo42作ったりしたけど、８月からこっちは仕事場でKeyMouse、家ではErgo42に落ち着いている。\n\nKeyMouseっていうやばいキーボードです。思ったよりでかい pic.twitter.com/uSmos4j7tM&amp;mdash; せーい.aab (@_yshrsmz) 2018年8月10日\n\nやっぱり手を動かさずにトラックボール触れるのは最高で、もうこれがエンドゲームでいいんじゃないかなーってレベル。\n\n特にKeyMouseは一番最初にKickstarterで支援してうまく行かず払い戻しになったプロジェクトなので、こうして数年越しで手にすることができてなんとも言えない感慨がある。\n\nとはいえ積みキットがいくつもあるのでなんとか作っていきたい。\n\nアサシンクリード　オデッセイ\n\n今年の10月以降の余暇は全てこれに吸われていると言っても過言ではない。\n\n大学時代はゼミで西洋古典文学やっていたので、あの世界を体験できるのは感激だった。\nまあやってることは敵味方関係なく殺しまくる蛮族なんですけどね…\n\n一通り終わったら今度はオリジンもやってみようかな。\n\n来年の目標\n\n\n  Flutterでアプリリリース\n    \n      構想はできてるので、個人的な需要がなくならないうちになんとか出したい\n    \n  \n  Kotlin Multiplatform Project周りでなにか発表\n    \n      近いうちになにか形にできそう\n    \n  \n\n\nというわけで来年もどうぞよろしく\n"
} ,
  
  {
    "title"    : "届かないkraftwerk",
    "category" : "diary",
    "tags"     : " crowdfunding",
    "url"      : "/2018/12/14/kraftwerk-undelivered/",
    "date"     : "December 14, 2018",
    "excerpt"  : "届かないクラウドファンディング Advent Calendar 2018 14日目は、kraftwerkです。\n\nどんなの？\n\n\n\n“highly innovative portable power plant”、いわゆる燃料電池です。\n\n\b\b従来のモバイルバッテリーと違い、コンセントに繋いで\b充電するのではなく、必要なのはライター用のガスだけ。出先で充電が切れてもガスを買えばすぐに復活する、という触れ込みでした。\n\n私の支援したプランは99米ドル、\bお届け予定時期は2016年2月でした(...",
  "content"  : "届かないクラウドファンディング Advent Calendar 2018 14日目は、kraftwerkです。\n\nどんなの？\n\n\n\n“highly innovative portable power plant”、いわゆる燃料電池です。\n\n\b\b従来のモバイルバッテリーと違い、コンセントに繋いで\b充電するのではなく、必要なのはライター用のガスだけ。出先で充電が切れてもガスを買えばすぐに復活する、という触れ込みでした。\n\n私の支援したプランは99米ドル、\bお届け予定時期は2016年2月でした(予想市販価格は149\b米ドル\b）。\n\n2015年1月にKickstarterでローンチしました。その後2015年\b3月に11,649名の支援を受けてプロジェクトは成立します。\nが、今現在Kickstarterのページにいっても「知的財産権の問題の対象であり、現在利用できません\b」と表示されるばかりで内容を確認することができません。\n\nそのため今となっては細かいスペックやアップデートを追うことはできませんが、メールの履歴をさかのぼりつつざっくり何があったのか追ってみましょう。\n\n2015/03/21\n\n成立後３回目のアップデートです。\nチームを増強していること、開発を進めていること…そしてアメリカで訴訟を起こされていることが報告されています。原告はKRAFTWERKというバンドのリーダーです。名前がかぶっていることが原因でしょうが、このときはプロジェクトチームも特に影響はないだろうと楽観的でした。\n\n2015/04/09\n\n引き続き訴訟に関する更新です。\n\bアメリカに引き続き、KRAFTWERK(バンド)はドイツでも訴訟を起こしたようです。\n\nkraftwerkはドイツ語で「発電所」という意味で一般的な\b単語であり\b利用を制限されるはずがないこと、またKRAFTWERKのリーダーはこの単語に対して商標権を持っていないはずだ、ということが伝えられました。原告はこのとき和解等の議論に応じる気配はなかったようです。\n\nこの件についての公聴会が4/16に開かれるのでまた更新するね、と\bこの更新は終わっています。\n\n2015/04/24\n\nドイツの裁判所がkraftwerk(このプロダクト)はkraftwerkという単語を使っていい、と判断したことが\b報告されます。\n\nなおこの問題\bのにかなりのコストが掛かったものの、遅延は発生していないそうです。\n\n2015/04/27\n\nガス工場の\bオペレーションをドレスデンで開始したよ、という写真付きのアップデート。\n\nこの後数ヶ月、写真付きの順調そうなアップデートが続きます。\n\n2015/07/15\n\nInnovatin Prize of Saxony 2015にノミネート\n\n2015/10/16\n\nキャンペーン終了後もたくさんの注文\b\bが来ておりすでに捌けないため値段の\b\b調整をおこなったこと、デザインの調整を行ったこと、そしてスケジュールが12週間遅れることが伝えられます。\n\n2015/11/26\n\nアメリカでのKRAFTWERK(バンド)との訴訟でやく200万米ドルがかかるため、資金を集めているそうです。\n\n2015/12/05\n\n製造に不可欠な射出成形機の納品が遅れているため、\b更に3ヶ月、合計で6ヶ月出荷が遅れることが伝えられます。\n\nこの語数ヶ月、１か月に一度くらいの頻度で\b製品の部品を紹介する更新が続きます。\n\n2016/03/21\n\nさて、少し雲行きが\b怪しくなってきます。\n概要はこんな感じ。\n\n\n  多くのドイツ人支援者がクラウドファンディングに支援したのではなくAmazonで注文したと\b未だに思い込んでいることに憤慨している\b\n  ドイツ\b人がリスクを取りたがらないことは知ってるしスタートアップ文化がメジャーでないことも知っているがだからこそこのマインドセットを変えたい人たちやスタートアップ文化を応援したい人たちからの支援が集まると考えた\n  遅れについては申し訳ないと思ってるし何度も謝罪しているが、だからといって世界を変えたいと思っているプロダクトの運営をより難しいものにしていいわけではない。\n  一部の支援者が何度も非難や進捗を尋ねる電話や\bメールを送ったり、あるいはネット上でヘイト\bポストを続けており、その対応のせいでリソースが圧迫されている\n  \bこの中傷行為の\b対応のために弁護士に相談することになった\n  中傷行為の一部は競合企業によるものだと判明している\n  支援者の一部は工場を見学させるよう求めているが、産業スパイの可能性もあるし\b許可できない\n  我々は全く新しい技術を開発しており、すべてを開示することはできないことを理解してほしい\n\n\nアンチに対してかなりフラストレーションが溜まってきているのがわかりますね\n\n2016/03/26\n\nどのようなデバイスを充電するのか、等利用方法や利用環境に関するアンケートのお願いでした。\nなお、このアップデートから\b英語の他にドイツ語の文章も併記されるようになりました\n\n2016/04/18\n\n製造プロセスに\b入ろうとしているものの、進捗が予定よりも遅れているようです。\n\nまた、Kickstarterの\b\bアンケートツールで配送先情報を集め始めたようです。\n\n2016/04/20\n\n会社をシリコンバレーに移すことが発表されました。\nヨーロッパ\bでの資金調達が難しかったことが原因の一つだったようです。\n\nなおこのアップデートからまたドイツ\b版\bの文章は消えています\b\n\n2016/06/01\n\nシリコンバレーに移動してから進捗はあるけれど、射出成形機の遅延や訴訟、資金調達の問題からさらに6ヶ月の\b遅延が発生するようです。今のところ合計１年の\b遅れです。\n\n2016/08/05\n\n\n  前回の更新後、無数のメールや電話が\b毎日\b来ており対応に追われている\n  \b中には実際にオフィスに来る人もおり、業務を回していくために\bシリコンバレー内で引っ越しすることになった\n  弁護士経由でメールを送ってくる人もいたけど、こういった行為のすべてがさらなる遅延を招くことを理解してほしい\n  マネジメントチームを拡張している\n  PRコストを下げるために、一部支援者からのすすめもあったしKickstarter上のよくあるコメントに返信するのをやめる\n    \n      ちなみにヘイト系の投稿はほぼ100%ドイツから\n      \b最高のPRチームがいてもドイツの文化を変えるのは無理\n    \n  \n  \bアメリカでのバンドとの訴訟は現在も継続中だから詳しいことは\b共有できないし、この件に関するコメントへの返信も減らしていく\n  \b憤慨している支援者がいるのはわかるけど、我々は全く新しい技術を開発しているし数々のNDAも結んでいる。共有できる情報ばかりでもないので理解してほしい。\n  すでにいろいろ共有してるから過去の更新読んで\n  もう少し我慢してほしい。ヘイト投稿はやめてくれ。もちろん、12,000人いる支援者のうちの一部だってことはわかっているけど\n\n\nエモい！\nめちゃくちゃイライラしているのがわかる\bアップデートでした。\n\nこの後、kraftwerkから\bの更新は途絶えます。\n\n2017/05/16\n\n知的財産権に関わる係争中であるため、法律によって解決するまでプロジェクトページを削除する、というメールがKickstarterの運営から届きます。\n\nまとめ\n\n訴訟って大変だし、コミュニティへの接し方を間違うと大変なんだなあ、という感じでした。\n\n実はこのプロジェクト、まだ会社の公式サイトは生きているし、公式Twitterもたまに更新があります。\n\nTwitterの最終更新日は2018/12/06。\n\n\b\bシェアされている記事を見ると、元のeZelleronは2016年に破産しており、今回は再度会社を立ち上げたようです。今度の会社はfuel cell coreというガスを電気に変えるコンポーネントの開発にフォーカスしており、ユーザ向けのプロダクトは別会社が製造することになるそうです。\n\nもしかしたらまだお話は続くのかもしれません。\n"
} ,
  
  {
    "title"    : "届かないAGENTスマートウォッチ",
    "category" : "diary",
    "tags"     : " crowdfunding",
    "url"      : "/2018/12/11/agent-undelivered/",
    "date"     : "December 11, 2018",
    "excerpt"  : "届かないクラウドファンディング Advent Calendar 2018 11日目は、AGENTです。\n\nどんなの？\n\nこんなんです\n\n\n\n“The World’s Smartest Watch”、「世界で最も賢い時計」という触れ込みのスマートウォッチです。\nSecret LabsとHouse of Horologyの共同プロジェクトでした。\n\nローンチ日は2014年5月21日。初代Pebbleのおよそ一年後ですね。\n\n私2012-2013の間にスマートウォッチ系のクラウドファンディングに...",
  "content"  : "届かないクラウドファンディング Advent Calendar 2018 11日目は、AGENTです。\n\nどんなの？\n\nこんなんです\n\n\n\n“The World’s Smartest Watch”、「世界で最も賢い時計」という触れ込みのスマートウォッチです。\nSecret LabsとHouse of Horologyの共同プロジェクトでした。\n\nローンチ日は2014年5月21日。初代Pebbleのおよそ一年後ですね。\n\n私2012-2013の間にスマートウォッチ系のクラウドファンディングに３つ参加していて、正直何を考えていたのか今思い返すとさっぱりわかりません。\nまあ最近は自作キーボード沼にハマって１年に10台近く買ったりしているので、あまり変わらないのかもしれません。\n\nともあれ話をAGENTに戻します。\n\nAGENTの機能とか売りを箇条書するとこんな感じです。\n\n\n  アプリ開発可能\n    \n      .NET Micro Framework(!)\n    \n  \n  無線充電(Qi)\n  三軸の加速度センサ\n  光センサ\n  7日間のバッテリ寿命(時間表示のみなら30日)\n  防水\n  アメリカで製造\n\n\nこうやって見返してみると、多分無線充電とかバッテリ寿命に惹かれたんだろうなー、と思います。Pebbleが確か7日間なので素晴らしいですね。\nPebbleと同様にアプリストアを用意する予定もあったようです。\n\n私が支援したプランは無線充電器が付いて199米ドルで、出荷予定は2013年12月でした。\n\nAGENTは2013年6月21日に目標金額の10倍である約100万米ドルを集めてプロジェクトが成立しました。\n\nプロジェクト成立後の動き\n\n2013年6月 - 12月\n\nおよそ一ヶ月に一度の頻度でアップデートが届きます。\n\n全体的に写真のついたアップデートは少なく、ソフトウェアもハードウェアも順調であることがアピールされます。\n\n正確な日付はわからないのですが、プロジェクト成立の前後あたりでアプリSDKのPreview版がリリースされていたようで、エミュレータを利用したハッカソンも数度行われていたようです。\n\n11月あたりからバックライト周りの仕様がフィックスせず、それにつられてケースの最終仕様も決まらないことが伝えられ始めます。\n他の部品は届いていて、あとはバックライトとケースがフィックスしたらQiやFCCの認証作業に入れるよ、というあたりで当初の出荷予定時期である12月が終わります。\n\nちょっと完全に見逃してる説も捨てきれないんですが、ここまで出荷が遅れるよごめんね！とかそういう情報が全く共有されていない気がします。\n\n2014年1月 - 8月\n\n引き続き一ヶ月に一度くらいのアップデートが続きます。\n\n1月に今後の予定が伝えられ、うまく行けばあと二ヶ月半で製造に入れると報告がありました。\n\nバックライトは２月に一度フィックスしたものの、結局当初の供給元が品質の高い部品を作れないことが判明し、別の会社のものに変更されました。\nこの変更でケースのデザイン変更も発生し出荷予定日はさらに遅れ、3月時点では2014年の8月になっています。\n\nまた3月のアップデートではBluetooth 4.1に対応することも発表されました。\n\nちなみに2014年3月といえばAndroid Wearが発表された時期です。バッカー達の間にも「こんな時代遅れのスマートウォッチもういらないんじゃね…？」という空気が広がり始めています。\n\n7月にはケースのサンプル画像を含むアップデートがありましたが、サンプルにミスが発見され更に数週間の遅れが発生。\n\n2014年9月 - 12月\n\n次から次へと新しい問題が発生し、出荷予定日はどんどん延期されていきます。\nストラップの供給元が変わったり、引き続きケースデザインの調整があったり。\n\n2013年中に届いた部品の一部に関しては湿度バリアバックの期限が切れ、専用の保管機材を設置することになったとか。\n\n2015年2月\n\nAGENT OS 2.0なるものが発表されます。\n\n昨今のIoTムーブメントをベースに、ハードウェアもソフトウェアも設計し直したそうです。 \n今までの遅れの原因の一つに共同制作者であるHouse of Horologyとのトラブルがあったとかで、今回はSecret Labsだけで作ることにしたようです。 \nこの新しいハードウェアを開発する一方、既存のものも開発を続け出荷する予定だそうです。\n\nバッカーに与えられた選択肢は下記の３つです\n\n\n  既存の古い製品を受け取る\n  代わりに新しいAGENT OS 2.0な製品を受け取る(でもいつまでかかるかわからないよ！)\n  代わりに製造元(Secret Labs)の製品を購入するために使えるギフトを受け取る\n\n\nツッコミどころ満載ですが、もう疲れてしまったのでそのまま待つことにしました。\n他のバッカーたちも激怒して返金の声がたくさん上がっていました。\n\n2015年3月 - 10月\n\nソフトウェアやハードウェアの細かいアップデートが続きます。\n\n3月、4月、6月、8月、10月、アップデートの感覚は二ヶ月置きくらいです。\n\n2016年1月 - 6月\n\n1月に旧製品の画面用ガラスをどれにするかでトラブルがあったことを告げるアップデートがありました。\nHouse of Horology担当のケースデザイン周りの業務が滞っており、Secret Labs側で手探りでやっているようです。\nこのアップデートはわりと壮絶で、House of Horology側とのやり取りの音声ファイルが添付してあり、一部のバッカーを巻き込んでの争いと自分をフォローする(どちらがホントに悪いのかは知りませんが)長文がありました。切羽詰まってくるとチームメンバの人間性とか垣間見えてきます。これもある意味クラウドファンディングの醍醐味です。\nこのあとしばらく更新が途絶えます。\n\nその後6月、SDKがEcmaScript6(JavaScript)対応したよ、というアップデートがありました。\nそのアップデートでは他にもSecret Labsがかなりの負債を負っていることも明らかにされました。\n\nその後二年半ほど経ちますが、今のところアップデートはありません。\n\nまとめ\n\nさっくり書けるかなー、と思ったら思った以上に長い道のりでげんなりしてしまいました。\n\n全体的に見積もりが甘かったんだと思いますが、一番大きいのは複数企業の共同プロジェクトだったことかな、と思います。\nコミュニケーションって難しいですね。\n"
} ,
  
  {
    "title"    : "2018年買ってよかったもの５つ",
    "category" : "diary",
    "tags"     : " diary, bestbuy",
    "url"      : "/2018/12/05/bestbuy2018/",
    "date"     : "December 5, 2018",
    "excerpt"  : "買ってよかったもの振り返るよ。だいたい時系列順。\n\niPad Pro 10.5インチ\n\n\n\nApple 10.5インチ iPad Pro Wi-Fiモデル 64GB シルバー MQDW2J/A\n\n2018年頭のApple StoreのセールでApple Pencilと一緒に購入。\n\n\bApple Pencilの書き味がよく、メモは基本的にこれで取るようになった。\n今年リリースした個人アプリの設計とか、仕事のメモとかも基本これ。\b\n\nペーパーライクフィルムを使うと書き心地が劇的に改善するので...",
  "content"  : "買ってよかったもの振り返るよ。だいたい時系列順。\n\niPad Pro 10.5インチ\n\n\n\nApple 10.5インチ iPad Pro Wi-Fiモデル 64GB シルバー MQDW2J/A\n\n2018年頭のApple StoreのセールでApple Pencilと一緒に購入。\n\n\bApple Pencilの書き味がよく、メモは基本的にこれで取るようになった。\n今年リリースした個人アプリの設計とか、仕事のメモとかも基本これ。\b\n\nペーパーライクフィルムを使うと書き心地が劇的に改善するのでオススメです。\nケースはいろいろ検討した結果、スマートカバーとこちらのApple Pencilを格納できるやつに落ち着いた。\n\nルンバ\n\n\n\n\b【Amazon.co.jp限定】ルンバ961 アイロボット ロボット掃除機 センサー付 自動充電\n\n2013年に買ったルンバくんがさすがにガタが来てて、ちょうど新しいのがAmazonで安くなっていたので買い替え。\n\nこのモデルはスマートフォンと連携できる。\bアプリから\b掃除開始できたり掃除したエリアを確認することができ、なかなか楽しい。\nあとゴミが詰まったり変なところにハマったりすると「ルンバが助けを求めています」とか通知が来るのもなんか意思を感じてかわいかったり。\n\nアプリではルンバに名前をつけて管理できるので、先代に敬意を払って「Roomba II」と名付けた。\nでもこいつ\bどうやっても掃除の途中で停止してしまうので一週間で交換することになり、\b\b現在我が家では「Roomba III」が\b頑張ってくれている。\n\n錠剤クラッシャー\n\n\n\n松吉医科器械 錠剤クラッシャー MY-8110\n\nホント大したことないものなんだけど、\b\bペットに薬飲ませるのに重宝する。\n錠剤を簡単に粉末にできるので、おやつとかに練り込むことができて薬\b飲ませるのが格段に楽になった。\n\nKeyMouse\n\nKeyMouseっていうやばいキーボードです。思ったよりでかい pic.twitter.com/uSmos4j7tM&amp;mdash; せーい.aab (@_yshrsmz) 2018年8月10日\n\n\n左右分離型、かつトラックボール付きのキーボード。\n\n\b数年前にKickstarterで達成後に失敗したプロジェクトだけど、久しぶりに公式サイトに行ったら完成品売り出してて、しかも\bトラックボール搭載型に進化していたので即購入。\n\nKickstarterが2015年1月くらいだったので、こうして完成品を手にするととても感慨深い。\n\nもう少し小さくならないかなー、と思いつつも使い勝手はよく、自作キーボード沼から半ば以上足を洗いかけている程度には気に入っている。\n\nPixel 3 XL\n\n\n\nついに日本にやってきたPixel。\n\n\bOSのアップデートが保証されているとかDeveloper Previewが使えるとか、あとは素のAndroidでFelicaが使えるとか。\n\nいろいろいいところはあるけれど、それよりもなによりも、カメラが最高。黒猫がほんとにきれいに撮れる。\n\n黒猫飼ってる人はみんなPixel3買ったらいいと思うの…ホントにちゃんとかわいく撮れて最高… pic.twitter.com/6kjYuC8IEG&amp;mdash; せーい.aab (@_yshrsmz) 2018年11月6日\n\nこっちはEssential Phoneで撮った写真\n\n        View this post on Instagram           今日の蒔絵 #ilovecats  Shimizu Yasuhiroさん(@yshrsmz)がシェアした投稿 - 2018年 7月月25日午前5時01分PDT\n\n\nいろいろ条件が違うから一概に比較はできないけれど、暗いところもちゃんと明暗がわかるし、こんなにきれいに黒猫が撮れたのは初めてだったので本当に嬉しかった。\n\nただXLは本当に大きいので、バンカーリング使うとかストラップ使うとか、落とさない対策をしておいたほうがいいと思う。\n"
} ,
  
  {
    "title"    : "届かないCST-01",
    "category" : "diary",
    "tags"     : " crowdfunding",
    "url"      : "/2018/12/04/cst01-undelivered/",
    "date"     : "December 4, 2018",
    "excerpt"  : "届かないクラウドファンディング Advent Calendar 2018 四日目は、CST-01です。\n\nどんなの？\n\nこんなのです\n\n\n\n“The World’s Thinnest Watch”、\b「世界最薄の時計」という触れ込みでローンチされた「CST-01」というプロダクトです。価格は129米ドル、お届け時期は当初2013年9月の予定でした。\n\nE-inkスクリーンと極薄バッテリーを使い、防水で、しかもバッテリーの持ちもいい。\b\n\n2013年1月9\b日がKickstarterでのロー...",
  "content"  : "届かないクラウドファンディング Advent Calendar 2018 四日目は、CST-01です。\n\nどんなの？\n\nこんなのです\n\n\n\n“The World’s Thinnest Watch”、\b「世界最薄の時計」という触れ込みでローンチされた「CST-01」というプロダクトです。価格は129米ドル、お届け時期は当初2013年9月の予定でした。\n\nE-inkスクリーンと極薄バッテリーを使い、防水で、しかもバッテリーの持ちもいい。\b\n\n2013年1月9\b日がKickstarterでのローンチ日で、どれくらいの時期かというとPebbleのKickstarterでのローンチが2012月4月11日でした。\n\nCST-01はおよそ一ヶ月半後の2013年2月23日、最終的に約一億円を集めて成立しました。\n\n私自身、実はPebbleも支援していたのですが、まあ見た目がとにかくかっこよくて未来的だったので\b\b支援してしまいました。\n\n\b達成はしたけど…\n\n当初使おうとしていたバッテリが使えなくなり、まず2014年2月に延期。その後も課題が\b次々と見つかり延期が続きます。\n\n\b原因は基本的にそのスペックでした。\nこの薄い形状に\bいろいろ詰め込まなきゃなので、そりゃあ各部品は精度が求められるし組み立ても難しくなるよね、ってことです。\n\nなんとか発送開始？\n\n開発は少しずつ進み2015年2月、一部の支援者に向けて完成品が発送されたようです。\n\nしかし続く2015年4月のアップデートで、\b予定していた生産数と現実に大きな隔たりがあることが伝えられます。当初は一週間に1000-2000\b台生産される予定だったようですが、現実には週あたり200台、しかも完全に動作するものはここ二週間で130台しかできていないというのです。\n\n新たな資金が必要\n\n2015年5月のアップデートでは、上記不良品率の高さが原因で追加で120万米ドルの資金が必要になることが伝えられています。\nそして2015年\b6月のアップデートで、\b当時の製造業者との契約を解消し資金を含めた新しい提携先を探し始めたことが伝えられます。\n\nしかし、その後アップデートは途絶えます。\n\nそれからどしたの\n\n2016年5月、アップデートで破産が通知される。\n2017年5月、破産手続きの完了？が通知される。\n\nまとめ\n\n製品は届かなかったけど、待ってるうちにPebbleが届いたりAndroid Wear端末を買ったり、といろいろこちらの状況も変わったので別にいいかな…という感じでした。\n\nあとこれクラウドファンディング全体に言える気もしますが、アップデートを読んでるだけでいろいろドラマがあっておもしろかった。コメントで\b発狂してる人も結構いたけど、開発者側は不誠実な感じではなく\b頑張っている風だったので、\b言い方は悪いけど最後まで楽しめました。\n\nクラウドファンディングは夢を買っているので遅れても届かなくても暖かく見守りたい…と自分に言い聞かせつつ\b\b終わります。\n\nCST-01: The World’s Thinnest Watch\n"
} ,
  
  {
    "title"    : "最後にあれしたのいつだっけ？をトラッキングするAndroidアプリ、SinceTimerをリリースしてた",
    "category" : "programming",
    "tags"     : " android, sincetimer",
    "url"      : "/2018/11/29/sincetimer-android-released/",
    "date"     : "November 29, 2018",
    "excerpt"  : "\n\n掲題のとおり、今年の7月末にアプリをGoogle Play Storeに公開していました。気がついたら4ヶ月も下書きのまま放置してしまっていた…\n\n名前は”SinceTimer(シンスタイマー)”です。\n\n「最後に映画観たのいつだっけ？」とか「最後にラーメン食べたのいつだっけ？」とかいった情報を管理するためのアプリです。\n\n\n\n画面\n\nトップ画面はこんな感じで\n\n\n\nイベントの追加画面はこう\n\n\n\n各イベントの詳細では履歴が一覧できます。FABから新しい履歴を追加\n\n\n\n今回はGoog...",
  "content"  : "\n\n掲題のとおり、今年の7月末にアプリをGoogle Play Storeに公開していました。気がついたら4ヶ月も下書きのまま放置してしまっていた…\n\n名前は”SinceTimer(シンスタイマー)”です。\n\n「最後に映画観たのいつだっけ？」とか「最後にラーメン食べたのいつだっけ？」とかいった情報を管理するためのアプリです。\n\n\n\n画面\n\nトップ画面はこんな感じで\n\n\n\nイベントの追加画面はこう\n\n\n\n各イベントの詳細では履歴が一覧できます。FABから新しい履歴を追加\n\n\n\n今回はGoogle I/O 2018で発表された新しいMaterial Designを意識して作っています。\n\nアイコン\n\n\b今までは99designsで依頼してたのですが、今回はSketchで自作してみました。\n素人にしてはソレっぽいのができてかなり気に入っています。\n\bMaterial Designは\bガイドラインがしっかりしているので、やっぱいいですね。\n\n今後の展望\n\nもうちょっとほしい機能があるので、引き続き開発は続けていく\bつもりです。\n\n\n  ダークテーマ\n  タイマー\n  課金で広告\b非表示\n  検索\n\n\n※ここから下は技術者向け ———-\n\n使った技術とか\n\nAndroid Architecture Components(以後AAC)を\bガッツリ使ってます。\n最近は公式のライブラリが充実してきたので、迷うことが減っていいですね。初心者的には学ぶことが増えて一長一短でしょうけど…。\n\n最初はSingle Activity\bな構成にしようかと思ったんですが、「Toolbarの形が\b大きく異なる場合に\bどうするの？」という問題をうまく解決できそうになかったので、Activityは各画面で別になっています。\nこの問題、googlesamples/android-sunflowerでもissueがあがっていて、\bまだ公式でも意見がまとまっていないようです。うまいこと解決できるといいのですが。\n\nデータベースはAACのRoomを使っています。RxJavaやLiveDataによるリアクティブな使い方をサポートしていて、ホントに使いやすいです。\nなにより、自分で書いたSQL\bの結果をクラスに楽にマッピング\bでき\b最高です。もう\bテーブル構成まんまなデータをプレゼンテーション層で使う時代は終わったのです。\n2.1.0からはFTSやViewもサポートするようなので、今後 LIKE を使わない検索の実装に\bも役立ちそうです。自力でN-gram的なことをしなきゃなんで、また別の困難はありそうですが。\n\nArchitecture?\n\nClean Architecture x MVIな感じです。\nAACのViewModelがUsecaseとReducerを持ち、画面の\bState\b(Kotlinのdata class)をLiveDataでFragmentに公開しています。\n\nAndroidだとWebの仮想DOM的な差分更新の仕組みがないので、新しいStateとViewの状態を比べて更新の可否を決めるようなコードを書くことになり、若干手間は\bかかります。\n\nStateの更新場所がまとまるのは大変良いので、AirbnbのMvRxとかいろいろ先達を参考にしつつよい方法を模索していきたいです。\n\n参考\n\n  PlayStoreリンク: https://play.google.com/store/apps/details?id=com.codingfeline.sincetimer\n\n"
} ,
  
  {
    "title"    : "(Android) App Signingなアプリの課金デバッグをしたい",
    "category" : "programming",
    "tags"     : " til, android",
    "url"      : "/2018/11/29/debugging-iap-app-signing/",
    "date"     : "November 29, 2018",
    "excerpt"  : "TL;DR\n\nPlayStoreから一度アプリをインストールした後、アンインストールしてパッケージ名を揃えたデバッグビルドをインストールしたらよい。\n\nApp Signingでも課金でバッグしたい\n\nGoogle Play App Signing、便利だけど手元にあるのはAPKアップロード用の鍵なので、課金のデバッグはできないものと思っていた。\nでも、調べてみると結構簡単にエミュレータ上のデバッグビルドでも課金することができた。\n\n手順は簡単。\n\n\n  PlayStoreからアプリをインス...",
  "content"  : "TL;DR\n\nPlayStoreから一度アプリをインストールした後、アンインストールしてパッケージ名を揃えたデバッグビルドをインストールしたらよい。\n\nApp Signingでも課金でバッグしたい\n\nGoogle Play App Signing、便利だけど手元にあるのはAPKアップロード用の鍵なので、課金のデバッグはできないものと思っていた。\nでも、調べてみると結構簡単にエミュレータ上のデバッグビルドでも課金することができた。\n\n手順は簡単。\n\n\n  PlayStoreからアプリをインストールする\n  アプリをアンインストールする\n  本番のapplication idでデバッグ版をビルド、いつもどおりにAndroid Studioからデバッグする\n\n\nこれだけ。\nもちろん対象アカウントのテスター登録とかアルファ版に課金Permission入れたAPKをアップロードするとか、通常の課金テストで必要な手順は一通り必要。\n\n一つ注意点があって、この方法だとGoogle PlayのDeveloperコンソールから課金キャンセルした場合に、キャンセルが反映されない。\nおそらく署名が違うから正常にリモートから情報を取得できないのだと思う。\nこの場合は一度デバッグビルドをアンインストールして、再度上記のPlayStoreからインストールする手順を踏めば良い。\n\n参考\n\n  Google Play App Signing環境でのアプリ課金実装方法について\n  How can i test in-app payments when Google Play App Signing feature is enabled?\n\n\n"
} ,
  
  {
    "title"    : "DartのPackage(ライブラリ)を公開する",
    "category" : "programming",
    "tags"     : " Dart",
    "url"      : "/2018/08/19/publishing-dart-package/",
    "date"     : "August 19, 2018",
    "excerpt"  : "unorm_dartというDartのPackageを公開したので公開周りのフローをまとめます。\n\npub publish --dry-run を実行するといい感じにいろいろ教えてくれます。たとえばこんな感じ。\n\nPublishing unorm_dart 0.1.0 to https://pub.dartlang.org:\n|-- .gitignore\n|-- .idea\n|   |-- codeStyles\n|   |   |-- Project.xml\n|   |   &#39;-- code...",
  "content"  : "unorm_dartというDartのPackageを公開したので公開周りのフローをまとめます。\n\npub publish --dry-run を実行するといい感じにいろいろ教えてくれます。たとえばこんな感じ。\n\nPublishing unorm_dart 0.1.0 to https://pub.dartlang.org:\n|-- .gitignore\n|-- .idea\n|   |-- codeStyles\n|   |   |-- Project.xml\n|   |   &#39;-- codeStyleConfig.xml\n|   &#39;-- saveactions_settings.xml\n|-- CHANGELOG.md\n|-- LICENSE\n|-- README.md\n|-- analysis_options.yaml\n|-- example\n|   &#39;-- unorm_dart_example.dart\n|-- lib\n|   |-- src\n|   |   |-- composite_iterator.dart\n|   |   |-- decomposite_iterator.dart\n|   |   |-- iterator.dart\n|   |   |-- recursive_decomposite_iterator.dart\n|   |   |-- uchar.dart\n|   |   |-- uchar_iterator.dart\n|   |   |-- unorm_dart_base.dart\n|   |   |-- unormdata.dart\n|   |   &#39;-- utils.dart\n|   &#39;-- unorm_dart.dart\n|-- pubspec.yaml\n&#39;-- test\n    |-- normalization_test.dart\n    &#39;-- unorm_dart_test.dart\nMissing requirements:\n* Your pubspec.yaml is missing a &quot;homepage&quot; field.\nSorry, your package is missing a requirement and can&#39;t be published yet.\nFor more information, see: https://www.dartlang.org/tools/pub/cmd/pub-lish.\n\n\n表示される内容は以下の通り\n\n\n  公開するパッケージの名称、バージョン、公開先(基本的にpub.dartlang.orgのはず)\n  公開するパッケージに含まれるファイル\n  公開するために足りない要件\n\n\n一番最後の項目を潰していけば公開できるようになります。\n今回の場合だと、pubspec.yamlにhomepageフィールドが足りないようです。homepageフィールドを追加してもう一度 pub publish --dry-run すると下記のようになります。\n\nPublishing unorm_dart 0.1.0 to https://pub.dartlang.org:\n|-- .gitignore\n|-- .idea\n|   |-- codeStyles\n|   |   |-- Project.xml\n|   |   &#39;-- codeStyleConfig.xml\n|   &#39;-- saveactions_settings.xml\n|-- CHANGELOG.md\n|-- LICENSE\n|-- README.md\n|-- analysis_options.yaml\n|-- example\n|   &#39;-- unorm_dart_example.dart\n|-- lib\n|   |-- src\n|   |   |-- composite_iterator.dart\n|   |   |-- decomposite_iterator.dart\n|   |   |-- iterator.dart\n|   |   |-- recursive_decomposite_iterator.dart\n|   |   |-- uchar.dart\n|   |   |-- uchar_iterator.dart\n|   |   |-- unorm_dart_base.dart\n|   |   |-- unormdata.dart\n|   |   &#39;-- utils.dart\n|   &#39;-- unorm_dart.dart\n|-- pubspec.yaml\n&#39;-- test\n    |-- normalization_test.dart\n    &#39;-- unorm_dart_test.dart\n\nPackage has 0 warnings.\n\n\nこれで公開できるはずです。\n\nまた、このときPackageに入れたくないファイルが含まれていないか確認しましょう。Packageに含まれないファイルは下記の通りです。\n\n\n  packages ディレクトリ(Dart2系では使われていないはず)\n  このPackageのロックファイル(pubspec.lock)\n  Gitを使っていなければ、すべての隠しファイル(.から始まるファイル)\n  Gitを使っていれば、.gitignoreに指定されているファイル\n\n\nつまり、基本的にGitで管理しているファイルはすべて公開されるパッケージに含まれます。公開されたくないものはレポジトリに入れないようにしましょう。\n今回の場合だと、本来IntelliJの設定フォルダである .idea はPackageに入れたくないのですが、コードスタイルの設定はレポジトリで共有したいのでやむなく含まれています。\n\n用意ができたら pub publish で公開します。\n\nPublishing unorm_dart 0.1.0 to https://pub.dartlang.org:\n|-- .gitignore\n|-- .idea\n|   |-- codeStyles\n|   |   |-- Project.xml\n|   |   &#39;-- codeStyleConfig.xml\n|   &#39;-- saveactions_settings.xml\n|-- CHANGELOG.md\n|-- LICENSE\n|-- README.md\n|-- analysis_options.yaml\n|-- example\n|   &#39;-- unorm_dart_example.dart\n|-- lib\n|   |-- src\n|   |   |-- composite_iterator.dart\n|   |   |-- decomposite_iterator.dart\n|   |   |-- iterator.dart\n|   |   |-- recursive_decomposite_iterator.dart\n|   |   |-- uchar.dart\n|   |   |-- uchar_iterator.dart\n|   |   |-- unorm_dart_base.dart\n|   |   |-- unormdata.dart\n|   |   &#39;-- utils.dart\n|   &#39;-- unorm_dart.dart\n|-- pubspec.yaml\n&#39;-- test\n    |-- normalization_test.dart\n    &#39;-- unorm_dart_test.dart\n\nLooks great! Are you ready to upload your package (y/n)?\n\n\ny を入力\n\nPub needs your authorization to upload packages on your behalf.\nIn a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=XXXXXXXXXXXXXX\nThen click &quot;Allow access&quot;.\n\nWaiting for your authorization...\n\n\nWebブラウザでアクセスするためのURLが表示されるので、ブラウザを開きます。Packageを公開するにはGoogleアカウントが必要で、そのための承認作業です。\n\n無事アカウントの認証ができると、こんな画面が表示されます。ターミナルに戻ると公開処理が完了しているはずです。\n\n\n\nAuthorization received, processing...\nSuccessfully authorized.\nUploading... (3.4s)\nSuccessfully uploaded package.\n\n\n30分くらい？待つと https://pub.dartlang.org で検索に表示されるようになります。\n\n\n\nDartのパッケージ公開、本当に楽でした。ほぼCLIで終わってしまうのはちょっと感動です。\n今までJavaのライブラリ開発をいくつかしていて、bintrayやmaven centralに公開したこともあるのですが、その時の作業とは比べものにならないほどのお手軽さでした。\n\n今作ろうとしているサービスをFlutter/Dartで実現するためには必要なものがいくつもあるので、ちょこちょこコミュニティにPackageという形で貢献できたらなあ、と思います。\n\n参考\n\n  Publishing a Package | Dart\n  Pubspec Format | Dart\n  Pub Package Layout Conventions | Dart\n\n"
} ,
  
  {
    "title"    : "(Flutter) なぜStatefullWidgetではなくStateがbuildメソッドを持っているのか",
    "category" : "programming",
    "tags"     : " til, flutter",
    "url"      : "/2018/07/22/flutter-statefullwidget-build/",
    "date"     : "July 22, 2018",
    "excerpt"  : "最近趣味と実益を兼ねてFlutterを触っている。\n\nだいたいReactっぽくて良さそうな感じ。React Nativeと違って、UIレイヤについては基本的にFlutterの中で完結するのが好み。\n\nただStatefulWidgetを作るときにちょっと気になることがあった。StatefulWidgetはそれ以外にWidgetの状態を管理するStateクラスが必要なんだけど、StatefulWidgetではなくStateの方にUIを描画するbuildメソッドがあるのだ。\n\nReactでもそう...",
  "content"  : "最近趣味と実益を兼ねてFlutterを触っている。\n\nだいたいReactっぽくて良さそうな感じ。React Nativeと違って、UIレイヤについては基本的にFlutterの中で完結するのが好み。\n\nただStatefulWidgetを作るときにちょっと気になることがあった。StatefulWidgetはそれ以外にWidgetの状態を管理するStateクラスが必要なんだけど、StatefulWidgetではなくStateの方にUIを描画するbuildメソッドがあるのだ。\n\nReactでもそうだしMVPやらMVVMでもそうだけど、だいたい状態を管理するクラスとUIを描画するクラスを分離することで責任を分離している。それをなぜわざわざStateクラスにbuildメソッドが生えているんだろう？　と違和感しかなかった。\n\nそんなわけでちょっと調べてみたら、やっぱり同じように思う人はいたらしくissueがたっていた。\n\nFAQ request: why is the build() method on State, and not StatefulWidget ?\n\n要約すると下記のような理由らしい。\n\nStatefulWidgetにbuildメソッドを生やすことにすると、メソッドシグネチャがStatefulWidget#build(BuildContext, State)になる。\nこのメソッドの中でクロージャを定義すると暗黙的にthis(この場合はStatefulWidget)がキャプチャされる。で、buildメソッドが呼ばれたときに、StatefulWidgetは作り直されたにも関わらずクロージャのthisは古いStatefulWidgetを参照したままで古い状態を参照してしまう。\n一方State#build(BuildContext)であれば、StateはStatefulWidgetが再生成されたときでもそのまま保持されるので、thisの対象が変わることはない、ということだ。\n\nあとは、StatefulWidget#build(BuildContext, State)だと、これ継承した新しいStatefulWidgetを作ったときに実装の詳細であるStateを子クラスに公開しなければならなくなる、とか。\n\n仕様的にこうせざるを得なかった、というのはわかったけどやっぱり釈然としない感じはある。\n\nこういった点を何とかするためにBLoCパターンとかMVW系のデザインパターンを実装するんだろうけど、そのへんはまだ分かりきっていないので引き続き調べる。\n\nちなみに上述のissueの中身は現在APIドキュメントの方にも記載されている。\n"
} ,
  
  {
    "title"    : "TwitterKit使ってるアプリでブラウザ経由のログインできなくなった件",
    "category" : "programming",
    "tags"     : " til, android, twitter",
    "url"      : "/2018/06/13/twitterkit-calback-url-lock/",
    "date"     : "June 13, 2018",
    "excerpt"  : "前々から告知されていたけど、2018/06/13にTwitter認証のコールバックURLをコード側で任意に変えることができなくなった。\n\nTwitterKitはこの、コード側で任意にコールバックURLを変更できる仕様を前提として作られているので、当然のようにブラウザ経由でのログインができなくなってしまう。\n\n解決策書いてる人もいて、それ試してみたけど動かなかったのでコード読んでみた。\n\n結論\n\nTwitterKit for iOSとTwitterKit for Androidではコールバッ...",
  "content"  : "前々から告知されていたけど、2018/06/13にTwitter認証のコールバックURLをコード側で任意に変えることができなくなった。\n\nTwitterKitはこの、コード側で任意にコールバックURLを変更できる仕様を前提として作られているので、当然のようにブラウザ経由でのログインができなくなってしまう。\n\n解決策書いてる人もいて、それ試してみたけど動かなかったのでコード読んでみた。\n\n結論\n\nTwitterKit for iOSとTwitterKit for AndroidではコールバックURLの仕様が異なっているので、両方を https://apps.twitter.com のコンソール上で指定する必要がある。\n\n\n  \n    \n       \n      url scheme\n      code\n    \n  \n  \n    \n      TwitterKit for Android\n      twittersdk://\n      OAuth1aService.java#L59\n    \n    \n      TwitterKit for iOS\n      twitterkit-YOUR_CONSUMER_KEY://\n      TWTRLoginURLParser.m#L39\n    \n  \n\n\nTwitterKitも近いうちにサポートなくなってしまうのでなんとかしないとなあ…\n\n2018/06/14 追記\n\ntwitter-kit-iosのコードを眺めてたら、 コンソールからtwittersdk://を設定しておけばそれで動いてくれそうな記述があった。\nフォールバック的な挙動にも見えるけど、結論twittersdk://だけ設定しておけばよさそう。\n\n"
} ,
  
  {
    "title"    : "Supportライブラリからandroidxに移行する",
    "category" : "programming",
    "tags"     : " til, android, kotlin",
    "url"      : "/2018/06/10/migrate-to-androidx/",
    "date"     : "June 10, 2018",
    "excerpt"  : "個人で作っているアプリを、SupportライブラリからAndroidxに移行した。\nいくつかハマりどころがあった。\n\n基本的には、\n\n\n  Android Studioを3.2 Canaryに変更する\n  Android Gradle Pluginを3.2.0-alpha17以降に上げる\n  targetSdkVersionとcompileSdkVersionを28に変更\n  Android StudioでRefactor &amp;gt; Refactor to AndroidXでコード書き換え...",
  "content"  : "個人で作っているアプリを、SupportライブラリからAndroidxに移行した。\nいくつかハマりどころがあった。\n\n基本的には、\n\n\n  Android Studioを3.2 Canaryに変更する\n  Android Gradle Pluginを3.2.0-alpha17以降に上げる\n  targetSdkVersionとcompileSdkVersionを28に変更\n  Android StudioでRefactor &amp;gt; Refactor to AndroidXでコード書き換え\n\n\nでOK、らしい。\n\nただbuild.gradleで指定していたライブラリの依存関係が、変数使って外出ししていた関係か更新されなかった。\nそこは公式の新旧アーティファクトID対応表を見て自分で修正する必要があった。\n\n他にもいくつかあって、\n\n\n  ConstraintLayoutのパッケージ名がandroidx.constraintlayout.widget.XXXX(実際はandroidx.constraintlayout.XXXX)\n  androidx系のクラスがfully qualified nameでコード内に書かれてしまうので、importに変更する\n  一部クラスがそもそもimport文消された上にfully qualified nameに更新されず、参照エラーになってしまうのでimport文追加する\n    \n      私の環境ではArchitecture ComponentsのViewModel系がこのパターンになっていた？\n    \n  \n\n\nだいたいこんな感じ。\n\ndagger-androidとかサポートライブラリに依存してるやつは勝手に修正してくれるらしく、そのまま使うことができた。\n\n参考: Convert the project to androidx. by thagikura · Pull Request #436 · google/flexbox-layout\n\n※2018/06/13追記\n\nConstraintLayout 1.1.2がリリースされ、上記のパッケージが違う問題は修正されました。\n"
} ,
  
  {
    "title"    : "AndroidのNavigation Barの色とアイコンの色を変える",
    "category" : "programming",
    "tags"     : " til, android",
    "url"      : "/2018/05/06/navigationbar-color/",
    "date"     : "May 6, 2018",
    "excerpt"  : "styles.xmlの該当のスタイルに下記を追加するだけ。\n\n&amp;lt;item android:name=&quot;android:windowNavigationBarColor&quot;&amp;gt;@style/some_color&amp;lt;/item&amp;gt;\n\n\nNavigation Barを明るめの色の色にして、アイコンを暗くしたいときはさらに下記を追加。\n\n&amp;lt;item android:name=&quot;android:windowLightNavigationBar&quot;&amp;gt;true&amp;lt;/item...",
  "content"  : "styles.xmlの該当のスタイルに下記を追加するだけ。\n\n&amp;lt;item android:name=&quot;android:windowNavigationBarColor&quot;&amp;gt;@style/some_color&amp;lt;/item&amp;gt;\n\n\nNavigation Barを明るめの色の色にして、アイコンを暗くしたいときはさらに下記を追加。\n\n&amp;lt;item android:name=&quot;android:windowLightNavigationBar&quot;&amp;gt;true&amp;lt;/item&amp;gt;\n\n\nただしこれはAPI27で追加されたプロパティなので注意。\nAPI27未満ではデフォルトの黒いNavigation Barにするとか割り切りが必要。\nあとアイコンの色に黒・白以外の選択肢はない。\n\n最近リリースされたGoogleのTodoリストアプリも、API27未満は黒いNavigation Barで、API27以降でのみNavigation Barを白くしている。\nちなみにStatus Barの方はもうちょっと前のAPIからアイコンの色を黒くできる。\n"
} ,
  
  {
    "title"    : "Android Studioで保存時にファイルの最後に改行を入れる",
    "category" : "programming",
    "tags"     : " til, android",
    "url"      : "/2018/05/01/final-newline-androidstudio/",
    "date"     : "May 1, 2018",
    "excerpt"  : "2020/09/29更新:\n\nIntelliJ IDEA 2020.2だとちょっと違った。\n\nPreferences &amp;gt; Editor &amp;gt; General &amp;gt; Save Files &amp;gt; Ensure an empty line at the end of a file on save\n\n\nことあるごとに探してる気がするのでメモ。\n\nPreferences &amp;gt; Editor &amp;gt; General &amp;gt; Ensure line feed at file e...",
  "content"  : "2020/09/29更新:\n\nIntelliJ IDEA 2020.2だとちょっと違った。\n\nPreferences &amp;gt; Editor &amp;gt; General &amp;gt; Save Files &amp;gt; Ensure an empty line at the end of a file on save\n\n\nことあるごとに探してる気がするのでメモ。\n\nPreferences &amp;gt; Editor &amp;gt; General &amp;gt; Ensure line feed at file end on Save\n"
} ,
  
  {
    "title"    : "SlackのGitHub integrationで色々流れてこない時にすること",
    "category" : "programming",
    "tags"     : " til, slack, github",
    "url"      : "/2018/03/27/settingup-github-slack/",
    "date"     : "March 27, 2018",
    "excerpt"  : "ちょっと前にGitHubのSlack integrationがリニューアルした。これは新しいSlack Appのリリースとして実施されたので、古いものから新しいものへの乗り換えが必要。\n\nあたらしいAppは/githubコマンドを使って、Slackのチャンネル画面から対話形式で設定を行う。\n\nたとえば通知を受け取るレポジトリを新しく追加するときは/github subscribe owner/repoみたいな感じ。\n\nただこれを実行するだけだと問題があった。プルリクエストについたレビューや...",
  "content"  : "ちょっと前にGitHubのSlack integrationがリニューアルした。これは新しいSlack Appのリリースとして実施されたので、古いものから新しいものへの乗り換えが必要。\n\nあたらしいAppは/githubコマンドを使って、Slackのチャンネル画面から対話形式で設定を行う。\n\nたとえば通知を受け取るレポジトリを新しく追加するときは/github subscribe owner/repoみたいな感じ。\n\nただこれを実行するだけだと問題があった。プルリクエストについたレビューやコメント等が通知されてこないのだ。\n\n調べてみるとこのGitHub Appのレポジトリがあって、そこに細かい設定方法が記載してあった。\n\n\n  Configuration\n  You can customize your notifications by subscribing to activity that is relevant to your Slack channel, and unsubscribing from activity that is less helpful to your project.\n\n  Configuration\n  You can customize your notifications by subscribing to activity that is relevant to your Slack channel, and unsubscribing from activity that is less helpful to your project.\n\n  Settings are configured with the /github slash command:\n\n  /github subscribe owner/repo [feature]\n/github unsubscribe owner/repo [feature]\n  \n\n  These are enabled by default, and can be disabled with the /github unsubscribe owner/repo [feature] command:\n\n  \n    issues - Opened or closed issues\n    pulls - New or merged pull requests\n    statuses - Statuses on pull requests\n    commits - New commits on the default branch (usually master)\n    deployments - Updated status on deployments\n    public - A repository switching from private to public\n  \n\n  These are disabled by default, and can be enabled with the /github subscribe owner/repo [feature] command:\n\n  \n    reviews - Pull request reviews\n    comments - New comments on issues and pull requests\n    branches - Created or deleted branches\n    commits:all - All commits pushed to any branch\n  \n\n  You can subscribe or unsubscribe from multiple settings at once. For example, to turn on activity for pull request reviews and comments:\n\n\n要約すると、単に/github subscribe owner/repoするとレビューやコメント、ブランチの作成/削除、デフォルトでないブランチへのコミットは通知されないらしい。\n\nこれらの通知機能を有効にするには、/github subscribe owner/repo reviewsのように、subscribeするときに有効にしたい機能名を渡したらいい。\n\n(とはいえ有効にしたあとも流れてこないことがあるような気がしなくもない…)\n"
} ,
  
  {
    "title"    : "Gradleの更新時にall.zipを一発で取得する",
    "category" : "programming",
    "tags"     : " til, gradle",
    "url"      : "/2018/01/15/gradle-all-zip/",
    "date"     : "January 15, 2018",
    "excerpt"  : "普通にgradlew wrapper --gradle-version=x.y.zとコマンドを叩くと、取得されるGradleのzipファイルはgradle-x.y.z-bin.zip。all.zipを取得するにはAndroidStudioのサジェストに従うか、あるいはgradle-wrapper.propertiesを修正する必要がある。\n\n最初からコマンドラインでgradle-x.y.z-all.zipを取得するにはbuild.gradleファイルに一手間必要\n\n// rootのbuil...",
  "content"  : "普通にgradlew wrapper --gradle-version=x.y.zとコマンドを叩くと、取得されるGradleのzipファイルはgradle-x.y.z-bin.zip。all.zipを取得するにはAndroidStudioのサジェストに従うか、あるいはgradle-wrapper.propertiesを修正する必要がある。\n\n最初からコマンドラインでgradle-x.y.z-all.zipを取得するにはbuild.gradleファイルに一手間必要\n\n// rootのbuild.gradle\ntask wrapper(type: Wrapper) {\n  gradleVersion = &quot;x.y.z&quot;\n  distributionType &quot;ALL&quot;\n}\n\n\nまあこれを設定しても今まで通りwrapperタスクを二度実行する必要があるのは変わらないけど、コマンドは短くなるしall.zipを取得し直す手間もなくなる。\n\nGradleの該当コードはこのあたり\n\ngradlew wrapper --gradle-version=x.y.z --distribution-type=ALLとかやっても同じ動作になりそう。\n\n2018/07/04追記\n\n上の方法、Gradle5.0から使えなくなるらしく実行時に警告が出るようになっていた。\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.\nSee https://docs.gradle.org/4.8.1/userguide/command_line_interface.html#sec:command_line_warnings\n\n\n上記のようなメッセージが表示されるのみで最初はわからなかったんだけど、表示されるリンク先にあるように --warning-mode=all を指定して適当なタスクを実行してみたら詳細なエラーがでた。\n\nCreating a custom task named &#39;wrapper&#39; has been deprecated and is scheduled to be removed in Gradle 5.0. You can configure the existing task using the &#39;wrapper { }&#39; syntax or create your custom task under a different name.&#39;.\n        at build_b74mo1uay274dql3ctg39y5sg.run(/Users/user_name/repos/some_project/build.gradle:38)\n        (Run with --stacktrace to get the full stack trace of this deprecation warning.)\n\n\nなるほど。\n\nwrapper {\n    gradleVersion = &#39;4.8.1&#39;\n    //noinspection UnnecessaryQualifiedReference\n    distributionType = Wrapper.DistributionType.ALL\n}\n\n\nみたいに変更したらメッセージは消えた。\n\n"
} ,
  
  {
    "title"    : "2017年を振り返って",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2018/01/13/lookingback-2017/",
    "date"     : "January 13, 2018",
    "excerpt"  : "年も変わってしまいましたが、2017年の振り返りなどやってみます。\n\n仕事\n\n昨年に引き続き、基本的にパフォーマンスやらメンテナンス性の改善やらが主な業務でした。Kotlin入れたりもしましたね。\n\nただ12月に異動があり、今は新規立ち上げのプロジェクトでAndroidアプリを作っています。\n\n一から設計できるので、前プロジェクトやら個人プロジェクトでためた知見を生かしつつメンテナンス性の高いものを作っていきたいなあと思っています。\n今のところの設計方針はClean Architectur...",
  "content"  : "年も変わってしまいましたが、2017年の振り返りなどやってみます。\n\n仕事\n\n昨年に引き続き、基本的にパフォーマンスやらメンテナンス性の改善やらが主な業務でした。Kotlin入れたりもしましたね。\n\nただ12月に異動があり、今は新規立ち上げのプロジェクトでAndroidアプリを作っています。\n\n一から設計できるので、前プロジェクトやら個人プロジェクトでためた知見を生かしつつメンテナンス性の高いものを作っていきたいなあと思っています。\n今のところの設計方針はClean Architecture x MVVM x Reactive x CQRSです。\n\nあとは勉強会での発表というものをCA.ktで初めて体験しました。しっかり練習したのでそこそこ喋れたとは思いますが、本番は緊張でお腹痛くて仕方なかったですw\nとはいえなかなか面白い経験だったので、今年も機会を作りたいと思ってます。\n\n個人\n\nブログをVPSのGhostからGitHub Pagesに移行した\n\n自分でGhostメンテするのがめんどくなってきたので、思い切ってGitHub Pagesでのブログに移行しました。\n\nちょっと前まではGitHubの指定したJekyllテーマ以外は自分でビルドしてHTMLをpushしなければいけなかったと思うのですが、最近はGitHub上でホスティングされてるテーマなら結構なんでも使えるようになっていたようです。\n記事のURLもそこそこカスタマイズできたので、URLを変えずにすべての記事を移行できました。\n\nwrite_code_everyday\n\n\n\n2017年の実績はこんな感じです。2回ほど書けなかった日がありました。\n\n個人プロジェクト\n\n今年は新規で何かをリリースすることはなかったです。もちろん進行中のプロジェクトはいくつかありますが、既存プロダクトのメンテナンスが主でした。\n作ったものが増えてくるとやはりメンテナンスにかかる時間も増えていくので、その辺どう折り合いをつけていくのか、が今後の課題です。\n\nとはいえOmnitweety for AndroidをMVPからMVVMに書き直し&amp;amp;&amp;amp;RxJava2に移行したり、LicenseAdapterのリファクタしてくれた人をContributerに迎えたり、いろいろ学びのあった一年でした。\n\n今年も何かしらアウトプットをしていこうと思っています。\n\n自作キーボード\n\nこれ、今年一番の挑戦でした。\nLet’s SplitとNyquist、Dactylを作りました。\n\n余ってたキーキャップ使ったから高さがアレだけど、初めての #レツプリ 完成！ pic.twitter.com/gvd3zyklXI&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年8月24日\n\nというわけでNyquist組み上がりました pic.twitter.com/l3dPOQbHz0&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月3日\n\nDactylにキーキャップもつけた。右裏側にはTeensyのリセットボタン用に雑に穴開けてみたり。いやー楽しかった pic.twitter.com/75vGhnFkTr&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月24日\n\n\n  Let’s Splitを作った話\n  Kinesis Advantageの左右分離版みたいなキーボード、Dactylを作った話\n\n\n詳しくは以前書いた記事に譲りますが、電子工作という新しい分野に足を踏み入れることができました。自作キーボードと言っても、Let’s Split とかPCBができているものは部品揃えたら後はPCBにはんだ付けだけなので、そこまで難しくもないです。\n\nやはり自分で作るとキーボードに対する愛着が違い、毎日タイピングしていて楽しいです。\n\n最近はLet’s Splitをメインで使っています。\nDactyl、Kinesis Advantage2のお椀型のキー配置と左右分離型キーボードの利点が組み合わさって基本的に素晴らしいんですが、いくつか気になることがあって使うのをやめてしまいました。\n\nそれは主に、キーボードが大きい点です。Kinesis Advantage2と比べるともちろん小さいのですが、お椀型である以上やはりある程度の大きさがあります。リストパッドもErgoDox用を二つ重ねないと安定しません。\n\nあとは数字キーがあることでキー数が増え、指の移動範囲が広がることも少し気になりました。お椀型にする事で通常のキーボードよりは狭いですが、それでもLet’s Splitに比べるとだいぶ広いです。\nまあLet’s Splitはまたレイヤー切り替えたキー配置を覚える必要があって大変なので、一長一短と言ったところではあります。\nLet’s Split以上Nyquist未満くらいの大きさで5行のキーボードがあればいいなあ、と思う今日この頃です。\n\n"
} ,
  
  {
    "title"    : "SQLiteでインデックスが使われているかどうか確認する",
    "category" : "programming",
    "tags"     : " til, sqlite",
    "url"      : "/2018/01/11/sqlite-explainqueryplan/",
    "date"     : "January 11, 2018",
    "excerpt"  : "explain query plan SQL_QUERY\n\n\nでクエリ実行計画を確認できる。\n\n CREATE TABLE IF NOT EXISTS `bank` \n  (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \n    `bank_code` TEXT NOT NULL, \n    `name` TEXT NOT NULL, \n    `kana` TEXT NOT NULL\n  )\n\n\nたとえばこういうテーブルがあっ...",
  "content"  : "explain query plan SQL_QUERY\n\n\nでクエリ実行計画を確認できる。\n\n CREATE TABLE IF NOT EXISTS `bank` \n  (\n    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \n    `bank_code` TEXT NOT NULL, \n    `name` TEXT NOT NULL, \n    `kana` TEXT NOT NULL\n  )\n\n\nたとえばこういうテーブルがあったときにbank_codeでデータを取得するクエリの実行計画を見てみると、下記のようになる。\n\nexplain query plan select * from bank where bank_code = &quot;0001&quot;\n\nselectid    order       from        detail          \n----------  ----------  ----------  ----------------\n0\t    0           0\t    SCAN TABLE bank\n\n\nbank_codeにインデックスを追加すると、下記のようになる\n\nCREATE UNIQUE INDEX `index_bank_bank_code` ON `bank` (`bank_code`)\n\n\nexplain query plan select * from bank where bank_code = &quot;0001&quot;\n\nselectid    order       from        detail          \n----------  ----------  ----------  ----------------\n0\t    0           0\t    SEARCH TABLE bank USING INDEX index_bank_bank_code (bank_code=?)\n\n\nexplain SQL_QUERYでもクエリがどのように実行されているかを確認することができる。\nSQLのパフォーマンスを検証したいときには便利そう\n\n参考\n\n  Primary Keys, Query Planning, and Binary Search\n  EXPLAIN QUERY PLAN\n  The SQLite Bytecode Engine\n\n"
} ,
  
  {
    "title"    : "Kinesis Advantageの左右分離版みたいなキーボード、Dactylを作った話",
    "category" : "keyboard",
    "tags"     : " keyboard, Dactyl",
    "url"      : "/2017/10/03/dactyl-keyboard-buildlog/",
    "date"     : "October 3, 2017",
    "excerpt"  : "Kinesis -&amp;gt; ErgoDox -&amp;gt; Let’s Split -&amp;gt; Nyquist -&amp;gt; Dactyl(New!)\n\n前回Let’s Splitを作ってから一ヶ月も経ってないですが、Dactylキーボードを作りました(実はその間にNyquistってキーボードも作ってたりします)。\n\nというわけでNyquist組み上がりました pic.twitter.com/l3dPOQbHz0&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月3...",
  "content"  : "Kinesis -&amp;gt; ErgoDox -&amp;gt; Let’s Split -&amp;gt; Nyquist -&amp;gt; Dactyl(New!)\n\n前回Let’s Splitを作ってから一ヶ月も経ってないですが、Dactylキーボードを作りました(実はその間にNyquistってキーボードも作ってたりします)。\n\nというわけでNyquist組み上がりました pic.twitter.com/l3dPOQbHz0&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月3日\n\n\nNyquist。Let’s Splitにもう一行足したようなキーボード。これもビルドログ書こうかと思ったけどすっかり忘れてた。\n\nDactylはこっち。\n\n\n\nパーツ\n\n\n  \n    \n      名称\n      値段\n      調達先\n    \n  \n  \n    \n      ケース\n      $240\n      Shapeways\n    \n    \n      キースイッチ\n      \\832 x 7(70個)\n      ジェイダブルシステム\n    \n    \n      Teensy 2.0\n      $16\n      PJRC\n    \n    \n      I/O Expander\n      $1.6\n      Digi-Key\n    \n    \n      ダイオード(1N4148)\n      \\100 x 2(100本)\n      秋月電子\n    \n    \n      LED\n      \\100(10個)\n      秋月電子\n    \n    \n      LED用抵抗\n      \\100(100本)\n      秋月電子\n    \n    \n      1/4W 2.2kΩ 抵抗\n      \\100(100本)\n      秋月電子\n    \n    \n      TRRS Jack\n      \\125 x 2\n      DigiKey\n    \n    \n      TRRS Cable\n      \\700\n      Amazon\n    \n    \n      キーキャップ\n      1セット\n       \n    \n    \n      クッションゴム\n      \\373\n      Amazon\n    \n  \n\n\nだいたいこんな感じ。\nLEDとその抵抗は、お好みに合わせて調達してください。今回のビルドではレイヤ切り替えのインジケータとして３つだけ使ってます。\nキーキャップも値段様々なのでお好みで。\nちなみにワイヤは30AWGのものを使っています。\n\n制作について\n\nErgoDox EZで使ってるキーマップを流用したかったので、本家レポジトリにあるQMK用のガイドと、その ガイドの作者が書いたビルドログ、あとはこの記事を書いてる時点ではマージされてないこのPR を参考にしました。\n\nこれらのガイドではErgoDoxにあってDactylにない内側のキー３つを追加しているけど、この計６つのキーを無視してもErgoDox EZのファームウェアがそのまま動いた。\n\n\n\n左右のキースイッチはんだ付けが終わったところ。\nガイドには「特に接着剤使わなくてもキースイッチ固定される」って書いてあるけど、作ってみた感じホットグルーとかで軽く接着したほうが良さそうだった。\n確かに固定はされるんだけど、キーキャップを外すときにスイッチも一緒に外れちゃうので配線が痛みそうな感じだった。\n\nDactyl左側もつなぎこんで動くことを確認！　あと一息だ～ pic.twitter.com/NZ9VeKoX0e&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月19日\n\n\nTeensy2.0とかを実際にはんだ付けする前にブレッドボードで確認。\nI/O Expander側のcolumnの配線、ガイド通りにやったらうまくいかなくて逆にしたような気がするけどもはやよく覚えてない。\n\nDactylの左側できたぽい pic.twitter.com/DmDECq2h48&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月23日\n\n\n左側のつなぎ込み。\nTeensy 2.0とI/O Expanderはそれぞれ２つずつ用意していたので、この辺はブレッドボードを横に置きながら一つずつワイヤを本番のパーツに移していった。\n\nDactyl右側進捗 pic.twitter.com/0RQWJhlV7a&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月23日\n\n\n右側のつなぎ込み。\n実は繋ぎこんでる途中で、本番用のTeensy 2.0が偽物だったことが判明。\n公式サイトから急遽正規品を注文したので、ここで一週間くらいパーツ待ちが発生した。\namazon.jpでもふつーに偽物おいてるので注意してほしい。\n\n公式から買ったTeensy2.0が来たので偽物と比較。それぞれ右側が偽物。偽物の方にはTeensy2.0って書いてあるしややこしい。 pic.twitter.com/uXGQNWJ2WX&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月23日\n\n\nというわけで偽物との比較。公式にも偽物への注意を喚起するページがあって、まんまそこに書いてあるとおりだった。\n\nDactylにキーキャップもつけた。右裏側にはTeensyのリセットボタン用に雑に穴開けてみたり。いやー楽しかった pic.twitter.com/75vGhnFkTr&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年9月24日\n\n\nで、いろいろあったけど組み上がり。\n実はケースを注文したのが今年の4月くらいだったので、実に5ヶ月越しの完成。\n\n所感\n\nずっとKinesisのような形の左右分離型キーボードが欲しくて、でも見つからなくてErgoDox EZを使っていたので、ようやく作ることできて大変満足している。\n使い勝手もKinesisと変わらず、不満だったあの大きさが解消されてもはやこれが”Endgame”でいいんじゃないか？　ってくらい。\nredditとimgurにも投稿ずみ。\n\nとりあえず自宅用と職場用で二台は必要なので、もう一つ作るときにできれば改善したい点は下記の通り\n\n\n  お椀型だから仕方ない部分はあるけど若干背が高い(今はパームレスト二枚重ねてる)ので、どうにかして低くできないか\n  改善したいというかどうにかしてトラックボールとか追加できないか\n  キースイッチはちゃんと接着する\n  スイッチ間のはんだ付けがめちゃくちゃめんどくさかったので、ポリウレタン線とか検討\n  TeensyやIO Expanderとの接続用ワイヤは全部端っこに付けちゃうと遊びがなくなって結構めんどいので、適度に分散させる\n\n\nってまあこれ全部やろうとするともはやそれはDactyl keyboardなのか？　って気もしますね\nこうやって沼にハマっていくのか…\n\n"
} ,
  
  {
    "title"    : "Let&#39;s Splitを作った話",
    "category" : "keyboard",
    "tags"     : " keyboard, Let's Split",
    "url"      : "/2017/08/29/letssplit-buildlog/",
    "date"     : "August 29, 2017",
    "excerpt"  : "Kinesis -&amp;gt; ErgoDox -&amp;gt; Let’s Split(NEW!)\n\nKinesisから数えて三台目のメカニカルキーボードで、初めての自作です。\n\nパーツ\n\n大体「格子配列で左右分離型の超コンパクトなキーボード “Let’s Split” を組み立てたよ」と「nicinabox/lets-split-guide」を参考にパーツを集めました。\nケースは参考サイトとは異なり、M2ネジ使うタイプの方を使ったのでそんな感じのリストになってます\n\n\n  \n    \n     ...",
  "content"  : "Kinesis -&amp;gt; ErgoDox -&amp;gt; Let’s Split(NEW!)\n\nKinesisから数えて三台目のメカニカルキーボードで、初めての自作です。\n\nパーツ\n\n大体「格子配列で左右分離型の超コンパクトなキーボード “Let’s Split” を組み立てたよ」と「nicinabox/lets-split-guide」を参考にパーツを集めました。\nケースは参考サイトとは異なり、M2ネジ使うタイプの方を使ったのでそんな感じのリストになってます\n\n\n  \n    \n      名称\n      値段\n      調達先\n    \n  \n  \n    \n      PCB\n      $8.99 x 2\n      MEHKEE\n    \n    \n      ケース\n      $40\n      Ponoko\n    \n    \n      Pro Micro\n      \\972 x 2\n      マイクロファン\n    \n    \n      タクトスイッチ\n      \\313\n      札幌貿易\n    \n    \n      ダイオード(1N4148)\n      \\100 x 2(100本)\n      秋月電子\n    \n    \n      TRRS Jack\n      \\125 x 2\n      DigiKey\n    \n    \n      TRRS Cable\n      \\700\n      Amazon\n    \n    \n      USB - MicroUSBケーブル\n      \\2463\n      Amazon\n    \n    \n      M2ネジ(6mm)\n      $3.49 x 2\n      Keebio\n    \n    \n      スペーサー\n      $3.49\n      Keebio\n    \n    \n      キースイッチ\n      \\832 x 5(50個)\n      ジェイダブルシステム\n    \n    \n      キーキャップ\n      1セット\n       \n    \n    \n      クッションゴム\n      \\373\n      Amazon\n    \n  \n\n\n送料はちょっと思い出せないのだけど、だいたいこんな感じ。\nちょっとアホやったなーって思うのは、海外の通販ショップを部品ごとに使い分けたこと。店によってはかなり送料かかるので、品揃えのいい店でまとめて購入したほうがいいです。\n\nケースはnooges/lets-split-v2-caseで配布されているものを使っています。どのファイルを使ったらいいのかちょっとわかりづらいんですが、sandwich-split.epsを使ってPonokoに依頼を出しました。\n\nUSBケーブルは、Pro Microのジャックがすぐ壊れそうで不安だったので、MacbookのMagsafe(もうないですけど…)っぽい感じで、抜き差しせずに使えるものを用意しました。\n\n制作について\n\n大体前掲のウェブサイトのとおりに作っています。\nあとはYoutubeでライブストリーミングしながら作ってる人を見つけたので、これも適宜確認。\n\n特に気をつけたのは、Pro Microの裏にあるキースイッチをつけるときです。\nキースイッチのピンとPro Microがくっついてショートするよー、って記述を何箇所かで見かけたので、キースイッチのはんだ付けが終わった後、できるだけピンを切って出っ張りを低くして、Pro Microと干渉しないようにしています。\n\nあとはTRRS Jackを裏表逆につけたりとかありましたけど、比較的スムーズに組み立てられたと思います。\n\n#レツプリ Pro Micro付けてファームウェアも焼いたけどスペーサーの長さ間違えたので今日はここまでです pic.twitter.com/maIEy5ymhS&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年8月21日\n\n\nPCBにもろもろはんだ付け完了したところ。\n\n余ってたキーキャップ使ったから高さがアレだけど、初めての #レツプリ 完成！ pic.twitter.com/gvd3zyklXI&amp;mdash; せーい@一万二千年後のイカ (@_yshrsmz) 2017年8月24日\n\n\n完成直後。\n\nキーマップ\n\n\n\n現状こんな感じ。\n最初はErgodox/Kinesisぽい感じにしようかとも思ったんですが、このサムクラスターがないキーボードでエンターキーとかを真ん中に持ってくるとスペースキーとの誤爆が激しくて諦めました。\n慣れの問題な気もするのでそのうちまた試すかもしれない。\n\n所感\n\n最初はDactyl Keyboardを作る前の予行練習的なノリで作り始めましたが、出来上がってみると結構愛着わきます。なにより小さくてかわいい。\n\nとはいえ、キー配置は二、三日ではまったくなれない(笑)\n\n気がつくとエンターキーのつもりでスペース押すし、左右矢印キーのつもりでCtrl/Altキー押すし、かと言ってErgoDox風にすると今度は左右矢印をCtrl/Altと間違えるし…\n普通のキーボードからの移行ならもっとスムーズだったと思います。\n\nまあこれは慣れが必要な部分もあると思うので時間が経つにつれちゃんと入力できるようになるでしょう。\n\n参考\n\n  格子配列で左右分離型の超コンパクトなキーボード “Let’s Split” を組み立てたよ\n  nicinabox/lets-split-guide\n  Livestream - The Board Podcast LIVE! - Building a Lets Split v2 Ortho Keyboard\n\n"
} ,
  
  {
    "title"    : "(Android) Architecture ComponentsのViewModelは如何にしてRotationを生き残るか",
    "category" : "programming",
    "tags"     : " android, java",
    "url"      : "/2017/05/19/how-viewmodel-retail-itself/",
    "date"     : "May 19, 2017",
    "excerpt"  : "TL;DL;\n\nretainInstance = trueなFragmentにキャッシュされているので、Activity/Fragmentが本当に殺されるまで生き残ることができる。\n\n\n\nGoogle I/O 2017で、Architecture Components という新しいライブラリ群が発表されました。\n\nLiveData, ViewModel, LifecycleObserver, LifecycleOwner, Roomといったこれらのライブラリは、開発者がより強固で、テスタブ...",
  "content"  : "TL;DL;\n\nretainInstance = trueなFragmentにキャッシュされているので、Activity/Fragmentが本当に殺されるまで生き残ることができる。\n\n\n\nGoogle I/O 2017で、Architecture Components という新しいライブラリ群が発表されました。\n\nLiveData, ViewModel, LifecycleObserver, LifecycleOwner, Roomといったこれらのライブラリは、開発者がより強固で、テスタブルで、かつメンテナンス性が高いアプリケーションを作るための手助けとなるべく作られています。\n\n今回はその中でもViewModelについて少し調べてみました。\n\nWhat is ViewModel?\n\n詳しい説明はViewModelのリファレンスに譲りますが、簡単に言うと「Activity/Fragmentのローテーション等による再生成をこえて状態を保持するためのコンポーネント」です。\n\n今までActivity/Fragmentのメンバ変数に保存していたような値や非同期処理をViewModelに書いておけば、Activity/Fragmentが再生成されたとしても値や非同期処理の状態が維持されてそのまま使えます。\n\nonSavedInstanceStateでいちいちBundleに詰め込んだりしなくてすみます。\n私自身はあまり使ったことがありませんが、AsyncTask等をいちいち書く必要がなくなります。\n\nでも、どうやって？\n\nHow does ViewModel retain itself?\n\n※これはGoogle I/O 2017で発表された1.0.0-alpha1時点での話です\n\nViewModelは下記のような感じで取得します。使う側のActivity/Fragmentではキャッシュから取得するとか新規作成するとか、そういうことを意識する必要はありません。\n\nFooViewModel viewModel = ViewModelProviders.of(fragment).get(FooViewModel.class);\n\n\nViewModelProviders#ofにはActivityかFragmentを渡すことができます。一つ注意することがあって、Fragmentを渡すときはfragment.getActivity() != nullでなければならず、detachされているFragmentでは使うことができません。\n\nViewModelProviders#ofはActivity/Fragmentのみを引数に取るものと、Activity/Fragmentに加えてViewModelのファクトリクラスを引数に取るものがあります。\n\nファクトリクラスを渡さない場合は引数なしのコンストラクタを呼び出してViewModelをインスタンス化するようです。\n\nまた、ViewModelの代わりにAndroidViewModelというinterfaceを実装すると引数がApplicationのコンストラクタを使う模様です。\n\nDagger等のDIライブラリを使う場合はファクトリクラスを使うことになりそうです。\n\nさて、ViewModelProviderはこんな感じでインスタンス化されています。\n\n// ViewModelProviders.java\npublic static ViewModelProvider of(@NonNull Fragment fragment) {\n    FragmentActivity activity = fragment.getActivity();\n    if (activity != null) {\n        throw new IllegalArgumentException(&quot;Can&#39;t create ViewModelProvider for detached fragment&quot;);\n    } else {\n        initializeFactoryIfNeeded(activity.getApplication());\n        return new ViewModelProvider(ViewModelStores.of(fragment), sDefaultFactory);\n    }\n}\n\n\n呼び出されているコンストラクタのシグネチャはこんな具合です。\n\nViewModelProvider(ViewModelStore store, ViewModelProvider.Factory factory)\n\n\nViewModelStoreとかいかにもあやしい名前のクラスが引数にあるので詳しく見てみましょう。\nViewModelStores#ofの中を見てみるとこんな感じ\n\npublic static ViewModelStore of(Fragment fragment) {\n    return HolderFragment.holderFragmentFor(fragment).getViewModelStore();\n}\n\n\nHolderFragmentなるものが出てきました。\n\nコードを見てみると、コンストラクタでsetRetainInstance(true);を呼んでいます。retainInstance = trueにすると親Activity/Fragmentが再生成されても対象のFragmentは生き残るようになるので、この仕組みを使ってViewModelをActivity/fragmentの再生成後も使えるようにしているようです。\n\nViewModelStoreはこのHolderFragmentで管理されています。\n\nViewModelStoreの実態はHashMap&amp;lt;String, ViewModel&amp;gt;です。ここで基本的にはViewModelのクラス名をキーとしてViewModelのインスタンスを管理しています。\n\nHolderFragmentはActivity/Fragment毎に作られるので、一つのViewModelStoreが管理するのは自HolderFragmentの直接の親Activity/FragmentのViewModelだけです。\n\nクラス名がキーなので同一Activity内、同一Fragment内で同じViewModelを複数使うことはできなそうな感じもしましたが、よくよく見ると外部からキーを指定できるgetメソッドのオーバーロードも用意されていたので一応そういうユースケースも考慮されていそうです。\n\nViewModelの保存周り、ホントはもうちょっとゴニョゴニョしてるんだけど概要としてはこんな感じです。とてもわかりやすいコードなのでぜひ一読してみてください。\n\n終わりに\n\nここ一年くらい触ってるyet another FragmentのConductorがController(Fragmentのようなもの)をキャッシュするのにやっぱりretainInstance = trueなFragmentを使ってて、Architecture Componentsの発表を聞いたときに同じようなことやってるのかなーって思ってたら案の定でちょっとニンマリしてしまった。\n\n特に黒魔術してるわけでもなく、既存の仕組みをうまく使ってるだけなのでこの仕組み自体が黒歴史になることはなさそう。\n\nViewModelはActivity/Fragmentへの参照を持つことは推奨されてないので必然的にユニットテストしやすいコードになっていきそう。\n\nとはいえViewModelだけで完全にテスタブルになるわけではないし、ViewModelはActivity/Fragmentの再生成をこえた状態のキャッシュに一つの道を示しただけなので、これですべてが解決するわけではない。\n\n今までの知見と組み合わせつつ、幸せになれるコードを書けるようやっていきましょう、ということでざっくりとしたコードリーディングを終わります。\n"
} ,
  
  {
    "title"    : "(Ubuntu) /bootの容量がなくなった時にすること",
    "category" : "programming",
    "tags"     : " til, ubuntu",
    "url"      : "/2017/04/05/things-to-do-when-ubuntu-boot-disk-is-full/",
    "date"     : "April 5, 2017",
    "excerpt"  : "[Ubuntu] /bootの容量がなくなった時にすること\n\nTL;DR\n\n古いカーネルを削除する\n\nすること\n\n\n  現在のカーネルを確認する\n\n\n$ uname -r\n\n\n\n  インストール済みの古いカーネルを確認する\n\n\n$ dpkg -l linux-{image,headers}-&quot;[0-9]*&quot; | awk &#39;/^ii/{ print $2}&#39; | grep -v -e `uname -r | cut -f1,2 -d&quot;-&quot;` | grep -e &#39;[0-9]&#39;\n\n\n上記コマン...",
  "content"  : "[Ubuntu] /bootの容量がなくなった時にすること\n\nTL;DR\n\n古いカーネルを削除する\n\nすること\n\n\n  現在のカーネルを確認する\n\n\n$ uname -r\n\n\n\n  インストール済みの古いカーネルを確認する\n\n\n$ dpkg -l linux-{image,headers}-&quot;[0-9]*&quot; | awk &#39;/^ii/{ print $2}&#39; | grep -v -e `uname -r | cut -f1,2 -d&quot;-&quot;` | grep -e &#39;[0-9]&#39;\n\n\n上記コマンドで出てきたリストに、現在のカーネルが含まれないことを確認\n\n\n  apt-getでpurge\n\n\n2で得た一覧をapt-get purgeに食わせる\n\ndpkg -l linux-{image,headers}-&quot;[0-9]*&quot; | awk &#39;/^ii/{ print $2}&#39; | grep -v -e `uname -r | cut -f1,2 -d&quot;-&quot;` | grep -e &#39;[0-9]&#39; | xargs sudo apt-get -y purge\n\n\n以上。\n\n\n参考\n\n  How do I free up more space in /boot? - Ask Ubuntu\n\n\n"
} ,
  
  {
    "title"    : "2016年を振り返って",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2016/12/31/lookingback-2016/",
    "date"     : "December 31, 2016",
    "excerpt"  : "2016年もあと一時間半くらいですし、振り返りなどやります。\n\n仕事\n\n今年は主に改善業務をやっていました。\n\n大体下記のような感じです\n\n\n  CIでAndroidLint/ChecyStyleかける\n  モデルクラスの大改修\n    \n      APIリクエスト周りの処理をモデルクラスから切り出す\n      Realm周りの処理をモデルクラスから切り出す\n      モデルクラスが互いに依存しあわないようにユースケース層を作る\n      テスト、テスト、そしてテスト\n    \n ...",
  "content"  : "2016年もあと一時間半くらいですし、振り返りなどやります。\n\n仕事\n\n今年は主に改善業務をやっていました。\n\n大体下記のような感じです\n\n\n  CIでAndroidLint/ChecyStyleかける\n  モデルクラスの大改修\n    \n      APIリクエスト周りの処理をモデルクラスから切り出す\n      Realm周りの処理をモデルクラスから切り出す\n      モデルクラスが互いに依存しあわないようにユースケース層を作る\n      テスト、テスト、そしてテスト\n    \n  \n\n\nモデルクラスがAPIリクエストをすればDBアクセスもして、モデルクラスが別のモデルクラスをメンバー変数に持ってたり…と結構マッチョな感じになっていました。\n\nそこで、単一責務を意識してAPIリクエストをするクラスやDBアクセスするクラスを作り、モデルクラスはそれらを相互に橋渡しするだけのクラスにしました。最近流行りのレイヤード・アーキテクチャってやつです。\n\nまた、モデルクラスが互いに依存せず、それぞれの役割に徹するためにユースケースクラスを用意しました。モデルクラス間で行ったり来たりするような処理はここに書いていく感じです。\nここも(ユースケースクラスと言うくらいですから)単一責務を意識して、一つのユースケースクラスが複数の仕事をしないように心がけてます。\n\nあとはリファクタリングしたところはしっかりテストを書いてました。弊社アプリのテストは儂が育てた、といってもあながち間違いではないですねｗ\nRealm周りは無理やりバックグラウンドスレッドでRxできるようにしているんですが、まあ無理やりなだけあって限界が来ています。今後Realmの公式Rxサポートに書き換えるにあたってこのテスト達が役に立つはず…\n\n来年もしばらくはモデルクラスのリファクタリングをしてるんでしょうが、View周りも課題が山積みなので早いうちに手をつけたいです。\n\n個人\n\n\n  #write_code_everyday\n  LicenseAdapter\n  Simple Preferences\n  Monotweety\n\n\n\n\n今年の実績はこんな感じです。\n\ncontributions: 3650\nlongest streak: 371\n\n去年の9月あたりから意識して毎日コード書くようにしてました。上記のグラフ自体は仕事のコードも含めたものですが、毎日なにかしら自分のコードも書くようにしてます。\n\nたとえ一日一時間だったとしても、毎日続けていれば結構な量になります。365日続けてれば365時間ですし、まあそんだけやってれば何かしら成果物できます。\n\nそんなわけで今年はライブラリ2個とアプリ１個が成果物です。\n\nLicenseAdapterはOSSライセンスを表示するRecyclerView用のAdapterです。\n今のところライセンス管理は自分でやらなきゃなのでGradle plugin書いてライセンス一覧のjsonファイル出力したいなー、とかそんな感じ。\n\nSimple PreferencesはSharedPreferences周りのコードを自動生成してくれるライブラリです。Annotation Processorの秀作として作りました。”Simple~”なんてエンジニアにあるまじき名前をつけてしまったのはちょっと今でも後悔してるんですが、まあわりとシンプルにまとまってると思います。\nAnnotation Processor結構面白いので来年も何かしら作りたい。\n\nMonotweetyは通知エリアからツイートするだけのシンプルなTwitterクライアントです。去年のOmnitweetyに続き、Twitterをちょっと便利にするアプリシリーズ。\nKotlin使ってみたり、ConductorでViewベースFragmentレスで書いてみたりいろいろ実験しながら書いてました。Kotlinはめちゃくちゃ書きやすかったので来年はKotlinで書く仕事したいですね。\nMonotweetyのブログエントリはこちら\n\n\nとりあえず今年はこんな感じでした。\n\n来年もいろいろアウトプットがんばります。\n\n良いお年を。\n"
} ,
  
  {
    "title"    : "repeatWhenでfilterを使ってもonCompletedは呼ばれない",
    "category" : "programming;",
    "tags"     : " rxjava, java, til",
    "url"      : "/2016/12/05/repeatwhen-filter-takewhile/",
    "date"     : "December 5, 2016",
    "excerpt"  : "掲題の通りです\n\nTL;DR\n\nObservable#repeatWhen使って複雑な繰り返し判定するときはObservable#filterじゃなくてObservable#takeWhileを使うとonCompletedまで呼ばれる\n\n\n\n大量のデータをローカルに同期するAPIがあって、ページングの要領で複数回APIを叩いてすべてのデータを同期するとします。\nこんな感じのコードなら動きます。\n\nboolean isLoading = false;\n\npublic Completable ...",
  "content"  : "掲題の通りです\n\nTL;DR\n\nObservable#repeatWhen使って複雑な繰り返し判定するときはObservable#filterじゃなくてObservable#takeWhileを使うとonCompletedまで呼ばれる\n\n\n\n大量のデータをローカルに同期するAPIがあって、ページングの要領で複数回APIを叩いてすべてのデータを同期するとします。\nこんな感じのコードなら動きます。\n\nboolean isLoading = false;\n\npublic Completable sync() {\n    return Observable.defer(() -&amp;gt; {\n        if (isLoading) {\n          return Observable.empty();\n        }\n        isLoading = true;\n        return syncData() \n    })\n        .repeatWhen(observable -&amp;gt; {\n            return observable.flatMap(aVoid -&amp;gt; isSyncCompleted().first())\n                .takeWhile(completed -&amp;gt; !completed)\n                .doOnCompleted(() -&amp;gt; Timber.d(&quot;sync completed&quot;)\n                .doOnNext(completed -&amp;gt; Timber.d(&quot;should request next data&quot;);\n        })\n        .doOnCompleted(() -&amp;gt; isLoading = false)\n        .toCompletable();\n}\n\n\nこれ最初気づかなくて悩んだのですが、ここでtakeWhileの代わりにfilterを使うとObservable#doOnCompletedが呼ばれません。\n\nboolean isLoading = false;\n\npublic Completable sync() {\n    return Observable.defer(() -&amp;gt; {\n        if (isLoading) {\n          return Observable.empty();\n        }\n        isLoading = true;\n        return syncData() \n    })\n        .repeatWhen(observable -&amp;gt; {\n            return observable.map(aVoid -&amp;gt; isSyncCompleted())\n                // これだとdoOnCompletedが呼ばれない\n                .filter(completed -&amp;gt; !completed)\n                .doOnCompleted(() -&amp;gt; Timber.d(&quot;sync completed&quot;)\n                .doOnNext(completed -&amp;gt; Timber.d(&quot;should request next data&quot;);\n        })\n        .doOnCompleted(() -&amp;gt; isLoading = false)\n        .toCompletable();\n}\n\n\nなのでこのコードだとisSyncCompletedがtrueを返したとしてもisLoadingが更新されず、再度sync()を呼ばれた時に必ずreturn Observable.empty()のルートに入ってしまいます。\n\nObservable#repeatWhenのjavadocを読むと、以下のように書かれています。\n\n\n  Returns an Observable that emits the same values as the source Observable with the exception of an {@code onCompleted}. An {@code onCompleted} notification from the source will result in the emission of a {@code void} item to the Observable provided as an argument to the {@code notificationHandler} function. If that Observable calls {@code onComplete} or {@code onError} then {@code repeatWhen} will call {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will resubscribe to the source observable.\n\n\nなるほど\n\n\n  An {@code onCompleted} notification from the source will result in the emission of a {@code void} item to the Observable provided as an argument to the {@code notificationHandler} function.\n\n\n元のObservableでonCompletedが呼ばれると、notificationHandlerが渡してくるObservableのonNextが呼ばれるようです。\n\n\n  If that Observable calls {@code onComplete} or {@code onError} then {@code repeatWhen} will call {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will resubscribe to the source observable.\n\n\nonCompleteかonErrorが呼ばれないとresubscribeしてしまうようです。\n\nいつ自動的にonCompletedになるのか、という記述がありませんし、notificationHandlerの引数のObservableは、文字通り元のObservableでonCompletedが呼ばれた時にVoidをemitするだけのObservableなのでしょう。とりあえずonCompletedが呼ばれるようにfilterをやめてtakeWhileに変えてみたら意図した通りの動作になった次第です。\n\nif文で分岐してempty返したりしてもイケるとは思いますが、とりあえずはこんな感じで。\n\n\n参考:\n\n\n  https://github.com/ReactiveX/RxJava/issues/2889\n  http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)\n\n"
} ,
  
  {
    "title"    : "CircleCIでDocker v1.10.0を使う",
    "category" : "programming;",
    "tags"     : " docker, circleci, til",
    "url"      : "/2016/11/25/docker-v1-1-0-on-circleci/",
    "date"     : "November 25, 2016",
    "excerpt"  : "※ CircleCI v2.0でDockerに完全対応したので、以下の情報は古いです\n\nCircleCIに入ってるDocker、ちょっとバージョンが古いみたいでdocker runとかdocker pullとかするとhub.docker.comではなくdocker.ioに見に行ってしまいます。\n\nで、docker.ioはすでに廃止されているのでdocker.comにリダイレクトされ、docker.comの下に指定したimageがあるかどうか確認してしまうので、下記のようなエラーになってしま...",
  "content"  : "※ CircleCI v2.0でDockerに完全対応したので、以下の情報は古いです\n\nCircleCIに入ってるDocker、ちょっとバージョンが古いみたいでdocker runとかdocker pullとかするとhub.docker.comではなくdocker.ioに見に行ってしまいます。\n\nで、docker.ioはすでに廃止されているのでdocker.comにリダイレクトされ、docker.comの下に指定したimageがあるかどうか確認してしまうので、下記のようなエラーになってしまいます。\n\nPulling repository docker.io/yshrsmz/docker-whale\nTag latest not found in repository docker.io/yshrsmz/docker-whale\n\n\nで、どうにか新しいDocker使いたいな〜と思っていろいろ試してたら、公式フォーラムで発見しました。\n\nDocker 1.10.0 is available(Beta)\n\n記事自体は2016年2月のもので、これを書いてる時点でもう9ヶ月前です。\nただ、現状これより新しいものは見当たらないのでCircleCIで使えるDockerは2016年11月現在v1.10.0が最新のようです。\n\ncircle.yml的にはこんな感じ\n\nmachine:\n  pre:\n    - curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0\n  services:\n    - docker \n\nパラメータでバージョン指定してるから1.12.3とか指定したら新しいの使えるかな…？って思ったら無理でした。ファイル見たら1.10.0の分岐しかなかったです。\n\nCircleCIではDockerにパッチを当てて使っているようですが、v1.10.0で使っていたLXC exec driverが削除されてしまったのでアレなことになっているみたいです。\n"
} ,
  
  {
    "title"    : "通知エリアからツイートするAndroidアプリ、Monotweetyを公開した(コードもあるよ)",
    "category" : "programming;",
    "tags"     : " android, twitter, monotweety",
    "url"      : "/2016/11/14/monotweety-android-released/",
    "date"     : "November 14, 2016",
    "excerpt"  : "\n\n掲題のとおり、アプリをGoogle Play Storeに公開しました。 \n今回はコードもGitHubで公開してます。Apache v2です。\n\n名前は”Monotweety”。「モノツイーティ」と読みます。\n\n機能はホントにシンプルで、「通知エリアからツイートする」だけです。\n\n実際のところ通知エリアからツイートできるのはAndroid 7.0以降の端末だけで、それ未満の端末では通知をタップすると編集ダイアログが表示されます。\n\n\n  通知から\n\n\n\n\n\n  直でツイート\n\n\n\n\n\n...",
  "content"  : "\n\n掲題のとおり、アプリをGoogle Play Storeに公開しました。 \n今回はコードもGitHubで公開してます。Apache v2です。\n\n名前は”Monotweety”。「モノツイーティ」と読みます。\n\n機能はホントにシンプルで、「通知エリアからツイートする」だけです。\n\n実際のところ通知エリアからツイートできるのはAndroid 7.0以降の端末だけで、それ未満の端末では通知をタップすると編集ダイアログが表示されます。\n\n\n  通知から\n\n\n\n\n\n  直でツイート\n\n\n\n\n\n  Android 7.0未満ではダイアログから\n\n\n\n\nモチベーション\n\n\n  ひとりごとみたいにツイートすることが多いのでツイート特化型アプリがほしい\n  既存の通知エリアからツイートできるアプリは古くてメンテされてるか不明なものばかり\n  今風のかっこいいデザインのアプリがほしい\n  Android NでDirect Reply(通知から直で返信できる機能)が追加\n-&amp;gt; あれ、これ使えるんじゃ…？\n\n\nという感じ。\n\n要件は下記の通り\n\n\n  通知エリアからツイートできること\n  文字数超過したら編集できること\n\n\nで、この他にお遊びみたいなものだけどいわゆる「連ツイ(in reply toでツイートをつなげる)」機能もつけてみました。\n\nDirect Replyで用意されているのはカスタマイズができない入力エリアなので、文字数チェックは送信ボタンを押した後に行っていて、超過していた場合は編集用の画面が立ち上がる作りになっています。\n\n今回はだいたいコーディングだけで102時間くらいかかったらしい(wakatime調べ)。\n\nアプリ名の由来？\n\n“Monochrome”ではなく”Monologue”のmonoです。\n最初は”Monologue”で作ろうとしたけど案の定すでにTwitterに登録済みのアプリがありました…\nOmnitweetyというアプリもリリースしてますが、特に「Omni - Mono」で対になる、とか特に狙ったわけではないです。\n\n※ここから下は技術者向け ———-\n\n使ったライブラリとか\n\n網羅的なものはbuild.gradle見てもらうとして、主要なものを軽く紹介します。\n\nKotlin\n\n最近流行りのアレ。\n拡張関数とかdata classとか、とても便利です。\nあとリスト操作関数が充実しててめちゃくちゃ捗ります。\n\nConductor\n\nViewベースのアプリケーションを作るためのフレームワーク。\n数年前にSquareがFragment使わないぞ！って記事をだしていましたが、その流れのライブラリですね。\n\nFragment使いたくないけどどうすんの？って言われた時に候補としてまず挙がるのはSquare製のMortar/Flowだと思いますが、こちらのConductorはMortar/Flowよりもかなりシンプルな作りになっています。\n\nMortar/FlowはDaggerと一緒に使う前提で作られてるような感じで、SystemServiceにカスタムのServiceを追加したりいろいろ前準備が多くて「なるほどわからん」状態だったけれども、こちらは完全に”better fragment”にフォーカスしているような印象です。\n\nDaggerだとかMVPだとかMVVMとかそういうのは開発者側で勝手にやってくれという方針なのでライブラリとして迷いどころは少なく、とても扱いやすかったです。なにより、サンプルが豊富で非常に助かりました。\n\nちなみにLollipop以上だったらちゃんと画面間のShared Element Transitionも行えます。\n\nDagger2\n\nとてもイケてるDIライブラリ。そういえば本家SquareのDagger1はdeprecatedになってましたね。\n今回のComponent構成はこんな感じ。\n\nAppComponent ─ UserComponent ┬ SettingComponent\n  │                          └ ComposeStatusComponent\n  │\n  └ ActivityComponent ┬ SplashComponent\n                      └ LoginComponent\n\n\nグローバルなAppComponentの下にユーザ毎に作られるUserComponentがあります。\nユーザ情報が必要な各画面のComponentはUserComponentを親に持ちます。\nユーザ情報が必要ない画面のComponentはActivityComponentを親に持ちます。\n\nここ、図の上ではSettingComponent/ComposeStatusComponentはActivityComponentに依存してないように見えますが、実はActivityComponentで管理されているインスタンスを、Componentに渡すModule経由で引き回してたりします。\n\nこれはActivityがUserComponentの作成より前(ログイン確認より前)に作られるのが原因です。\nDaggerでは複数のScoped Componentを親に持つことができないので、苦肉の策としてこのようにActivityComponentで管理されているインスタンスを渡す形にしました。\nうまいやり方があればいいのですが。\n\nStorIO\n\nSQLiteをリアクティブに扱うライブラリ。\nよりいろいろやってくれるSQLbrite、って感じでしょうか。\nNot ORM。\n\nモデルとクエリの結果をマッピングするリゾルバクラスを生成するアノテーションプロセッサも用意されてますが、Kotlinはサポートされてないので手動で書く必要があります。\n\n今回実はSQLite使う必要特になかったのですが、アーキテクチャのデモ的な側面もあったのでSQLite入れてます。\nGitHub上にAndroidアプリに様々なアーキテクチャ適用してみたよ系のデモレポジトリって結構あるのですが、だいたいAPI通信とメモリキャッシュまでで止まっててじゃあその先どう考えてるの？　って思うことが多かったので使ってみた次第。\n\nともあれ、StorIOはAPIもきれいでわかりやすいので、リアクティブに使えるSQLiteライブラリを探している方は試してみてはいかがでしょう。\n\nアーキテクチャ\n\n前作のOmnitweetyでは、Android Clean Architectureを採用しました。ほとんど写経です。\nMonotweetyではAndroid Clean Architectureを踏襲しつつも諸々シンプルに再構成しています。\nたとえばDataSource周りのファクトリクラスを廃止してみたり、機能ごとのパッケージ構成にしてみたり。\nDataSourceの差し替えとか実際にアプリの実行中に発生することなんてほぼないので、まあ必要ないよねー、という判断です。\n\nあ、あとView周りに関してはMVPではなく、MVVMっぽいアーキテクチャとなっています。\n開発が佳境だった頃にKotlinのAndroid Studio PluginとDataBindingの相性が非常に悪かったので今回は地道にbinding処理書いてますが、Kotlin 1.0.5でだいぶ改善したらしいのでそのうち書きなおすのもやってみたい。\n\nアイコン\n\nアイコンはOmnitweetyと同様、99designsを使っています。\n今回はコンペではなく、Omnitweetyのコンペの時に最後まで悩んで落としてしまったデザイナーさんにお願いしました。\n前回同様とてもかわいらしいアイコンが仕上がって満足しています。\n\nこちらからは以上です。\n\n参考:\n\nPlayStoreリンク: https://play.google.com/store/apps/details?id=net.yslibrary.monotweety\nGitHubリンク: https://github.com/yshrsmz/monotweety\nTwitterにURLを共有するAndroidアプリ、Omnitweetyを公開した: http://yslibrary.net/2015/11/10/omnitweety-andrid-released-share-url-twitter/\n"
} ,
  
  {
    "title"    : "go getでprivate repositoryを取得するには",
    "category" : "programming;",
    "tags"     : " golang, til",
    "url"      : "/2016/10/15/go-get-private-repository/",
    "date"     : "October 15, 2016",
    "excerpt"  : "$ go get github.com/some/private/repository\n\n\nって普通にやってももちろん取れず。\n\n~/.netrcに設定を追加する必要がある。\n\nmachine github.com\n  login {your_github_username}\n  password {github_token}\n\n\ngithub_tokenはgithubの設定画面から取得できるトークンのこと。\n\n~/.netrcの権限を600に変えたら、あとはprivate reposit...",
  "content"  : "$ go get github.com/some/private/repository\n\n\nって普通にやってももちろん取れず。\n\n~/.netrcに設定を追加する必要がある。\n\nmachine github.com\n  login {your_github_username}\n  password {github_token}\n\n\ngithub_tokenはgithubの設定画面から取得できるトークンのこと。\n\n~/.netrcの権限を600に変えたら、あとはprivate repositoryでもgo getできた。\n"
} ,
  
  {
    "title"    : "Recovery/FastbootモードのAndroid端末をUbuntuに認識させる",
    "category" : "programming;",
    "tags"     : " android, ubuntu",
    "url"      : "/2016/09/15/connect-recoverymode-android-ubuntu/",
    "date"     : "September 15, 2016",
    "excerpt"  : "普通に起動してるぶんには何もしなくてもadb devicesで認識してくれてたけど、OTA zipをsideloadしようと思ってリカバリモードで起動したらPermission 普通に起動してるぶんには何もしなくてもadb devicesで認識してくれてたけど、OTA zipをsideloadしようと思ってリカバリモードで起動したらPermission denied`的なエラーが出て認識してくれなかった。\n\n調べてみたらudevの設定が必要なようだった。\n手順としては下記の通り。\n\n1. ...",
  "content"  : "普通に起動してるぶんには何もしなくてもadb devicesで認識してくれてたけど、OTA zipをsideloadしようと思ってリカバリモードで起動したらPermission 普通に起動してるぶんには何もしなくてもadb devicesで認識してくれてたけど、OTA zipをsideloadしようと思ってリカバリモードで起動したらPermission denied`的なエラーが出て認識してくれなかった。\n\n調べてみたらudevの設定が必要なようだった。\n手順としては下記の通り。\n\n1. リカバリモードで起動\n\n$ adb reboot recovery\n\n\n2. lsusbで端末のidを取得\n\n$ lsusb\n&amp;gt; Bus 002 Device 009: ID 18d1:4ee2 Google Inc. Nexus 4 (debug)\n\nこの場合、18d1がidVendorで、4ee2がidProduct。\n\n3. 上記手順でわかったidで/etc/udev/rules.d/51-android.rulesをつくる\n\nSUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4ee2&quot;, MODE=&quot;0666&quot;, GROUP=&quot;usergroup&quot;\n\n\nGROUPには適当なUnixグループを指定すること。GROUPの代わりにOWNER={ユーザ名}でもいいみたい。\n\n4. chmodする\n\n$ chmod a+r /etc/udev/rules.d/51-android.rules\n\n\n以上。\n\n参考:\n\n\n  ハードウェア端末上でアプリを実行する\n  ADB can discover devices but not fastboot\n\n"
} ,
  
  {
    "title"    : "続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする",
    "category" : "programming;",
    "tags"     : " android, realm, rxjava",
    "url"      : "/2016/07/21/how-to-close-realm-upon-unsubscribe-on-same-thread/",
    "date"     : "July 21, 2016",
    "excerpt"  : "前回の続きです。\n\nObservable#usingを使うと、Observableのunsubscribe時にRealmインスタンスを同じスレッド上で閉じることができるよ、と前回の記事で書きました。\n\n結論から言うと前回のコードだけでは足りませんでした。\n大体の場合において同じスレッド上でcloseされるのですが、たまに別スレッドで閉じられてしまう、ということがわかりました。\n\nTwitter上でうんうん言いながらRxJavaのコードを読みながら再現するコードを書こうとしてたら、@hydr...",
  "content"  : "前回の続きです。\n\nObservable#usingを使うと、Observableのunsubscribe時にRealmインスタンスを同じスレッド上で閉じることができるよ、と前回の記事で書きました。\n\n結論から言うと前回のコードだけでは足りませんでした。\n大体の場合において同じスレッド上でcloseされるのですが、たまに別スレッドで閉じられてしまう、ということがわかりました。\n\nTwitter上でうんうん言いながらRxJavaのコードを読みながら再現するコードを書こうとしてたら、@hydrakecatさんが捕捉してくださり、さくっと再現させてくれました。\n\nやはり頑張ってRxJavaとRealmのコードを読み込むしかない&amp;mdash; せーい(yshrsmz) (@_yshrsmz) 2016年7月13日\n\n@_yshrsmz うーん、再現したかも。とりあえず、このコードを何回も実行するとたまに main スレッドでクローズされますね。https://t.co/EHda8VQeEh&amp;mdash; Hiroshi Kurokawa (@hydrakecat) 2016年7月13日\n\n最初は毎回再現するわけじゃないしバグなのかな？　と思っていたのですが、どうやらObservable#subscribeOnはunsubscribeするスレッドを関知しないようでした。\n\n@_yshrsmz ううん、微妙なんですよね。subscribeOn() の JavaDoc には unsubscribe のスケジューラについて一言も書かれていませんし……。もうちょっとドキュメントとコードを当たってみます。&amp;mdash; Hiroshi Kurokawa (@hydrakecat) 2016年7月13日\n\n@hydrakecat @_yshrsmz unSubscribeOnでスレッド明示すればいいって話ではない感じですか？&amp;mdash; ちばっちんぐ (@chibatching) 2016年7月13日\n\nじゃあObservable#unsubscribeOn指定したらいいじゃん？　というわけにもいきません。Schedulers.io()等のRxJavaが標準で用意しているスケジューラは、実行時にスレッドプールから適当なスレッドを渡すためです。\n\n@_yshrsmz @chibatching あ、駄目だ。Shcedulers.io() とか使うとスレッドが一緒になる保証ないですね……。自分でシングルスレッドのスケジューラ作らないといけないかも。&amp;mdash; Hiroshi Kurokawa (@hydrakecat) 2016年7月13日\n\nシングルスレッドのスケジューラだとRealm関連の操作が全部直列になってしまうしパフォーマンス的に良くないよな〜と思っていろいろ考えたのですが、妙案は思いつかず。\n最後の手段、ということでRxJavaのGithubレポにissueを投げてみました。\n\nQuestion about Observable.using’s resourceFactory &amp;amp; disposeAction #4197 ReactiveX/RxJava\n\n回答は以下のような感じでした。\n\n\n  Hi.\n\n  1) Yes. The operator doesn’t deal with scheduling.\n2) Not with subscribeOn; try unsubscribeOn but you need a single-threaded Scheduler as all the default ones will give you different threads most likely.\n\n\nやはり、@hydrakecatさんと@chibatchingさんがおっしゃっていたようにObservable#unsbscribeOnとシングルスレッドのスケジューラを合わせるのが正攻法のようです。\n\n最終的な解決策は上述のissueにも書きましたが、複数のシングルスレッドスケジューラを順番に使い回す、という形になりました。\n\npublic class RealmSchedulerPool {\n\n    private final static String PREFIX = &quot;RealmScheduler-&quot;;\n\n    private final static List&amp;lt;Scheduler&amp;gt; SCHEDULERS = new ArrayList&amp;lt;Scheduler&amp;gt;(){\n        {\n            add(Schedulers.from(Executors.newSingleThreadExecutor(new RxThreadFactory(PREFIX + &quot;1-&quot;))));\n            add(Schedulers.from(Executors.newSingleThreadExecutor(new RxThreadFactory(PREFIX + &quot;2-&quot;))));\n            add(Schedulers.from(Executors.newSingleThreadExecutor(new RxThreadFactory(PREFIX + &quot;3-&quot;))));\n        }\n    };\n\n    private final static AtomicLong COUNT = new AtomicLong(0L);\n\n    private RealmSchedulerPool() {\n        // no-op\n    }\n\n    public static Scheduler get() {\n        long current = COUNT.getAndIncrement();\n        return SCHEDULERS.get((int) (current % 3)); // 3 is the size of SCHEDULERS\n    }\n}\n\n\npublic static &amp;lt;T&amp;gt; Observable.Transformer&amp;lt;T, T&amp;gt; doInRealmScheduler() {\n  return tObservable -&amp;gt; {\n    Scheduler s = RealmSchedulerPool.get();\n    return tObservable\n            .subscribeOn(s)\n            .unsubscribeOn(s);\n  };\n}\n\n\nこれを前回のコードと合わせて下記のように使います。\n\nasObservable()\n  .compose(doInRealmScheduler())\n  .map(realm -&amp;gt; realm.where(Foo.class).findAll());\n\n\n助言をくださった@hydrakecatさん、@chibatchingさん、ありがとうございました。\n"
} ,
  
  {
    "title"    : "RealmインスタンスをObservableのunsubscribe時にcloseする",
    "category" : "programming;",
    "tags"     : " android, realm, rxjava",
    "url"      : "/2016/07/08/how-to-close-realm-upon-unsubscribe/",
    "date"     : "July 8, 2016",
    "excerpt"  : "※2016/07/21更新: このコードだけだと必ずしも同じスレッドでcloseされないことがわかりました。”続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする“もご確認ください。\n\nRealmはRxJavaを公式でサポートしていますが、公式のRxサポートが動くのはUIスレッドなど、Looperのあるスレッドだけです。\n\nそこでRealmObjectをObservableで返すメソッドを自前で書いたりするわけですが、Rx使...",
  "content"  : "※2016/07/21更新: このコードだけだと必ずしも同じスレッドでcloseされないことがわかりました。”続:Realmインスタンスを、Observableのunsubscribe時に同じスレッドでunsubscribeする“もご確認ください。\n\nRealmはRxJavaを公式でサポートしていますが、公式のRxサポートが動くのはUIスレッドなど、Looperのあるスレッドだけです。\n\nそこでRealmObjectをObservableで返すメソッドを自前で書いたりするわけですが、Rx使ってるとメソッドがどのスレッドから呼ばれるかわからないので、Realmをどこでcloseしたらいいかわからなくなりがちです。\n\nそんな状態だとclose漏れのRealmインスタンスが発生して、OutOfMemoryExceptionが発生してしまいます。\n\n最初はdoOnUnsubscribeでやればいいじゃん？って思ってたんですが、doOnUnsubscribeはObserverのスレッドで呼ばれるみたいで、スレッド違いでエラーになってしまいます。\n\npublic Obseravble&amp;lt;Realm&amp;gt; asObservable() {\n  return Observable.defer(new Func0&amp;lt;Observable&amp;lt;Realm&amp;gt;&amp;gt;() {\n    @Override\n    public Observable&amp;lt;Realm&amp;gt; call() {\n      Realm realm = Realm.getDefaultInstance();\n      return Observable.just(realm)\n        .doOnUnsubscribe(new Action0() {\n            @Override\n            public void call() {\n              // asObservable()\n              //   .subscribeOn(io())\n              //   .flatMap(ream -&amp;gt; realm.where(Note.class).find().getTitle())\n              //   .observeOn(mainThread())\n              //   .subscribe(...)\n              // こんな感じで書くとここはメインスレッドになってしまう→エラーでcloseできない\n              realm.close();\n            }\n        });\n    }\n  });\n}\n\n\nいろいろ調べてみたら、Observableのライフサイクルに合わせてリソースを管理するためのオペレータがありました。\n\nObservable#usingといいます。\nこれを使って下記のようなコードを書き試してみたところ、無事subscribeOnしたスレッドでclose処理が実行されました。\n\npublic Obseravble&amp;lt;Realm&amp;gt; asObservable() {\n  Observable.using(\n    new Func0&amp;lt;Realm&amp;gt;() {\n      @Override\n      public Realm call() {\n        // initialize resource\n        return Realm.getDefaultInstance();\n      }\n    },\n    new Func1&amp;lt;Realm, Observable&amp;lt;? extends Realm&amp;gt;&amp;gt;() {\n      @Override\n      public Observable&amp;lt;? extends Realm&amp;gt; call(Realm value) {\n        // create observable using realm\n        return Observable.just(value);\n      }\n    },\n    new Action1&amp;lt;Realm&amp;gt;() {\n      @Override\n      public void call(Realm realm) {\n        // dispose\n        realm.close();\n      }\n    });\n}\n\n\nこれを使って、あとはちゃんとunsubscribeされるよう気をつけていればRealmインスタンスのclose回数に注意しなくても済みそうです。\n"
} ,
  
  {
    "title"    : "Android Lintで特定のディレクトリ内ファイルをすべて無視するには",
    "category" : "programming",
    "tags"     : " til, android",
    "url"      : "/2016/07/05/ignore-directory-androidlint/",
    "date"     : "July 5, 2016",
    "excerpt"  : "Suppressing Lint Warnings - Android Studio Project Site\n\nSupport libraryや他のライブラリからコード持ってきて一部書き換えてるだけだからAndroid Lintの対象にしたくないって時に有効\n\nモジュールのルートにlint.xmlを置くとAndroid Lintかけるときにそこの設定を見てくれる。\n上のサイトにはプロジェクトのルート、Manifestファイルと同階層に置けって書いてあるけどモジュールのルート(app/li...",
  "content"  : "Suppressing Lint Warnings - Android Studio Project Site\n\nSupport libraryや他のライブラリからコード持ってきて一部書き換えてるだけだからAndroid Lintの対象にしたくないって時に有効\n\nモジュールのルートにlint.xmlを置くとAndroid Lintかけるときにそこの設定を見てくれる。\n上のサイトにはプロジェクトのルート、Manifestファイルと同階層に置けって書いてあるけどモジュールのルート(app/lint.xmlとか)です。\n\n最初は全部のissue書かなきゃなのかなーめんどくさいなーって思ってたらid=&quot;all&quot;で全部のissueを無視できるらしい\n\n&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;\n&amp;lt;lint&amp;gt;\n    &amp;lt;issue id=&quot;all&quot;&amp;gt;\n        &amp;lt;ignore path=&quot;path/to/target/directory&quot;/&amp;gt;\n    &amp;lt;/issue&amp;gt;\n&amp;lt;/lint&amp;gt;\n\n\n他にも無視したいメッセージやファイルを正規表現で指定できたり、思ったより高機能でした\n"
} ,
  
  {
    "title"    : "Observable&amp;#35;intervalはunsubscribeしただけではonCompleteが呼ばれない",
    "category" : "programming",
    "tags"     : " til, java, rxjava",
    "url"      : "/2016/06/28/rxjava-interval-oncomplete/",
    "date"     : "June 28, 2016",
    "excerpt"  : "Today I Learned的なことをやってみる\n\n表題の通りなんだけど、Observable#intervalはunsubscribeしただけでは、onCompleteまで呼ばれない。\n\nSubscription subscription = Observable.interval(1, TimeUnit.SECONDS)\n  .subscribe(aLong -&amp;gt; {\n    print(&quot;interval onNext: %d&quot;, aLong);\n  }, throwable...",
  "content"  : "Today I Learned的なことをやってみる\n\n表題の通りなんだけど、Observable#intervalはunsubscribeしただけでは、onCompleteまで呼ばれない。\n\nSubscription subscription = Observable.interval(1, TimeUnit.SECONDS)\n  .subscribe(aLong -&amp;gt; {\n    print(&quot;interval onNext: %d&quot;, aLong);\n  }, throwable -&amp;gt; {\n    print(&quot;interval onError&quot;);\n  }, () -&amp;gt; {\n    print(&quot;interval onComplete&quot;);\n  });\n\nThread.sleep(3500)\n\nsubscription.unsubscribe();\n\n\nこんなコード(擬似コード)を書くと、\n\ninterval onNext: 0\ninterval onNext: 1\ninterval onNext: 2\n...\n\n\nこんなログが出て、subscription.unsubscribe()が呼ばれたタイミングで、interval onCompleteが出力されることなくログの出力が終了する。\n\nObservable#intervalはHot Observableで誰がsubscribeしてるとか関係ない感じなんだろうなーという認識。\n\nどうやったらonComplete呼ばれるのん？っていうと下記スレッドでやり方が紹介されていた。\nCall onComplete when an observable uses interval method.\n\nObservable#takeUntilを使うらしい。引数として受け取ったObservableのonNextが呼ばれたら、それより後に来る元のObservableのonNextを全部無視するオペレータだ。\n\nPublishSubject&amp;lt;Void&amp;gt; stop = PublishSubject.create();\nSubscription subscription = Observable.interval(1, TimeUnit.SECONDS)\n  .takeUntil(stop)\n  .subscribe(aLong -&amp;gt; {\n    print(&quot;interval onNext: %d&quot;, aLong);\n  }, throwable -&amp;gt; {\n    print(&quot;interval onError&quot;);\n  }, () -&amp;gt; {\n    print(&quot;interval onComplete&quot;);\n  });\n\nThread.sleep(3500)\n\nstop.onNext(null);\n\n\nこうするとonCompleteが呼ばれて終了する。\n\nただ、Observable#interval使った時だけPublishSubjectでunsubscribeとかダルいなーって思ってたらこんなことができた\n\nPublishSubject&amp;lt;Void&amp;gt; stop = PublishSubject.create();\nSubscription subscription = Observable.interval(1, TimeUnit.SECONDS)\n  .doOnUnsubscribe(() -&amp;gt; {\n    print(&quot;interval onUnsubscribe&quot;);\n    stop.onNext(null);\n  })\n  .takeUntil(stop)\n  .subscribe(aLong -&amp;gt; {\n    print(&quot;interval onNext: %d&quot;, aLong);\n  }, throwable -&amp;gt; {\n    print(&quot;interval onError&quot;);\n  }, () -&amp;gt; {\n    print(&quot;interval onComplete&quot;);\n  });\n\nThread.sleep(3500)\n\nsubscription.unsubscribe();\n\n\nログはこんな感じ\n\ninterval onNext: 0\ninterval onNext: 1\ninterval onNext: 2\n...\ninterval onUnsubscribe\ninterval onComplete\n\n\ndoOnUnsubscribeはどうやらObserverにイベントが来なくなるより前に実行されるみたい。\n\nこれでonCompleteは呼ばれるようになったけど、Observable#takeUntilのドキュメントを見る限りだとObservable#intervaleのストリームは依然続いてそうな感じもするし、onCompleteでしたい処理がある場合以外はこんなめんどくさいことしなくていいかもしれない。\n"
} ,
  
  {
    "title"    : "Wakatimeでプロジェクトの名前を指定する",
    "category" : "programming",
    "tags"     : " til",
    "url"      : "/2016/02/15/customize-wakatime-project/",
    "date"     : "February 15, 2016",
    "excerpt"  : "Wakatimeはプログラミングしている時間を集計して、プロジェクト毎・言語毎にグラフ化してくれるツールです。\n\nAtomやSublimeText, Jetbrains製の各種IDE、Eclipse, Vim等様々なエディタのプラグインを提供しているので、言語毎にエディタを使い分けている方でも大体カバーできるんじゃないかと思います。\n\n私の場合はAndroid Studio, IntelliJ IDEA, Atomで利用しています。\n\n一週間毎に今週はどのプロジェクトでどのくらいコーディン...",
  "content"  : "Wakatimeはプログラミングしている時間を集計して、プロジェクト毎・言語毎にグラフ化してくれるツールです。\n\nAtomやSublimeText, Jetbrains製の各種IDE、Eclipse, Vim等様々なエディタのプラグインを提供しているので、言語毎にエディタを使い分けている方でも大体カバーできるんじゃないかと思います。\n\n私の場合はAndroid Studio, IntelliJ IDEA, Atomで利用しています。\n\n一週間毎に今週はどのプロジェクトでどのくらいコーディングしましたよー、っていうレポートを送ってくれるので週次の振り返りに重宝します。あとは大体の工数把握に使ったりとか。\nOmnitweetyを作った時も、wakatimeでコーディングした時間管理してました\n\n集計時のプロジェクト名ですが、大体はフォルダ構造から自動で取得してくれるのですが、たまにうまく取得できず一つのプロジェクトが複数の名前で分けて集計されてしまったりします。\n\n任意の名前でまとめられないのかなーって調べてたら、公式のFAQにしっかりと記述がありました\n\nWakatimeでは３つの方法でプロジェクト名を指定できるそうです。\n\n\n  \n    git, subversion等のバージョン管理システムを利用する\ngit init で初期化したフォルダの下が一つのプロジェクトとして認識されるようです。プロジェクト名はトップのフォルダ名です。\n  \n  \n    Wakatimeサイト上の設定ページ\nファイルパスにこの文字列が含まれていたらこのプロジェクト、というような細かい条件でプロジェクト名を設定することができます。\n  \n  \n    .wakatime-project ファイルを作成する。\nプロジェクトディレクトリに .wakatime-project ファイルを作成し、一行目に利用したいプロジェクト名を書くと、その文字列がそのディレクトリ以下のプロジェクト名として利用されます。\n  \n\n\nとりあえず .wakatime-project ファイルを作る方法が一番環境による影響をうけないので良さそうです。gitにコミットしておけば、複数の環境で開発している時も安心です。\n"
} ,
  
  {
    "title"    : "2015年振り返りと2016年について",
    "category" : "diary",
    "tags"     : " diary",
    "url"      : "/2016/01/09/lookingback2015/",
    "date"     : "January 9, 2016",
    "excerpt"  : "年も変わってしまいましたが2015年の振り返りなどやってみます。\n\n仕事\n\n始めてAndroidエンジニアとして参加したプロジェクトがクローズ(というか開発なし現状維持運用)して、別のプロジェクトに移った。Androidやりたいよーって言ってたらWebフロントエンドで配属された。まったく納得できなかったけど、いろいろあって数ヶ月でAndroid開発に戻ったのでまあ良かったかな、という感じ。\n\nとはいえ、数ヶ月だけやっていたWebフロントエンド作業の中でReactとかElectronとか最近...",
  "content"  : "年も変わってしまいましたが2015年の振り返りなどやってみます。\n\n仕事\n\n始めてAndroidエンジニアとして参加したプロジェクトがクローズ(というか開発なし現状維持運用)して、別のプロジェクトに移った。Androidやりたいよーって言ってたらWebフロントエンドで配属された。まったく納得できなかったけど、いろいろあって数ヶ月でAndroid開発に戻ったのでまあ良かったかな、という感じ。\n\nとはいえ、数ヶ月だけやっていたWebフロントエンド作業の中でReactとかElectronとか最近流行りの技術に触れ、個人プロダクトのOmnitweety for Chromeに還元したりできたので結果的に良かったとは思う。あと静的サイトジェネレータ系検討してる人、Hexoだけは使うなよ、絶対だ。\n\n個人開発\n\n毎年OSS活動したいなーとか個人でもアプリ開発したいなー、とか思いながら活動できてなかったんだけど、今年はいろいろできたと思う。全体的なGithubでのアクティビティはこちらで確認してもらうとして、主だったところは下記三点\n\n\n  \n    Omnitweety for Chrome\nChromeのOmniboxからツイート・URLをシェアできるツイート専用Twitterクライアント。ブログエントリはこちら\n  \n  \n    画像検索してファボるやつ\nFabricのTwitter Kitを試してみたくて作ったAndroidアプリ。画像を検索してひたすらファボるアプリ欲しかった、というのもある。ブログエントリはこちら\n  \n  \n    Omnitweety for Android\n初めて個人でGooglePlayに公開したアプリ。名前からわかるようにOmnitweety for ChromeをAndroidに移植したような機能。ブラウザからURLをTwitterに共有することに特化している。おかげ様で国内外のいろいろなブログで紹介してもらえて、結構テンション上がりました。ありがとうございます。ブログエントリはこちら\n  \n\n\n個人で開発してると、業務で使ってないライブラリやデザインパターン試せて、いろいろ知見たまってよい。作ったものをGithubで公開して星集まると承認欲求満たされるし\n\nアツかったライブラリとか技術トレンドとか\n\nRealm\n\niOS/Androidで使えるSQLiteの代替DB。\nAndroid版はこの一年で非同期クエリが使えるようになったりRxJavaがサポートされたり、かなり使いやすくなってきている。\n\nここ半年くらいGithubのissueをwatchしてるんだけど、Realmのチームは上がってきたissueに対するサポートが厚くて、ホントすごいと思う。ちょっと調べればわかるじゃん？って質問とかこれむしろRealmじゃなくてAndroidフレームワークに関する質問じゃん…ってissueにも丁寧に(そして迅速に)コメント返してる。\n\n今後もスレッド間通信の件とかRobolectricのサポートとかいろいろ機能追加が待ってそうなので、引き続きwatchしつつ活用していこうと思う。\n\nRxJava\n\nリスト操作とか非同期処理がいい感じに書けるやつ。\n\nいろいろなオペレータがあってどれを使ったらいいかわからなくなりがちだけど、公式にチャート的なやつが用意してあるので、それ見ると大体やりたいことに合ったオペレータが見つかることを9月くらいに知って、それからは map や flatMap 以外のオペレータも使えるようになってきた。\n\nとはいえまだまだ知らないオペレータばかりなのでいろいろ書きつつ試していきたい。\n\nDagger2\n\nDIライブラリ。\n\nComponentの書き方はベストプラクティスが掴みきれてないけど、最近はApplicationレベルのComponentを一つとActivity毎にComponentを一つ作る形に落ち着いている。ViewやFragmentにはActivityのComponentから依存関係を注入している。\n\nただ、後述するMVPアーキテクチャを採用したアプリだと、このComponentの分割方法だとConfiguration ChangeでPresenterが再生成されてしまう、という課題がある。今年はこの辺りのうまいやり方も模索しようと考えている。\n\nClean Architecture/MVP\n\nViewからロジックを分離しよう、時代はMVP/MVVMだ！　という記事を結構見かけた一年だったように感じる(私のアーキテクチャ系トピックに関する情報感度が上がってるだけかもしれないけど)。Androidの標準ライブラリとしてDataBindingが追加されたのも大きいんだろう。\n\nOmnitweety for AndroidはClean Architectureで実装してみて、なかなかメンテのしやすいコードになったんじゃないかなー、と自負している。\n\nこれはMVPと言うよりはClean Architectureのメリットだけど、Modelにあたる部分がデータ取得・保存クラスとドメインロジックを適用するユースケースクラスに分かれてて、かつユースケースクラスはその名の通りそれぞれ一つのユースケースロジックを実装しているだけなので、機能追加や修正時に他のユースケースに与える影響が非常に少なくすむ。\n\nただ、ユースケースの数だけクラスが増えるので全体的なメソッド数は膨れ上がるしboilerplateなコードも増えるので、そのまんま適用するんじゃなくてうまい落とし所を見つけたい。\n\nMVPはViewがシンプルになってとてもいいです。\nMVP過激派はPresenterにAndroid固有クラス持ち込むな！っていうけどRobolectricあるし、Bundleとか入るくらいならいいんかなーって最近は思ってます。\n\nAndroid固有のクラスを持ち込まない、となると必然的にView側にある程度ロジック残っちゃうのでどう処理するのがいいんだろう…っていうのが最近の懸案事項。あとResourcesどうしたらいいの。getString()とか…\n\n2016年やりたいこと\nテスト\n\nいい加減まじめに書く。MVPだと単体テストしやすいので、Robolectricも使っていい感じに。\n\nDataBinding\n\nxmlにロジック書くのもあれだし、かと言ってButterKnifeの代替としてだけ使うのはもったいないし…\n\nKolin\n\n今年はKotlinでアプリ書くぞ\n\nアプリ\n\n二本くらいリリースする\n\n今年もよろしくお願いします。\n"
} ,
  
  {
    "title"    : "「まったりAndroid Framework Code Reading &amp;#35;2」に参加してきた",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/12/07/android-framework-code-reading-2/",
    "date"     : "December 7, 2015",
    "excerpt"  : "「まったりAndroid Framework Code Reading #2」に参加してきた\n\nちょっと前の話ですが、まったりAndroid Framework Code Reading #2というもくもくコード読む会に行ってきました。\n個々人でテーマ決めて、最後に成果を報告しあう感じ。\n\nテーマ\n\n私は、 WindowManager を読んでみることにした。最近公開したアプリが他のアプリにの上にオーバーレイするタイプのモノで、 WindowManager をちょっと触ったからだ。\n\n成果...",
  "content"  : "「まったりAndroid Framework Code Reading #2」に参加してきた\n\nちょっと前の話ですが、まったりAndroid Framework Code Reading #2というもくもくコード読む会に行ってきました。\n個々人でテーマ決めて、最後に成果を報告しあう感じ。\n\nテーマ\n\n私は、 WindowManager を読んでみることにした。最近公開したアプリが他のアプリにの上にオーバーレイするタイプのモノで、 WindowManager をちょっと触ったからだ。\n\n成果\nWindowManager のコード自体はすぐに見つかった。\n\nandroid.view.WindowManager.javaがインターフェイスで、実態は android.view.WindowManagerImpl.java こっちのようだ。\n\nただ、基本的に処理は全て android.view.WindowManagerGlobal.java に委譲しているらしく、大した処理は書いてなかった。\n\nここでちょっと興味がずれて、 getApplicationContext().getSystemService(Context.WINDOW_SERVICE) を呼ぶとどんな感じで WindowManager が渡されるのか調べ始めた。\n\ncontext.getSystemService(Context.WINDOW_SERVICE) を呼ぶと、android.app.SystemServiceRegistry.java から WindowManagerImpl.java が返される。どこからSystemServiceRegistryを呼んでるかはちょっと追えていない。\n\nWindowManager は ViewManager を継承している。\nで、ViewManager には ViewManager#addView は BadTokenException や InvalidDisplayException を投げる、って書いてあるけどそれらのExceptionは WindowManager に定義してある。\n親interfaceのViewManagerに定義するか独立したクラスとして定義したほうがいいんじゃ？　って気もしたけどどうなんでしょうね。\n\n感想\nFrameworkのコードを読む機会ってあまりないので、（時間は圧倒的に足りないにしても）とても良い機会だった。今回はあまり役立ちそうな知見は得られなかったけど、OS標準アプリのコードとかRecyclerViewとか、いろいろ読んでみたいコードができた。\n次回以降もタイミングがあったら参加したい、と思える会でした。\n\nこちらからは以上です。\n"
} ,
  
  {
    "title"    : "TwitterにURLを共有するAndroidアプリ、Omnitweetyを公開した",
    "category" : "programming",
    "tags"     : " android, omnitweety, twitter",
    "url"      : "/2015/11/10/omnitweety-andrid-released-share-url-twitter/",
    "date"     : "November 10, 2015",
    "excerpt"  : "\n\n掲題のとおり、アプリをGoogle Play Storeに公開した。\n\n名前は”Omnitweety”。「オムニツイーティ」と読む。\n\n機能はホントにシンプルで、「ブラウザ系アプリのシェア機能から、ワンタップでURLをTwitterに共有する」だけだ。\n\n\n  \n    ブラウザの共有からOmnitweetyを選択\n  \n  \n  \n    画面下部にポップアップが表示される。あとは待っていれば自動でTwitterに共有される。真ん中の青いボタンをタップすれば即座に共有される。\n  \n...",
  "content"  : "\n\n掲題のとおり、アプリをGoogle Play Storeに公開した。\n\n名前は”Omnitweety”。「オムニツイーティ」と読む。\n\n機能はホントにシンプルで、「ブラウザ系アプリのシェア機能から、ワンタップでURLをTwitterに共有する」だけだ。\n\n\n  \n    ブラウザの共有からOmnitweetyを選択\n  \n  \n  \n    画面下部にポップアップが表示される。あとは待っていれば自動でTwitterに共有される。真ん中の青いボタンをタップすれば即座に共有される。\n  \n  \n  \n    もし共有する前にコメントを入れたい場合は、ポップアップの鉛筆アイコンをタップすれば編集画面が起動する。(文字数はURL短縮を考慮)\n  \n  \n\n\n操作は基本的にこれだけだ。あとは設定画面で”NowBrowsing:”の部分(ヘッダー)を編集できる。\n\nモチベーション\n\n私はTwitterにURLをシェアすることが結構あるんだけど、その際のフローは大体下記のとおりだ。\n\n\n  ブラウザのシェア機能からTwitterクライアントアプリを選択する\n  クリップボード管理アプリからヘッダーに使ってる定型文をコピーする\n  Twitterクライアントの入力欄に貼り付ける\n  タイトルが長かったら適度に削除する\n  共有する\n\n\n結構手順多くて、しかもこれが毎回のことだから非常にめんどくさい。\nGoogle Play Storeを探してもこれをいい感じに短縮してくれるアプリが見つからなかったので、じゃあ作ってしまえ、となった。\n\n作るにあたって決めた要件は下記の通り\n\n\n  ブラウザを離れずにシェアできること\n  共有する際のテンプレートを予め自由に設定できること\n  共有時にコメントを付けたい場合は、自由に編集できること\n\n\nそして、上記要件から導き出された仕様が下記のものだ。\n\n\n  ブラウザからシェアすると、オーバーレイでボタンが表示される(編集、すぐ共有、キャンセル)\n  そのまま放置するとn秒後に自動で共有される\n  共有時は、Twitterの短縮URL文字数を考慮し、自動でタイトルが短縮される\n  編集ボタンをタップすると編集用ダイアログが表示される\n  編集ダイアログではヘッダー・タイトルが編集できる\n\n\nこんな感じで開発を始めた。\nいろいろと初めての挑戦をしたこともあって、だいたいコーディングだけで15人日くらいかかった。\n\n使ったライブラリとか\n\nDagger2\n\nとてもイケてるDIライブラリ。Componentの分割方法とか結構悩むところは多いけど、これなしでアプリ作るのはもう考えられない。\n\n今回はグローバルのAppComponentが一つあって、その下に各Activity毎にActivityComponentを作る構成にしてみた。FragmentやViewにも、ActivityComponentからinjectする感じ。\n\nImmutables\n\npublic abstract book {\n  String title();\n  String author();\n}\n\n\nみたいなアブストラクトなモデルクラスを用意しておくと、アノテーションプロセッサを使ってイミュータブルなモデルクラスを作ってくれるライブラリ。ビルダークラス周りとか機能が充実しているので結構便利。\nGson連携もできるけど、後述するTwitter Kitが使ってるGsonの設定をいじれないのでうまく使うことができなかった。\n最初はプレゼンテーション層やデータ層のモデルクラスを全部これで作ってたんだけど、最終的にRealmのLazy Loadをフル活用しよう、という方向になったので使う箇所が減ってしまった。DBにSQLiteを使う時やGsonを自由にいじれる時、そしてアプリの各層を疎結合にしたい時は(というかRealm使わなければ)とても便利だと思う。\n\nRxJava/RxAndroid\n\n色々リアクティブに扱えるライブラリ。リスト操作やスレッド周りの処理が楽に書けるので、今回もお世話になっている。\n\nDatabinding\n\nAndroidにもついにやってきたデータバインディング。\nxmlにロジックを書くの、なれるまでちょっとモニョるしAndroid Studioのサポートもまだまだだけど、モデルクラスに値を設定するだけで画面が更新されるっていうのはちょっとライフチェンジングだった。いい使い方を模索したい。\n\nRecyclerView-MultipleViewTypeAdapter\n\nRecyclerViewで複数のViewTypeを扱う時の処理を簡単に書ける。基本的にいいんだけど、今回良く使ったEnumBindListAdapterはEnumとDataBinderの関連付けが弱かったり、ちょっと足りないところがあるのでそのうちオレオレ版を書くかも。\n\nFabric Twitter Kit\n\n前回作ったアプリで非常に便利だったので、今回も継続使用。\n\ntwiter-text\n\nTwitterのステータス本文に関する様々な処理を行ってくれる。URLの短縮を考慮した文字数の計算とか、ステータス本文からURLのみ取得するとか。Twitter謹製なので、これ使っておけば間違いないかなーって感じ。\n\nRealm\n\n最近流行りのDBライブラリ。\n動作は速くて最近よく使ってるけど、まだまだ制限多いかなーって印象。\nRxJavaサポート待ってます。\n\nTray\n\nマルチプロセスをサポートした、SharedPreferenceの代替ライブラリ。\n個人的にはマルチプロセスもそうだけど、自動で作成日時や更新日時を保存してくれるのがよい。Android MのAuto Backupもサポートしている。\n\nアーキテクチャ\n\n今回は昨今の流行りに乗ってMVPでの実装を試してみた。\n\nhttps://github.com/android10/Android-CleanArchitecture\n参考にしたのは↑このレポジトリで、いわゆる”Clean Architecture”だ。\n\n今までビジネスロジックは機能ごとに一つのクラスにまとめるタイプの実装ばかりしていたので、1ユースケース1クラス、という実装はとても新鮮だった。クラス数・メソッド数はすごい勢いで増えるけど、ユースケース毎にクラスが分かれてるから実装がシンプルで見やすくなってよい。また、データの取得や保存ロジックも別レイヤに分かれているのでコードの見通しはやっぱりよい。\n\nただ正直言って、数画面しかないこのレベルのアプリケーションでは完全にオーバーキルだった。今回は単にClean Architectureやってみたかったから採用したけど、アプリの規模にあったアーキテクチャ選ぶのも重要だと実感した。\n\n最初はこのレポジトリの実装例に忠実に、各レイヤで別々にモデルクラス用意して、レイヤ間で受け渡しするときにパースして…ってやってたんだけど、そのやり方だとRealmの持ち味であるLazy Loadが活かせない。\n\nなので、いろいろ悩んだ結果結局Realmで管理してるデータは、RealmObjectをそのまま各レイヤで使うことにした。アーキテクチャ的にはあまり美しくないけど、Realmの利点を活かしたいなら仕方ない気がしている。うまいことRealm使えるアーキテクチャ模索したい。\n\nアイコン\n\nアイコンは今回かなりこだわった箇所で、99designsというサイトでクラウドソーシングしてみた。3万円ほどでたくさんデザインが集まり、非常に満足している。ただ、満足しているとはいっても応募作品の中に盗作があったりして思うところはあるので、そのうちまとめようと思っている。\n\nそういえばなんでOmnitweetyなのか？\n\n同じような機能のChrome拡張機能を以前リリースしてるので、名前揃えたほうがいいよなーと思ったのでこの名前に。Chromeのオムニバー(アドレスバー)からツイートするので”Omnitweety”だ。ホントは”Omnitweet”にしたかったけど名前がとられてたから”y”をつけてみた。\n拡張機能と名前を揃えよう、と思いつく前は”TweetLink”とかそのまんまの名前を考えていた。\n\n今後の予定\n\n幾つか機能追加を検討中。\n\n\n  フッター設定\n  通知バーからツイート\n  Omnitweetyから共有したURLの履歴表示\n\n\nこちらからは以上です。\n\nOmnitweety PlayStoreリンク: https://play.google.com/store/apps/details?id=net.yslibrary.omnitweety\n\n"
} ,
  
  {
    "title"    : "CompositeSubscriptionは再利用できる",
    "category" : "programming",
    "tags"     : " java, rxjava",
    "url"      : "/2015/10/13/compositesubscription-is-reusable/",
    "date"     : "October 13, 2015",
    "excerpt"  : "RxJavaの CompositeSubscription は一度 unsubscribe() してしまうと使い回すことができないので毎回インスタンス化しなきゃいけないと思っていたら、clear() というメソッドがあることを知った。\nclear() は追加済みの Subscription の unsubscribe は行うが、 CompositeSubscription 自体の状態は変更しないメソッドだ。\nこれをメインで使うようにしたらちょっと面倒が減りそうな気がする。\nすでに unsu...",
  "content"  : "RxJavaの CompositeSubscription は一度 unsubscribe() してしまうと使い回すことができないので毎回インスタンス化しなきゃいけないと思っていたら、clear() というメソッドがあることを知った。\nclear() は追加済みの Subscription の unsubscribe は行うが、 CompositeSubscription 自体の状態は変更しないメソッドだ。\nこれをメインで使うようにしたらちょっと面倒が減りそうな気がする。\nすでに unsubscribe() してしまった CompositeSubscription に効果はないので注意が必要だけれども。\n\n@Override\npublic void unsubscribe() {\n    if (!unsubscribed) {\n        Collection&amp;lt;Subscription&amp;gt; unsubscribe = null;\n        synchronized (this) {\n            if (unsubscribed) {\n                return;\n            }\n            unsubscribed = true;\n            unsubscribe = subscriptions;\n            subscriptions = null;\n        }\n        // we will only get here once\n        unsubscribeFromAll(unsubscribe);\n    }\n}\n\n\n/**\n * Unsubscribes any subscriptions that are currently part of this {@code CompositeSubscription} and remove\n * them from the {@code CompositeSubscription} so that the {@code CompositeSubscription} is empty and in\n * an unoperative state.\n */\npublic void clear() {\n    if (!unsubscribed) {\n        Collection&amp;lt;Subscription&amp;gt; unsubscribe = null;\n        synchronized (this) {\n            if (unsubscribed || subscriptions == null) {\n                return;\n            } else {\n                unsubscribe = subscriptions;\n                subscriptions = null;\n            }\n        }\n        unsubscribeFromAll(unsubscribe);\n    }\n}\n\n\nこうして比べてみると、unsubscribe() の方では unsubscribed = true で CompositeSubscription の状態を変更しているが、 clear() では Subscription の開放のみを実行している。\n\nclear() のコメントには an unoperative state と書いてあるが、実際のコードを読むと真逆のことが書いてあるので注意が必要。\n\n参考\nRxJava/CompositeSubscription.java at dded0d2f3d7e4b715040f5a588cb2d709cad9493 · ReactiveX/RxJava\n"
} ,
  
  {
    "title"    : "(Android) dimens.xmlでmatch_parent/wrap_contentを定義する",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/09/24/define-matchparent-wrapcontent-in-dimens/",
    "date"     : "September 24, 2015",
    "excerpt"  : "例えば、画面サイズや画面の向きによってレイアウトの幅や高さを変えたい時なんかに\n\n// value/dimens.xml\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;match_parent&amp;lt;/dimen&amp;gt;\n\n//value-land/dimens.xml\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;400dp&amp;lt;/dimen&amp;gt;\n\n\nなどど設定できるとレイアウトxmlを2つ用意する必要がないので非常にはかどります...",
  "content"  : "例えば、画面サイズや画面の向きによってレイアウトの幅や高さを変えたい時なんかに\n\n// value/dimens.xml\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;match_parent&amp;lt;/dimen&amp;gt;\n\n//value-land/dimens.xml\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;400dp&amp;lt;/dimen&amp;gt;\n\n\nなどど設定できるとレイアウトxmlを2つ用意する必要がないので非常にはかどります。\n\nしかし match_parent は文字列なので、上記のコードはもちろん使えません。エラーになります。\n\nViewGroup$LayoutParams を見てみると、match_parent, wrap_content は下記の用に定義されています。\n\n/**\n * Special value for the height or width requested by a View.\n * MATCH_PARENT means that the view wants to be as big as its parent,\n * minus the parent&#39;s padding, if any. Introduced in API Level 8.\n */\npublic static final int MATCH_PARENT = -1;\n\n/**\n * Special value for the height or width requested by a View.\n * WRAP_CONTENT means that the view wants to be just large enough to fit\n * its own internal content, taking its own padding into account.\n */\npublic static final int WRAP_CONTENT = -2;\n\n\nこの値をdimens.xmlに書けば match_parent や wrap_content が使える−−、とはいかないようです。\n\nこちらのStackOverflowによると、 TypedValue#complexToDimensionPixelSize() は負数の扱いを考慮していないようで、普通に wrap_content の値である -2px を書くと -1 になってしまうようです。\n\nこの現象を回避するため、最終的なdimens.xmlは下記のようになります。\n\n// value/dimens.xml\n&amp;lt;dimen name=&quot;match_parent&quot;&amp;gt;-2px&amp;lt;/dimen&amp;gt;&amp;lt;!-- -1pxでもよい --&amp;gt;\n&amp;lt;dimen name=&quot;wrap_content&quot;&amp;gt;-3px&amp;lt;/dimen&amp;gt;\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;@dimen/match_parent&amp;lt;/dimen&amp;gt;\n\n//value-land/dimens.xml\n&amp;lt;dimen name=&quot;container_width&quot;&amp;gt;400dp&amp;lt;/dimen&amp;gt;\n\n\nこちらからは以上です。\n\n参考リンク\n\n  How can I use layout_width using resource file?\n  Issue 61222:\tTypedValue#complexToDimensionPixelSize() rounds negative dimensions incorrectly\n\n"
} ,
  
  {
    "title"    : "ReactNative for Androidで実機をデバッグに使うには",
    "category" : "programming",
    "tags"     : " android, reactnative, javascript",
    "url"      : "/2015/09/17/reactnative-for-android-debugging-on-real-device/",
    "date"     : "September 17, 2015",
    "excerpt"  : "先ごろ”ReactNative for AndroidでHello World(セットアップ方法とか)“という記事を書きましたが。そこで、\n\n\n  ※私の環境では実機(Nexus6 5.1.1)で動かすことができなかったので、エミュレータのインストールもしておくといいと思います。\n\n\nというふうに書きました。\n\nその後、ドキュメントを読み漁ってAndroidの実機でデバッグする方法がわかったのでアップデートしておきます。\n\nすごく簡単で、一つコマンドを実行するだけです。\n\nadb reve...",
  "content"  : "先ごろ”ReactNative for AndroidでHello World(セットアップ方法とか)“という記事を書きましたが。そこで、\n\n\n  ※私の環境では実機(Nexus6 5.1.1)で動かすことができなかったので、エミュレータのインストールもしておくといいと思います。\n\n\nというふうに書きました。\n\nその後、ドキュメントを読み漁ってAndroidの実機でデバッグする方法がわかったのでアップデートしておきます。\n\nすごく簡単で、一つコマンドを実行するだけです。\n\nadb reverse tcp:8081 tcp:8081\n\n\nこれで、Macで実行したReact Packagerを実機から参照することができるようになります。\nGetting Startedに書いておけよ…って話ですが、Running On Device (Android)にしっかりと書いてありました。\n\n実機では端末を振るとメニューが出てきます。\n\nこちらからは以上です。\n"
} ,
  
  {
    "title"    : "ReactNative for AndroidでHello World(セットアップ方法とか)",
    "category" : "programming",
    "tags"     : " android, reactnative, javascript",
    "url"      : "/2015/09/15/reactnative-for-android-hello-world/",
    "date"     : "September 15, 2015",
    "excerpt"  : "ついにReactNative for Androidがリリースされました。\nとりあえず簡単にセットアップ方法をご紹介します。\n\nReactNativeの公式インストラクションはこちら。\n\n実行環境\n\nMac OS X\n今のところOS Xのみサポートされているようです。\n\nHomebrew\nnvm, watchman, flowをインストールするのに利用します。\n\nNode.js 4.0以上\nnvm経由でインストールしましょう。あるいはnodebrew使ってもいいし、直接入れてもよいです。\n...",
  "content"  : "ついにReactNative for Androidがリリースされました。\nとりあえず簡単にセットアップ方法をご紹介します。\n\nReactNativeの公式インストラクションはこちら。\n\n実行環境\n\nMac OS X\n今のところOS Xのみサポートされているようです。\n\nHomebrew\nnvm, watchman, flowをインストールするのに利用します。\n\nNode.js 4.0以上\nnvm経由でインストールしましょう。あるいはnodebrew使ってもいいし、直接入れてもよいです。\nTerminalで使えるように環境変数の設定とかも必要です。\n\nwatchman\n\nNode.jsのファイル監視関係のバグを回避するためにもwatchmanを利用するのがいいみたいです。\n\nbrew install watchman\n\nflow\n\nflowを使いたい場合はこれもhomebrewからインストールします。\n\nbrew install flow\n\nAndroid SDK\n\nAndroid向けの開発なのでAndroid SDKが必要です。\n未インストールの方はこちらの手順にしたがって設定してください。\n\n※私の環境では実機(Nexus6 5.1.1)で動かすことができなかったので、エミュレータのインストールもしておくといいと思います。\n※2015/09/17追記: 実機でのデバッグ方法わかりました\n\nReactNativeのインストール\n\n下記コマンドを実行します\n\nnpm install -g react-native-cli\nreact-native init AwesomeProject\ncd AwesomeProject\n\n\nAwesomeProject はプロジェクト名なので、なんでもいいです。\n\nサンプルアプリをAndroid実機で実行する\n\n下記のコマンドを実行すると、エミュレータでアプリが起動します。\n\nreact-native run-android\n\nコードに変更を加え、リロードする\n\n適当にコードを書き換えてみましょう。\nコードに変更を加えたら、エミュレータ上で F2 を押すとメニューが表示されます。\n“Reload JS” をクリックすると画面がリロードされ、コードの変更がエミュレータにも反映されます。\n\n\n\n(クリックするとyoutubeにとびます)\n\nReactJSでついにAndroidアプリがつくれるようになった…と思うとテンション上がりますね。\n豊富なnode.jsの資産を使えるので、色々夢が広がります。\nTitaniumMobileのようにならないか心配ですが、Webでもある程度市民権を得ている技術ではあるので、それなりに流行るんじゃないかなー、と思ってます。\n\nこちらからは以上です。\n追って簡単なアプリとかも作ってみようと思います。\n\n参考リンク\n\n  \n    \n      \n        \n          [React Native for Android: How we built the first cross-platform React Native app\n          Engineering Blog\n          Facebook Code](https://code.facebook.com/posts/1189117404435352/)\n        \n      \n    \n  \n  \n    \n      \n        \n          [Getting Started – React Native\n          A framework for building native apps using React](http://facebook.github.io/react-native/docs/getting-started.html)\n        \n      \n    \n  \n\n"
} ,
  
  {
    "title"    : "(Android) 夏休みだったので画像を検索してひたすらファボるAndroid用Twitterアプリつくった",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/09/12/app-created-during-summer-vacation/",
    "date"     : "September 12, 2015",
    "excerpt"  : "掲題のとおり、Androidアプリを作った。\n最初はまったく別の事情のために作り始めたのだけれども、途中でその用事がなかったことになったのでそのまま「夏休みの課題」として仕上げることにした。\n\n名前は「画像検索してファボるやつ」\nまずはデモ動画をどうぞ。\n\n\n\n見ての通り、設定したキーワードでTwitter検索して、結果をタブ形式で表示するだけのアプリです。アプリからできるアクションはお気に入りだけ。\n\nアプリを作るにあたって設定した要件は下記の通り\n\n\n  画像投稿サービスのAPIを使っ...",
  "content"  : "掲題のとおり、Androidアプリを作った。\n最初はまったく別の事情のために作り始めたのだけれども、途中でその用事がなかったことになったのでそのまま「夏休みの課題」として仕上げることにした。\n\n名前は「画像検索してファボるやつ」\nまずはデモ動画をどうぞ。\n\n\n\n見ての通り、設定したキーワードでTwitter検索して、結果をタブ形式で表示するだけのアプリです。アプリからできるアクションはお気に入りだけ。\n\nアプリを作るにあたって設定した要件は下記の通り\n\n\n  画像投稿サービスのAPIを使ったアプリであること\n  二日間くらいで仕上げること\n\n\nというわけで、\n\n\n  TwitterのAPIを利用して画像を検索、\n  検索結果をタブで表示し、スワイプで移動でき\n  ひたすらファボれる\n\n\nアプリを作ることにした。\n\n最初はInstagramで作ろうとしたんだけど（ #ilovecat をひたすら見るだけのアプリを作りたかった）、ちょっとAPIドキュメントを見た限りだとLikeのAPIが一般には公開されていないようだった。\nそこで、同じように画像が投稿されていてハッシュタグが使用されているTwitterのAPIを利用することにした。\n\nそしてできあがったのがこの、「画像検索してファボるやつ」だ。\nレポジトリはこちら。\n\n技術的な\n\n使った技術はだいたい下記の通り。\n\n\n  dagger2\n  Fabric Twitter Kit\n  RxAndroid\n  Realm\n\n\nDagger 2\n\n言わずと知れたDIライブラリ。\nモデルクラスの注入とかいろいろ。\nSingletonの管理もさくっとできるので、今回は特に各タブ表示用の List&amp;lt;Tweet&amp;gt; の管理クラスを運用するのにとても役立った。\nFragmentが状態をあまり持たなくなったので、結果的に画面のローテーションにも対応できたようだ。\n\nFabric Twitter Kit\n\nTwitter周りの処理はまじめにやっていたら２日では仕上がらない気がしていたので、完全にFabricに頼ってしまうことにした。\n\nFabricはホントにすごくて、認証はボタンをひとつ置くだけだし、基本的なAPIアクセスも数行のコードだけで実現できてしまう。\n\n自分でAPI周りの処理を書きたい時のためにリクエストヘッダに付加する情報も簡単にアクセスできるよう準備してあるし、もう至れり尽くせりである。\n\n小洒落たことをしようと思わなければ、「自分のアプリ内で関連ツイートを表示」みたいな要件はさくっと満たせてしまう。\n軽くTwitterアプリ作ってみたいなー、という諸兄はぜひ一度Fabricを使ってみてはいかがだろうか。\n\nただ、実はFabricのTwitterSDKはRecyclerViewに対応していなかったりRxJavaをサポートしてなかったりしたので、ListView用のクラスを参考にしつつRecyclerView用のクラスを書いたり、Timelineクラスをリアクティブに扱うためのクラスを自作したりすることになった。\n\nこのへん、おそらくサードパーティの開発者が使うことを想定してないであろうクラスを直でつかったりしてるのでSDKの仕様変更があったら大変なことになりそう。\n\nRxAndroid\n\nFabric Twitter SDKはそのままだと普通のコールバック形式のAPIなので、RxJavaでリアクティブに扱えるようにラッパークラスを用意してみた。\n最初は Observable&amp;lt;List&amp;lt;Tweet&amp;gt;&amp;gt; にしていたんだけど、 最終的に取得した Tweet オブジェクトをTimelineのラッパークラスでまとめて管理するようにし、かつ Adapter クラスでもそのTimelineのラッパークラスを直接見るようにしたので、 Observable では新しいTweet オブジェクトを「どの位置にいくつ追加したか」を通知するだけにした(通知先では Adapter#notifyItemRangeInserted を呼ぶだけ)。\n\nあとは、SDKの提供するお気に入り追加APIがRetrofit使ってるにも関わらずコールバック形式だったので Observable を戻り値にするAPIを用意してみたり。こういう拡張の余地を残しといてくれるの、とても使いやすくてよい。\n\nRealm\n\nSearch API経由だと、自分がそのTweetをお気に入り済みかどうかわからない、というAPIの制約があるので、このアプリからふぁぼったかどうか、を保存している。\n\nあとは、入力したキーワードの保存。\n\nアーキテクチャについて\n\n最初は Mortar/Flow 使ってMVPだ！　とも思っていたんだけど、「２日くらいでつくれるやつ」という制約があったので何度か作ったことのあるActivity/Fragmentを使ったベーシックな構成にしている。\n機会があったらMVPで作りなおしてみよう。\n\nパッケージ構成は以下のとおり\n\nnet.yslibrary.photosearcher\n    ├── event               // Ottoのイベントクラス\n    ├── graph               // DaggerのComponentとかModuleとかアノテーションとか\n    │   ├── component\n    │   ├── module\n    │   └── qualifier\n    ├── model               // モデルクラス類\n    │   ├── api             // RetrofitのAPI interfaceとか\n    │   ├── dto             // アプリで使う永続しないPOJO\n    │   ├── entity          // RealmObjectを継承したデータベースエンティティ\n    │   ├── enums           // enum\n    │   ├── helper          // ヘルパーパッケージ(正直Utilパッケージと区別ない)\n    │   └── rx              // 独自Observable/Operatorクラス類\n    ├── ui\n    │   ├── activity        // Activity\n    │   ├── adapter         // RecyclerView/ViewPagerのアダプタ類\n    │   │   └── decoration  // RecyclerViewのItemDecorationクラス\n    │   ├── fragment        // Fragment\n    │   ├── listener        // Activity/Fragmentのリスナinterface\n    │   └── view            // Custom View\n    └── util                // Utility\n\n\n総括\n\n二日間の目標で走り始めたけど、結局三日間くらいかかってしまった(Wakatime調べ)。\nでも、Fabric Twitter KitとかAndroid Design Support LibraryとかRecyclerViewのItemTouchHelperとか、新しい知見も結構得られたのでとても良かったと思う。\n小さな課題を設定して短期間でアプリを作るの、結構身になるようなので今後もやっていこう。\n\n今後\n\nTwitterの表示要件に沿ってないので、特にGoogle Play Storeで公開することは考えてない。\n欲しい機能があったら追加していくくらいの感覚。\n\nOpen Source!\nGithubで公開してるので、お好きに見ていただけたらいいと思います。\n\n"
} ,
  
  {
    "title"    : "最強のTwitterクライアント…ではないけど、URL共有特化Chrome Extension作った",
    "category" : "programming",
    "tags"     : " chrome-extension, javascript, twitter, omnitweety",
    "url"      : "/2015/09/10/omnitweety-tweet-from-chrome-omnibox/",
    "date"     : "September 10, 2015",
    "excerpt"  : "世間ではElectron使った「最強のTwitterクライアント」開発戦争が勃発していますね。\n\nそれに触発された、というわけでもありませんが、Chrome用のTwitter投稿Extension作ったので紹介します。\n“Omnitweety“と言います。\n\n機能紹介\n\nOmnitweetyは、ChromeのOmnibox(アドレスバー)からの投稿を可能にするだけの、シンプルなTwitterクライアントです。\n機能は下記の3つです。\n\n\n  Omniboxから投稿\n  Omniboxから、...",
  "content"  : "世間ではElectron使った「最強のTwitterクライアント」開発戦争が勃発していますね。\n\nそれに触発された、というわけでもありませんが、Chrome用のTwitter投稿Extension作ったので紹介します。\n“Omnitweety“と言います。\n\n機能紹介\n\nOmnitweetyは、ChromeのOmnibox(アドレスバー)からの投稿を可能にするだけの、シンプルなTwitterクライアントです。\n機能は下記の3つです。\n\n\n  Omniboxから投稿\n  Omniboxから、今見ているサイトのURLを投稿\n  Omniboxから、今見ているサイトのURLをコメント付きで投稿\n\n\n1. Omniboxから投稿\n\n\n\nOmniboxにフォーカスをあわせて(Macだと Cmd+L でOmniboxにフォーカスが移動します)、tw + tab/space と入力すると、Omniboxの入力モードになります。\n続けて文字を入力すると、サジェストエリアの一番上に残り文字数が表示されます。\n最後にEnterを押すと、Twitterに投稿されます(成功するとNotificatinが表示されます)。\n\n2. Omniboxから、今見ているサイトのURLを投稿\n\n\n\ntw+tab/space で Omnitweetyの入力モードに入ったあと、 :share と入力すると、現在表示中のタブ情報を取得し、 NowBrowsing: {title} {url} のフォーマットで投稿できるようになります。\nタイトルが長すぎる場合は140字ちょうどになるよう、適当に丸めます。(一応t.coの短縮URL使用後の文字数を見ているので、極端にタイトルが短くなりすぎることはないと思います。)\n\n3. Omniboxから、今見ているサイトのURLをコメント付きで投稿\n\n\n\n上記の :share コマンドのあとに半角スペースを挟んで何か入力すると、入力した内容が NowBrowsing を置換します。\nコメントが長くなると、共有ページのタイトルを削っていきます。長くなりすぎるとツイートに失敗します。\n\n機能は以上です。\n\n今後の展望\n\nひと通り自分のほしい機能は実装しましたが、まだいくつか改善したいと思っている点があります。\n機会を見つけて改善していきたい。\n\n\n  コメント付きでシェアするときの残り文字数表示\n  URLシェア時のプレフィックスを編集可能にする\n  任意のタイミングでTwitterにログインさせる(今はインストール時のみ)\n\n\nOpen Source!\n\nhttps://github.com/yshrsmz/omnitweety\n\nOmnitweetyのソースコードはGithubで公開しています。\nissue/pull requestもお気軽にどうぞ\n\nリンク\n\n\n  Omnitweety - Chrome ウェブストア\n  yshrsmz/omnitweety\n\n"
} ,
  
  {
    "title"    : "(Android) ネストしたFragmentのonActivityResultが呼ばれない件",
    "category" : "programming",
    "tags"     : " android, java",
    "url"      : "/2015/08/21/nested-fragment-onactivityresult-not-called/",
    "date"     : "August 21, 2015",
    "excerpt"  : "現象\nActivity &amp;gt; Fragment &amp;gt; ViewPager &amp;gt; Fragment\n\n\nという構成にするとViewPager内のFragmentでonActivityResultが呼ばれなくなってしまう。\nまた、Activity直下にFragmentが複数あると、想定していないFragmentのonActivityResultが呼ばれてしまう。\n\n例:\nActivity &amp;gt; (DrawerFragment + (ParentFragment &amp;gt; Vie...",
  "content"  : "現象\nActivity &amp;gt; Fragment &amp;gt; ViewPager &amp;gt; Fragment\n\n\nという構成にするとViewPager内のFragmentでonActivityResultが呼ばれなくなってしまう。\nまた、Activity直下にFragmentが複数あると、想定していないFragmentのonActivityResultが呼ばれてしまう。\n\n例:\nActivity &amp;gt; (DrawerFragment + (ParentFragment &amp;gt; ViewPager &amp;gt; ChildFragment))\n\n\n↑このような構成の時、ViewPager内のChildFragmentからstartActivityForResultを呼ぶと、ChildFragmentのonActivityResultが呼ばれないだけでなく、DrawerFragmentのonActivityResultが呼ばれてしまったりする。\nなお、ParentFragmentのonActivityResultも呼ばれない。\n\n原因\nどのFragmentからActivityが呼ばれたかは、そのFragmentが属するFragmentManager内のIndexで管理しているようだ。\n\nネストされたFragmentからActivityを呼ぶと、FragmentのIndexは親FragmentのFragmentManager(getChildFragmentManagerで取得するFragmentManager)から取得される。\n\nしかし、Activity#onActivityResultで呼び出し元のFragmentを判定する時は、ActivityのFragmentManagerから対応するFragmentを取得しようとするようである。そのため、見当違いのFragmentのonActivityResultが呼ばれてしまう。\n\nなお、サポートライブラリではそもそも親Fragmentから子FragmentのonActivityResultを呼ぶ機能はない模様。\n\n対策\nよくわからないFragmentのonActivityResultが呼ばれてしまう件は、とりあえず無視。そのFragmentにonActivityResultを実装していなければ問題ないし、実装している場合もきちんと条件分岐していれば問題ない。\n\n子FragmentのonActivityResultに関しては、下記のようにして対応する\n\n\n  子Fragmentで結果を受け取りたい場合は、親FragmentのstartActivityForResultを呼ぶ。\n  親FragmentではonActivityResultを受け取れるので、親FragmentのonActivityResult内で、すべての子FragmentのonActivityResultを手動で呼ぶ\n\n\n// BaseFragment.java\nprotected void callChildOnActivityResult(FragmentManager fm, \n    int requestCode, int resultCode, Intent data) {\n    \n    List&amp;lt;Fragment&amp;gt; fragments = fm.getFragments();\n    if (fragments != null &amp;amp;&amp;amp; fragments.size() &amp;gt; 0) {\n        for (Fragment fragment : fragments) {\n            fragment.onActivityResult(requestCode, resultCode, data);            \n        }\n    }\n\n}\n\n\n上記のようなメソッドを用意し、必要な箇所(親FragmentのonActivityResult)で呼ぶとよさげ。\n\n// FooActivity.java\npublic static void startActivity(Fragment fragment) {\n    Intent intent = new Intent(fragment.getActivity(), FooActivity.class);\n    \n    // 親Fragmentがあれば親Fragmentから呼ぶ\n    Fragment parentFragment = fragment.getParentFragment();\n    if (parentFragment == null) {\n        fragment.startActivityForResult(intent, &quot;fragment_content&quot;);\n    } else {\n        parentFragment.startActivityForResult(intent, &quot;fragment_content&quot;);\n    }\n}\n\nActivityを開始するときはこんな感じ。\n"
} ,
  
  {
    "title"    : "(Android) アプリのbackground/foregroundを検知する",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/07/30/android_how_to_detect_app_is_background_or_not/",
    "date"     : "July 30, 2015",
    "excerpt"  : "Update 2018.01.18\n\n2017年のGoogle I/OでArchitecture Componentsが発表されました。\n\nArchitecture Componentsにはいろいろな機能が含まれますが、その中にLifecycleという一連のコンポーネントがあります。\n\nこれはいろいろなクラスにAndroidのActivityやFragmentといったコンポーネントのライフサイクルを監視する機能を追加するためのコンポーネントです。\nこの中に、ProcessLifecycle...",
  "content"  : "Update 2018.01.18\n\n2017年のGoogle I/OでArchitecture Componentsが発表されました。\n\nArchitecture Componentsにはいろいろな機能が含まれますが、その中にLifecycleという一連のコンポーネントがあります。\n\nこれはいろいろなクラスにAndroidのActivityやFragmentといったコンポーネントのライフサイクルを監視する機能を追加するためのコンポーネントです。\nこの中に、ProcessLifecycleOwnerというコンポーネントが用意されています。\n下に記載しているMyActivityLifecycleCallbacksの代わりに\b似たようなLifecycleObserverを実装して、Application#onCreateとかでProcessLifecycleOwner#addObserverすると、実装がよりシンプルになるかもしれません。\n\nProcessLifecycleOwnerを使った際のざっくりしたイベントの対照表は下記のとおりです。\n\n\n  \n    \n      Lifecycle.Event\n      対応するイベント\n    \n  \n  \n    \n      ON_CREATE\n      アプリ起動時に一度だけ\n    \n    \n      ON_RESUME\n      アプリ起動時/バックグラウンドからの復帰時\n    \n    \n      ON_START\n      アプリ起動時/バックグラウンドからの復帰時\n    \n    \n      ON_PAUSE\n      アプリ終了時/バックグラウンド\bへの移行時\n    \n    \n      ON_STOP\n      アプリ終了時/バックグラウンド\bへの移行時\n    \n    \n      ON_DESTROY\n      一度も呼ばれない\n    \n  \n\n\n—更新終わり。↓下から本文\b—\n\n\n\n単純にonResume/onStartでバックグラウンド復帰時の処理を書くとActivityの生成時やバックキーで戻ってきた時等、処理しなくていいタイミングでもコードが走ってしまいます。\n\nActivityManager#getRunningAppProcessesで実行中のプロセスを取得し、アプリのforeground/backgroundステータスを見ることもできますが、一部端末でうまく動作しないことがあるようです(そもそもbackground/foregroundを判定するためだけに実行中のプロセスを全部調べるのもアホくさい気がします)。\n\nそこで、API14(ICS)から追加された、Application.ActivityLifecycleCallbacksを利用します。このAPIを利用すると、すべてのActivityのライフサイクルを監視し、任意の処理を実行することができます。\n\nコードは下記のとおりです。\n\npublic class MyApp extends Application {\n\n    private AppStatus mAppStatus = AppStatus.FOREGROUND;\n\n    public void onCreate() {\n        super.onCreate();\n\n        registerActivityLifecycleCallbacks(new MyActivityLifecycleCallbacks());\n    }\n\n    public MyApp get(Context context) {\n        return (MyApp) context.getApplicationContext();\n    }\n\n    public AppStatus getAppStatus() {\n        return mAppStatus;\n    }\n\n    // check if app is foreground\n    public boolean isForeground() {\n        return mAppStatus.ordinal() &amp;gt; AppStatus.BACKGROUND.ordinal();\n    }\n\n    public enum AppStatus {\n        BACKGROUND,                // app is background\n        RETURNED_TO_FOREGROUND,    // app returned to foreground(or first launch)\n        FOREGROUND;                // app is foreground\n    }\n\n    public class MyActivityLifecycleCallbacks implements ActivityLifecycleCallbacks {\n\n        // running activity count\n        private int running = 0;\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle bundle) {\n\n        }\n\n        @Override\n        public void onActivityStarted(Activity activity) {\n            if (++running == 1) {\n                // running activity is 1,\n                // app must be returned from background just now (or first launch)\n                mAppStatus = AppStatus.RETURNED_TO_FOREGROUND;\n            } else if (running &amp;gt; 1) {\n                // 2 or more running activities,\n                // should be foreground already.\n                mAppStatus = AppStatus.FOREGROUND;\n            }\n        }\n\n        @Override\n        public void onActivityResumed(Activity activity) {\n        }\n\n        @Override\n        public void onActivityPaused(Activity activity) {\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n            if (--running == 0) {\n                // no active activity\n                // app goes to background\n                mAppStatus = AppStatus.BACKGROUND;\n            }\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {\n        }\n\n        @Override\n        public void onActivityDestroyed(Activity activity) {\n        }\n    }\n}\n\n\nあとは任意の場所でMyApp.get(getContext()).getAppStatus()とか、MyApp.get(getContext()).isForeground()とか呼んであげれば、アプリが現在foregroundにいるのかbackgroundにいるのか、判定することができます。\n\nbackgroundからforegroundに復帰した時かどうか知りたい！ってときはMyApp.get(getContext()).getAppStatus()でAppStatus.RETURNED_TO_BACKGROUNDと比較してあげればいいです。\n\n軽く仕組みを説明すると、ActivityのonStart/onStopに相当するonActivityStarted/onActivityStoppedで現在アクティブなActivityをカウントしているだけです。\n\nActivity間を遷移していると、最低でも今いるActivityと、一つ前のActivityがアクティブな状態になります(running &amp;gt; 1な状態)。\nアプリがbackgroundになると、すべてのActivityがonStopを通るので、非アクティブな状態になります(running == 0な状態)。\nまた、アプリがforegroundに復帰すると直前まで表示されていたActivityのonStartのみが実行されるので、running == 1になります。\n\nこの状態の変化を利用して、アプリのbackground/foregroundステータスを検知するのが上記のコードです。\n\nActivityが複数作られる、という前提のコードなので1Activity複数FragmentなアプリやMortar/Flowなアプリだと意味がなさそうです。\n\nこちらからは以上です。\n"
} ,
  
  {
    "title"    : "(Android) キーボードの表示切り替えを検知する",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/07/16/android-detect-keyboard-visibility-change/",
    "date"     : "July 16, 2015",
    "excerpt"  : "Androidではキーボードの表示・非表示の切り替えを判定するイベントは、標準では用意されていません。\nそこで、自前でキーボードの表示状態を判定する必要があります。\n\n日本語のドキュメントを探したところ、LinearLayout等を拡張し、onMeasureでディスプレイの高さとビューの高さを比較する実装の記事をいくつか発見しました。\n\nしかし、この方法だと全レイアウトを拡張したものを用意せねばならず、効率的ではありません。\n\nこの記事では、ViewTreeObserverを利用したもう少...",
  "content"  : "Androidではキーボードの表示・非表示の切り替えを判定するイベントは、標準では用意されていません。\nそこで、自前でキーボードの表示状態を判定する必要があります。\n\n日本語のドキュメントを探したところ、LinearLayout等を拡張し、onMeasureでディスプレイの高さとビューの高さを比較する実装の記事をいくつか発見しました。\n\nしかし、この方法だと全レイアウトを拡張したものを用意せねばならず、効率的ではありません。\n\nこの記事では、ViewTreeObserverを利用したもう少しイケてる実装方法を紹介します。\n\nコードとしては以下のとおりです。\n\npublic interface OnKeyboardVisibilityListener {\n  public void onVisibilityChanged(boolean isVisible);\n}\n\npublic final void setKeyboardListener(final OnKeyboardVisibilityListener listener) {\n  final View activityRootView = ((ViewGroup)getActivity().findViewById(android.R.id.content)).getChildAt(0);\n\n  activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n\n    private boolean wasOpend;\n    \n    private final Rect r = new Rect();\n    \n    @Override\n    public void onGlobalLayout() {\n      activityRootView.getWindowVisibleDisplayFrame(r);\n      \n      // 画面の高さとビューの高さを比べる\n      int heightDiff = activityRootView.getRootView().getHeight() - r.height();\n        \n      boolean isOpen = heightDiff &amp;gt; 100;\n      \n      if (isOpen == wasOpened) {\n          // キーボードの表示状態は変わっていないはずなので何もしない\n          return;\n      }\n        \n      wasOpened = isOpen;\n      \n      listener.onVisibilityChanged(isOpen);\n    }   \n  })\n}\n\n\nActivityに記述することを想定していますが、Activityが取得できればFragmentでもどこでも構いません。\ngetWindowVisibleDisplayFragme(Rect)で、ビューが配置されているディスプレイのサイズが取得できます。\nandroid.R.id.content直下の一つ目の子要素を取得することで、ユーザーがいじれる一番外側のビューを取得できます。\n基本的にはActivityのレイアウトXMLで記述しているFrameLayoutやLinearLayout、RelativeLayoutのような要素です。\n\nonGlobalLayoutはレンダリング後に呼ばれるので、ここでディスプレイの高さと実際のビューの高さを比べることで画面にビュー以外の「何か」が表示されているかどうか判定することができます。\n\nここでは、差が100ピクセルもあれば、その表示されている「何か」はキーボードだろうと仮定しています。\n(2015/7/16追記: コードでは100ピクセル決め打ちしていますが、実際には100sp(ディスプレイ解像度にあった値)で検知するのがよいです)\n\nこの記述をActivityの基礎クラスにでも書いておけば、それを継承するすべてのActivityで使用することができます。\nViewGroup系のクラスを拡張する必要がないので、非常にコードやレイアウトXMLが綺麗になると思います。\n\nサンプルのコードではinterfaceを利用したコールバック形式で書いていますが、Ottoのようなイベントバスライブラリを利用してもいいと思います(私も実業務ではOttoと組み合わせて使用しています)。\n\nこちらからは以上です。\n\n参考: How to check visibility of software keyboard in Android? - Stack Overflow\n"
} ,
  
  {
    "title"    : "(Android) ButterKnife 7.0への移行ガイド",
    "category" : "programming",
    "tags"     : " android, java",
    "url"      : "/2015/06/29/how-to-migrate-to-butterknife-7/",
    "date"     : "June 29, 2015",
    "excerpt"  : "2015/06/28、ButterKnifeの7.0.0がリリースされました。\n6.x系からAPIの変更が何点かあるので、簡単に移行手順をまとめます\n\nアノテーション\n@InjectView/@InjectViews -&amp;gt; @Bind\n\nViewを変数にひもづけるアノテーションが、@Bindに変更になりました。\n複数の場合も@Bindです。とりあえず全部置換しましょう。\n\n@Optionalの廃止\n\nレイアウトに存在しないかもしれないViewの時、今までは@Optionalを利用して...",
  "content"  : "2015/06/28、ButterKnifeの7.0.0がリリースされました。\n6.x系からAPIの変更が何点かあるので、簡単に移行手順をまとめます\n\nアノテーション\n@InjectView/@InjectViews -&amp;gt; @Bind\n\nViewを変数にひもづけるアノテーションが、@Bindに変更になりました。\n複数の場合も@Bindです。とりあえず全部置換しましょう。\n\n@Optionalの廃止\n\nレイアウトに存在しないかもしれないViewの時、今までは@Optionalを利用していましたが、7.0からは@Nullableを使います。support-annotationsライブラリの@Nullableでも、別のライブラリの@Nullableでも構わないようです。\n\nメソッド名\n下記のように変更になっています。\n\nButterKnife.inject -&amp;gt; ButterKnife.bind\nButterKnife.reset -&amp;gt; ButterKnife.unbind\n\nProguard設定\nButterKnifeによって自動生成されるクラス名がFooActivity$$ViewInjectorからFooActivity$$ViewBinderに変更されたので、Proguard設定も変える必要があります。\n下記のようになります。\n\n-keep class butterknife.** { *; }\n-dontwarn butterknife.internal.**\n-keep class **$$ViewBinder { *; }\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &amp;lt;fields&amp;gt;;\n}\n\n-keepclasseswithmembernames class * {\n    @butterknife.* &amp;lt;methods&amp;gt;;\n}\n\n\n新しく追加された機能\nResource Binding\n\nstringやbool, color等のxmlに定義されたリソースを変数にバインド出来るようになりました。\n下記のアノテーションを使います。\n\n\n  @BindBool: R.boolをbooleanにバインド\n  @BindColor: R.colorをint/ClorStateListにバインド\n  @BindDimen: R.dimenをint(ピクセルサイズ)あるいはfloat(正確な数値)にバインド\n  @BindDrawable: R.drawableをDrawableにバインド\n  @BindInt: R.intをintにバインド\n  @BindString: R.stringをStringにバインド\n\n\nこちらからは以上です。\n\n参考: butterknife/CHANGELOG.md at master · JakeWharton/butterknife\n"
} ,
  
  {
    "title"    : "ChromeExtensionをウェブストアに公開する",
    "category" : "programming",
    "tags"     : " chrome-extension",
    "url"      : "/2015/06/27/how-to-publish-chrome-extension/",
    "date"     : "June 27, 2015",
    "excerpt"  : "ChromeのOmniboxからTwitterに投稿するやつを作った時に調べたのでまとめておく。\n\n1. 開発者登録\n\nまずは開発者登録が必要。\nChromeウェブストアにアクセスし、右上のメニューから「ディベロッパーダッシュボード」へ。\n開発者登録には5ドル必要なので、まずは粛々と5ドル払う。\n同じページの下の方で、ディベロッパーアカウントの表示名等を変えられるので必要に応じて編集する。\n\n2. 拡張機能をアップロード\n\n作成した拡張機能をzipで圧縮してアップロード。\nディベロッパーダ...",
  "content"  : "ChromeのOmniboxからTwitterに投稿するやつを作った時に調べたのでまとめておく。\n\n1. 開発者登録\n\nまずは開発者登録が必要。\nChromeウェブストアにアクセスし、右上のメニューから「ディベロッパーダッシュボード」へ。\n開発者登録には5ドル必要なので、まずは粛々と5ドル払う。\n同じページの下の方で、ディベロッパーアカウントの表示名等を変えられるので必要に応じて編集する。\n\n2. 拡張機能をアップロード\n\n作成した拡張機能をzipで圧縮してアップロード。\nディベロッパーダッシュボードの「新しいアイテムを追加する」ボタンからアップロードできる。\nアップロードすると、いろいろ詳細情報を記入するページへ遷移するので、必要な箇所を適当に埋めましょう。\n入力が終わったら一番下の「公開」ボタンを押せば、公開されます。\n"
} ,
  
  {
    "title"    : "Windowsでnode.jsを動かすには",
    "category" : "programming",
    "tags"     : " windows, node.js",
    "url"      : "/2015/06/17/things-to-do-when-failed-to-run-node-on-windows/",
    "date"     : "June 17, 2015",
    "excerpt"  : "Electronの案件でWindows使う必要が出てきて、Node.jsのインストール周りで躓いたのでメモなど。\n(正確にはnode-gypでmoduleビルドするときに躓いた)\n\n1. Chocolateyのインストール\n\nいつの間にかWindowsにもHomebrewやapt-getのようなパッケージ管理ツールが登場しています。\nまずはこれインストールしときましょう。\n\n管理者モードでコマンドプロントを開き、下記のコマンドをコピペして実行しましょう。\n\n@powershell -NoP...",
  "content"  : "Electronの案件でWindows使う必要が出てきて、Node.jsのインストール周りで躓いたのでメモなど。\n(正確にはnode-gypでmoduleビルドするときに躓いた)\n\n1. Chocolateyのインストール\n\nいつの間にかWindowsにもHomebrewやapt-getのようなパッケージ管理ツールが登場しています。\nまずはこれインストールしときましょう。\n\n管理者モードでコマンドプロントを開き、下記のコマンドをコピペして実行しましょう。\n\n@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n\n\nPowershell使ってる場合はこっちです↓\n\niex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))\n\n\n処理が終わったらコマンドラインを再起動すると、chocoコマンドが使えるようになってます。\n詳しくはChocolateyのドキュメント見てね！\n\n2. Node.jsのインストール\n\nChocolateyでNode.jsをインストールします。\nこれも管理者モードで実行しましょう。Chocolateyは基本管理者モードで実行したほうがいいみたい。\n\nchoco install nodejs\n\n\n3. Python2.xのインストール\n\nnode-gypで使ってるpythonが2.x系のようなので(2015/6/17時点)、これもChocolateyでインストールします\n\nchoco install python2\n\n\n4. Miconsoft Visual Studio Express 2013のインストール\n\nビルドツールの関係でこれもインストールする必要があります。\n私はMicrosoftのページからMicrosoft Visual Studio Express 2013 for Windows Desktop Update 4を探してきてインストールしたらビルドが通るようになりました。最新のnode-gypなら2013以降のvisual studioでも動くはず。\nまた、Chocolatey上にもパッケージがあるので、それ使ってもいいかもしれません(検証してない)\n\nchoco installvisualstudioexpress2013windowsdesktop\n\n\nこれでネイティブのモジュールもビルドできるようになる、はず。\n\nこちらからは以上です。\n\n参考: http://stackoverflow.com/questions/21365714/nodejs-error-installing-with-npm#answer-21366601\n"
} ,
  
  {
    "title"    : "HomebrewからWineをインストールできないときにすべきこと",
    "category" : "programming",
    "tags"     : " wine, homebrew",
    "url"      : "/2015/06/12/things-to-do-when-failed-to-install-wine-via-homebrew/",
    "date"     : "June 12, 2015",
    "excerpt"  : "WineはUniversalバイナリなので、依存関係にあるformulaeを片っ端から--universalつきでインストールし直す必要があります。\nまた、依存するformulaeが依存するformulaeも--universalでインストールしなおさなければいけません。\n\n細かい実行ログは\n\nbrew install wine -v\n\n\nで確認できるので、エラーログ見ながら怪しそうなformulaeを片っ端から--universalでインストールし直すとよさそうです。\n\n私の場合は\n\n\n...",
  "content"  : "WineはUniversalバイナリなので、依存関係にあるformulaeを片っ端から--universalつきでインストールし直す必要があります。\nまた、依存するformulaeが依存するformulaeも--universalでインストールしなおさなければいけません。\n\n細かい実行ログは\n\nbrew install wine -v\n\n\nで確認できるので、エラーログ見ながら怪しそうなformulaeを片っ端から--universalでインストールし直すとよさそうです。\n\n私の場合は\n\n\n  fontconfig\n  freetype\n  gd\n  jpeg\n  libtiff\n  libpng\n\n\nこの辺りのformulaeをインストールし直したら無事wineがビルドできました。\n\nまた、古くからHomebrewを使っているユーザーは、Homebrew版のlibiconvがインストールされていることがあるので注意が必要です。サクッとアンインストールしてしまいましょう。libiconvはMac標準で搭載されているので、Homebrew版は廃止されたそうです。\n\nこちらからは以上です。\n"
} ,
  
  {
    "title"    : "Parse.comのパスワードリセット画面をカスタマイズする",
    "category" : "programming",
    "tags"     : " parse",
    "url"      : "/2015/05/08/customize-parse-com-password-reset-page/",
    "date"     : "May 8, 2015",
    "excerpt"  : "日本語記事が見当たらないので書いてみる\n下記の手順で、Parse.comのパスワード変更画面をカスタマイズすることができます。\n\n1. Parse.comの設定画面 &amp;gt; Emailセクションに移動\n\n2. Customize User-Facing Pages を探す\ntemplateというリンクからテンプレートhtmlファイルをダウンロードする\n各ファイルの用途は下記のとおりです\n\nchoose a new password: 新しいパスワードの入力画面\npassword chan...",
  "content"  : "日本語記事が見当たらないので書いてみる\n下記の手順で、Parse.comのパスワード変更画面をカスタマイズすることができます。\n\n1. Parse.comの設定画面 &amp;gt; Emailセクションに移動\n\n2. Customize User-Facing Pages を探す\ntemplateというリンクからテンプレートhtmlファイルをダウンロードする\n各ファイルの用途は下記のとおりです\n\nchoose a new password: 新しいパスワードの入力画面\npassword changed: パスワード変更完了画面\nemail verified: ユーザー登録時に設定したメールアドレスの確認完了画面(メールアドレスの確認機能を有効にしている場合のみ必要)\ninvalid link: 無効なリンク(使用済みのURLを再度使った時とか)\n\n3. ダウンロードしたファイルを好きなように編集する。\nコアロジックさえ変えなければ、スタイルつけたり入力内容のバリデーションしたり、自由にできます。\n\n4. 自前のサーバ、あるいは適当なホスティングサービスにアップロードする\nParseでもホスティングできるようなので、それ調べてみても良さそうです\n\n5. Parse.comの設定画面で、アップロードしたファイルのパスを設定する\nテンプレートhtmlファイルをダウンロードした箇所で、右側の入力エリアにアップロードしたHTMLファイルをフルパスで設定します。http://foo.com/bar/choose_password.htmlみたいな感じです\n\n以上です\n\n補足: パスワード設定画面のURLを任意のドメインにしたいとき\n上記の設定だけだと、パスワード変更画面のURLはParse.comになってしまいます。\n自分のアプリケーションと同じドメインにしたい時は、同じEmail設定画面で、Hide Parse.com URLsの箇所にあるリンクからHTMLファイルをダウンロードし、任意のドメインでそのファイルをホスティングしてください。\n\nとくにファイルを編集する必要はありません。そのままホスティングし、そのURLをParse.comに設定します。\n\nすると、パスワード変更画面のURLがそのページのURLになるはずです。\n"
} ,
  
  {
    "title"    : "Android Supoprt Library 22.1がリリースされたので変更点など",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/04/22/android-support-library-221-released/",
    "date"     : "April 22, 2015",
    "excerpt"  : "2015/4/21、Android Support Libraryの22.1が公開されました。\n公式ブログから変更点を抄訳してます\n\nSupport v4\n\n\n  DrawableCompatで、drawable tintingがAPI4以上で使用可能に\n    \n      DrawableCompat.wrap(Drawable)でdrawableをラップして、setTint(), setTintList(), setTintMode()を使おう\n    \n  \n  Paletteの内...",
  "content"  : "2015/4/21、Android Support Libraryの22.1が公開されました。\n公式ブログから変更点を抄訳してます\n\nSupport v4\n\n\n  DrawableCompatで、drawable tintingがAPI4以上で使用可能に\n    \n      DrawableCompat.wrap(Drawable)でdrawableをラップして、setTint(), setTintList(), setTintMode()を使おう\n    \n  \n  Paletteの内部ロジックの一部をColorUtilsで公開\n  Lollipopで追加された、building authentic motionの重要な要素のInterpolatorをSupport v4に追加\n    \n      FastOutLinearInInterpolator\n      FastOutSlowInInterpolator\n      LinearOutSlowInInterpolator\n    \n  \n  PathInterpolatorCompatを追加\n  Space WidgetをGridLayout LibraryからSupport v4に移動\n\n\nAppCompat\n\n\n  ActionBarActivityがDeprecatedに\n  代わりにAppCompatActivityを使うこと\n  AppCompatActivityの内部ロジックはAppCompatDelegateを通じてどんなActivityでも使える\n    \n      ライフサイクルメソッド\n      テーマ\n      color tinting\n      etc…\n      もうActionBarActivity/AppCompatActivityを継承する必要はない！(AppCompatActivity使うのが一番簡単なことに変わりはないけど)\n    \n  \n  マテリアルデザインに対応した、AppCompatDialogの追加\n  AlertDialogと同じAPIのsupport.v7.app.AlertDialogも追加(AppCompatDialogの機能を含む)\n  WidgetのColorTintingは、下記のWidgetを使うことでレイアウトのinflate時に自動的に行われる。既存のものと置き換えて使おう\n    \n      AppCompatAutoCompleteTextView\n      AppCompatButton\n      AppCompatCheckBox\n      AppCompatCheckedTextView\n      AppCompatEditText\n      AppCompatMultiAutoCompleteTextView\n      AppCompatRadioButton\n      AppCompatRatingBar\n      AppCompatSpinner\n      AppCompatTextView\n    \n  \n  API11以上で、各Viewに対してandroid:themeが使用可能に(app:themeはdeprecated)\n\n\nLeanback\n\n(触ってないからよくわからん…)\n\n\n  よりよい10インチ端末サポート\n  新しいガイドステップ機能のサンプル\n  たくさんのBugfix!\n\n\nRecyclerView\n\n\n  新しいデータ構造SortedList\n    \n      ソートされたデータの管理が簡便に\n      バッチ処理できる\n    \n  \n\n\nPalette\n\n\n  パフォーマンスの向上。クオリティを指定しなくても6-8倍速くなった\n  Builderパターンで初期化。Palette.generate(Bitmap)じゃなくてPalette.from(Bitmap)を使ってPalette.Builderを取得してね\n\n\nRenderScript\n\n\n  信頼性とパフォーマンスの向上\n  ネイティブのRenderScriptが使えるか、の判定アルゴリズムの改善\n  ScriptIntrinsicHistogramとScriptIntrinsicResizeの追加\n\n\n\nだいたいこんな感じです。\n\nActionBarActivityがDeprecatedになったのが個人的には一番驚きました。\nToolbarのサポートをしたり、名前と実態に齟齬が生まれてるのが理由だそうです。\n\nAppCompatがだいぶ充実したようなので、アプリのマテリアルデザイン対応が捗りそうですね\n\n*一応qiitaにも\n\n"
} ,
  
  {
    "title"    : "(Ghost) セルフホスティングなGhostをアップデートする",
    "category" : "programming",
    "tags"     : " ghost",
    "url"      : "/2015/04/21/how-to-update-self-hosting-ghost/",
    "date"     : "April 21, 2015",
    "excerpt"  : "Ghostは月一回前後のスパンでアップデートをリリースしています。\n新しい機能やBugfix、脆弱性対応を取り入れるためにはできる限り頻繁にアップデートを反映していきたいものです。\n\n今回はその手順を簡単に。\n\n\n  新しいGhostのzipをダウンロードする\n  作業フォルダに展開する\n  インストール済みのGhostからアップデート関連のファイルを削除する\n  削除したファイルを作業フォルダに展開したアップデート用ファイルからコピーする\n  テーマの更新\n  依存ライブラリの更新\n  ...",
  "content"  : "Ghostは月一回前後のスパンでアップデートをリリースしています。\n新しい機能やBugfix、脆弱性対応を取り入れるためにはできる限り頻繁にアップデートを反映していきたいものです。\n\n今回はその手順を簡単に。\n\n\n  新しいGhostのzipをダウンロードする\n  作業フォルダに展開する\n  インストール済みのGhostからアップデート関連のファイルを削除する\n  削除したファイルを作業フォルダに展開したアップデート用ファイルからコピーする\n  テーマの更新\n  依存ライブラリの更新\n  パーミッションの更新\n  Ghostの再起動\n\n\n1. 新しいGhostのzipをダウンロードする\n\nhttps://ghost.org/download/ から最新のzipのURLを取得します。 \nちなみに、 https://ghost.org/zip/ghost-latest.zip このURLで最新版がとれるみたいです。\n\nURLがわかったら、適当な作業ディレクトリにダウンロードします。\n今回は~/tmp/にダウンロードします。\n\n※ここでrootとかghost管理用ユーザとか、適切なアカウントに切り替えるのを忘れないように\n\n$ curl -L https://ghost.org/zip/ghost-latest.zip -o ~/tmp/ghost.zip\n\n\n2. 作業フォルダに展開する\n\nダウンロードしてきたzipファイルを解凍します。\nzipと同じ~/tmp/に展開します。\n\n$ unzip -uo ~/tmp/ghost.zip -d ~/tmp/ghost\n\n\n3. インストール済みのGhostからアップデート関連のファイルを削除する\n\nGhostインストールディレクトリから、下記のファイル・ディレクトリを削除します\n\n\n  index.js\n  package.json\n  npm-shrinkwrap.json\n  core/\n\n\n$ cd /your/ghost/dir\n$ rm index.js\n$ rm package.json\n$ rm npm-shrinkwrap.json\n$ rm -rf core/\n\n\n4. 削除したファイルを作業フォルダに展開したアップデート用ファイルからコピーする\n\n~/tmp/ghostから、先ほど削除したファイル・ディレクトリと同名のものをコピーしてきます。\n\n\n  index.js\n  package.json\n  npm-shrinkwrap.json\n  core/\n\n\n$ cd /your/ghost/dir\n$ cp ~/tmp/ghost/index.js index.js\n$ cp ~/tmp/ghost/package.json package.json\n$ cp ~/tmp/ghost/npm-shrinkwrap.json npm-shrinkwrap.json\n$ cp -r ~/tmp/ghost/core/ core/\n\n\n5. テーマの更新\n\nこのタイミングで、必要であればテーマも更新しておきます。\n標準のCasperを使ってるのであれば、上記の要領でcontent/themes/casper/を削除＆コピーしてきましょう。\n\n6. 依存ライブラリの更新\n\n$ cd /your/ghost/dir\n$ npm install --production\n\n\n7. パーミッションの更新\n\nghost管理ユーザで作業してる場合は大丈夫ですが、違うユーザ使ってる場合はghostユーザに所有者変えときましょう\n\n$ chown -R ghost:ghost /your/ghost/dir\n\n\n8. Ghostの再起動\n\n再起動します。\ndaemon化の方法によっていろいろだと思うので各自いい感じにお願いします\ninitスクリプト使ってる場合は\n\n$ /etc/init.d/ghost restart\n\n\nとか\n\n$ service ghost restart\n\n\nとかそんな感じで。\n\n以上です。\nこの作業もAnsibleで自動化しておくと捗りそうですね。\n\n参考: How to upgrade self-installed Ghost\n"
} ,
  
  {
    "title"    : "(VirtualBox) ゲストOSからホスト機のローカルホストにアクセスする",
    "category" : "programming",
    "tags"     : " virtualbox, modern-ie",
    "url"      : "/2015/04/20/virtualbox-how-to-access-localhost-from-guest/",
    "date"     : "April 20, 2015",
    "excerpt"  : "モダンIEのVMでサイトの表示確認をしたいときなど、VirtualBox上のブラウザからローカルで動かしてるサイトを見たいときに使えます。\n\nVirtualBox標準の設定だと、10.0.2.2でホスト機のローカルホストにアクセスすることができます。\n\n以上です。\n\n参考: Connect to the host machine from a VirtualBox guest OS?\n",
  "content"  : "モダンIEのVMでサイトの表示確認をしたいときなど、VirtualBox上のブラウザからローカルで動かしてるサイトを見たいときに使えます。\n\nVirtualBox標準の設定だと、10.0.2.2でホスト機のローカルホストにアクセスすることができます。\n\n以上です。\n\n参考: Connect to the host machine from a VirtualBox guest OS?\n"
} ,
  
  {
    "title"    : "(Android) 端末にインストールされているアプリのAPKファイルを取得する",
    "category" : "programming",
    "tags"     : " android",
    "url"      : "/2015/04/17/android-how-to-get-apk-from-device/",
    "date"     : "April 17, 2015",
    "excerpt"  : "要ADB。\nADBさえ入っていれば、わりと簡単にゲットすることができます。\n端末をPCにつないで、下記のコマンドを実行するだけです\n\n$ adb shell pm list packages\n$ adb shell pm path com.example.someapp\n$ adb pull /path/to/target/app\n\n\n軽くコマンドの説明をします。\n\n1.  adb shell pm list packages\n\n端末に入ってるアプリのパッケージ名一覧を取得しています。\nこ...",
  "content"  : "要ADB。\nADBさえ入っていれば、わりと簡単にゲットすることができます。\n端末をPCにつないで、下記のコマンドを実行するだけです\n\n$ adb shell pm list packages\n$ adb shell pm path com.example.someapp\n$ adb pull /path/to/target/app\n\n\n軽くコマンドの説明をします。\n\n1.  adb shell pm list packages\n\n端末に入ってるアプリのパッケージ名一覧を取得しています。\nこの中から、自分が取得したいアプリのパッケージ名を探しだしてください。\n\n2. adb shell pm path com.example.someapp\n\ncom.example.someappには、1で取得したパッケージ名を入れてください。\n指定したパッケージの端末内でのフルパスを取得しています。\n\n3. adb pull /path/to/target/app\n\n/path/to/target/appには、2で取得したパッケージのフルパスを入れてください。\nおそらく、/data/app/から始まるパスです。\n\nこのコマンドで、端末からPCにAPKをダウンロードしています。\n\nこちらからは以上です。\n\n参考: adb - How do I get an apk file from an Android device? - Stack Overflow\n\n※ 2017/04/13補足\n\n上記の方法だとAndroid 7以降で、 adb pull するときに adb: error: remote object &#39;/path/to/target/app&#39; does not exist とか怒られてしまいます。\n権限周りの変更があったんだと思いますが、下記のように一度Downloadディレクトリ等アクセス権のある場所にコピーしてからだと adb pull できます。\n\nadb shell cp /path/to/target/app/base.apk /storage/emulated/0/Download\nadb pull /storage/emulated/0/Download/base.apk\n\n\n"
} ,
  
  {
    "title"    : "(Android) Bitmap too large to 〜が出た時の対処法",
    "category" : "programming",
    "tags"     : " android, java",
    "url"      : "/2015/03/30/howto-avoid-bitmap-too-large/",
    "date"     : "March 30, 2015",
    "excerpt"  : "Bitmapを扱っているとたまに下記のようなエラーにぶち当たることがあります。\n\nW/OpenGLRenderer: Bitmap too large to be uploaded into a texture(4000x4000, max=2048x2048)\n\n\n読んで字の通り、Bitmapが大きすぎて、OpenGLRendererで取り扱えない。\n限界は縦横2048pxまでのようです。\n解決方法は２つあります。\n\n\n  画像を2048x2048まで縮小する\n  ハードウェアアクセラレ...",
  "content"  : "Bitmapを扱っているとたまに下記のようなエラーにぶち当たることがあります。\n\nW/OpenGLRenderer: Bitmap too large to be uploaded into a texture(4000x4000, max=2048x2048)\n\n\n読んで字の通り、Bitmapが大きすぎて、OpenGLRendererで取り扱えない。\n限界は縦横2048pxまでのようです。\n解決方法は２つあります。\n\n\n  画像を2048x2048まで縮小する\n  ハードウェアアクセラレーションを無効にする。\n\n\nサムネイルとかフルサイズで表示する必要がない時は縮小するのが良さそう。\nただ、フルスクリーンで画像を表示してピンチズームとかしたい時は２つ目の方法でいきたい。\n\nOS 4.0以降だと各Viewで個別にハードウェアアクセラレーションをOFFにしましょう。\n\nmImageView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n\n\nただこれだとメモリ足りなくなる端末もありそうだから、AndroidManifest.xmlでヒープサイズも設定しておいたほうがいいかも？\n\n&amp;lt;Application\n    android:name=&quot;net.yslibrary.android.foo.MainApplication&quot;\n    android:label=&quot;foo&quot;\n    android:largeHeap=&quot;true&quot;&amp;gt;\n\n\n"
} ,
  
  {
    "title"    : "Mac OSX 10.9(Mavericks) Server でプッシュ通知サービスの証明書を更新する",
    "category" : "programming",
    "tags"     : " mac",
    "url"      : "/2014/08/05/howto-update-mac-server-push-certificates/",
    "date"     : "August 5, 2014",
    "excerpt"  : "2015/7/7追記: OSX 10.10 Yosemiteでも同様の手順で証明書を更新できます。\n\nServerのどこをいじれば証明書を更新できるかようやくわかったのでまとめておく。\n\nこんなメールが来るようになったら証明書を更新しましょう。\n\n手順\n\n\n  \n    Serverアプリを開いて証明書を更新したいサーバを選択\n  \n  \n    サイドバーからサーバ名を選択\n  \n  \n    設定タブを選択\n  \n  \n    「アップルプッシュ通知を入にする」というチェックボックスの...",
  "content"  : "2015/7/7追記: OSX 10.10 Yosemiteでも同様の手順で証明書を更新できます。\n\nServerのどこをいじれば証明書を更新できるかようやくわかったのでまとめておく。\n\nこんなメールが来るようになったら証明書を更新しましょう。\n\n手順\n\n\n  \n    Serverアプリを開いて証明書を更新したいサーバを選択\n  \n  \n    サイドバーからサーバ名を選択\n  \n  \n    設定タブを選択\n  \n  \n    「アップルプッシュ通知を入にする」というチェックボックスの右にある編集ボタンをクリック\n  \n  \n    出てきたモーダル内の更新ボタンをクリック\n  \n  \n    OKボタンを押して完了！\n  \n\n\nメールを見てもイマイチ何をしたらいいかわかりづらいので、メール内にヘルプページへのリンクとか入れてくれたらいいのに…\n\n参考: NowBrowsing: OS X Server: Advanced Administration: Renew a push notification certificate - \n"
} 
  
  
  
]
