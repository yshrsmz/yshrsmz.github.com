// Generated by CoffeeScript 1.4.0
(function() {
  var Greed,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (!('classList' in document.createElement('a'))) {
    throw new Error('Greed requires classList');
  }

  Greed = function() {
    console.log('greed.js is my personal utility library');
    console.log('core module ');
  };

  /*
  determne type of given object
  */


  Greed.is = function(type, obj) {
    var clas;
    clas = Object.prototype.toString.call(obj).slice(8, -1);
    return obj !== void 0 && obj !== null && clas === type;
  };

  Greed.is.prototype.TYPE_FUNCTION = "Function";

  Greed.is.prototype.TYPE_STRING = "String";

  Greed.is.prototype.TYPE_DATE = "Date";

  Greed.is.prototype.TYPE_ARRAY = "Array";

  Greed.is.prototype.TYPE_OBJECT = "Object";

  Greed.is.prototype.TYPE_NUMBER = "Number";

  Greed.is.prototype.TYPE_BOOLEAN = "Boolean";

  Greed.fillData = function() {
    var arg, args, key, keys, target, _i, _j, _len, _len1;
    target = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    target || (target = {});
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      keys = Object.keys(arg);
      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
        key = keys[_j];
        if (Greed.is('Object', arg[key]) || Greed.is('Array', arg[key])) {
          if (!target.hasOwnProperty(key)) {
            target[key] = _g.is("Array", arg[key]) ? [] : {};
          }
          _g.fillData(target[key], arg[key]);
        } else {
          if (!target.hasOwnProperty(key)) {
            target[key] = arg[key];
          }
        }
      }
    }
    return target;
  };

  /*
  extend prototype
  */


  Greed.extend = function(Child, Parent) {
    var F;
    F = function() {};
    F.prototype = Parent.prototype;
    Child.prototype = new F();
    Child.prototype.constructor = Child;
    Child.uber = Parent.prototype;
  };

  /*
  convert object into query string
  */


  Greed.serializeData = function(data) {
    var key, keys, param, params, regexSpace, value, _i, _len;
    params = [];
    regexSpace = /%20/g;
    keys = Object.keys(data);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      value = data[key];
      param = encodeURIComponent(key).replace(regexSpace, '+') + '=' + encodeURIComponent(value).replace(regexSpace, '+');
      params.push(param);
      return;
    }
    return params.join('&');
  };

  /*
  class editing utilities
  */


  Greed.addClass = function(el, clases) {
    var clas, _i, _len;
    if (!el) {
      return;
    }
    if (!Array.isArray(clases)) {
      clases = [clases];
    }
    for (_i = 0, _len = clases.length; _i < _len; _i++) {
      clas = clases[_i];
      el.classList.add(clas);
    }
  };

  Greed.removeClass = function(el, clases) {
    var clas, _i, _len;
    if (!el) {
      return;
    }
    if (!Array.isArray(clases)) {
      clases = [clases];
    }
    for (_i = 0, _len = clases.length; _i < _len; _i++) {
      clas = clases[_i];
      el.classList.remove(clas);
    }
  };

  Greed.hasClass = function(el, clases, hasAll) {
    var clas, _i, _j, _len, _len1;
    if (!el) {
      return;
    }
    if (!Array.isArray(clases)) {
      clases = [clases];
    }
    if (hasAll) {
      for (_i = 0, _len = clases.length; _i < _len; _i++) {
        clas = clases[_i];
        if (!el.classList.contains(clas)) {
          return false;
        }
      }
      return true;
    } else {
      for (_j = 0, _len1 = clases.length; _j < _len1; _j++) {
        clas = clases[_j];
        if (el.classList.contains(clas)) {
          return true;
        }
      }
      return false;
    }
  };

  Greed.toggleClass = function(el, clas) {
    if (!el) {
      return;
    }
    return el.classList.toggle(clas);
  };

  /*
  image lazy load
  */


  Greed.lazyLoadImg = function(imgDataAttribute) {
    var images;
    imgDataAttribute || (imgDataAttribute = "data-lazy-src");
    images = document.querySelectorAll("img[" + imgDataAttribute + "]");
    [].forEach.call(images, function(image) {
      image.src = image.getAttribute(imgDataAttribute);
    });
  };

  window.Greed = Greed;

  window._g = window.Greed;

  if (!('Greed' in window)) {
    window.Greed = {};
  }

  (function(Greed) {
    var Deferred, PENDING, Promise, REJECTED, RESOLVED, flatten, hasOwn, isArguments, isObservable, root, _g;
    _g = Greed || {};
    PENDING = 'pending';
    RESOLVED = 'resolved';
    REJECTED = 'rejected';
    if (!Array.prototype.forEach) {
      throw new Error("Deferred requires Array.forEach");
    }
    root = this;
    hasOwn = function(obj, prop) {
      return obj != null ? obj.hasOwnProperty(prop) : void 0;
    };
    isArguments = function(obj) {
      return hasOwn(obj, 'length' && hasOwn(obj, 'callee'));
    };
    isObservable = function(obj) {
      return (obj instanceof Deferred) || (obj instanceof Promise);
    };
    flatten = function(array) {
      if (isArguments(array)) {
        return flatten(Array.prototype.slice.call(array));
      }
      if (!Array.isArray(array)) {
        return [array];
      }
      return array.reduce(function(memo, value) {
        if (Array.isArray(value)) {
          return memo.concat(flatten(value));
        }
        memo.push(value);
        return memo;
      }, []);
    };
    Promise = (function() {
      var _deferred;

      _deferred = null;

      function Promise(deferred) {
        this._deferred = deferred;
      }

      Promise.prototype.always = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).always.apply(_ref, args);
        return this;
      };

      Promise.prototype.done = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).done.apply(_ref, args);
        return this;
      };

      Promise.prototype.fail = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).fail.apply(_ref, args);
        return this;
      };

      Promise.prototype.pipe = function(doneFilter, failFilter) {
        return this._deferred.pipe(doneFilter, failFilter);
      };

      Promise.prototype.state = function() {
        return this._deferred.state();
      };

      Promise.prototype.then = function(done, fail) {
        this._deferred.then(done, fail);
        return this;
      };

      return Promise;

    })();
    Deferred = (function() {

      function Deferred(fn) {
        this.then = __bind(this.then, this);

        this.resolveWith = __bind(this.resolveWith, this);

        this.resolve = __bind(this.resolve, this);

        this.rejectWith = __bind(this.rejectWith, this);

        this.reject = __bind(this.reject, this);

        this.promise = __bind(this.promise, this);

        this.progress = __bind(this.progress, this);

        this.notifyWith = __bind(this.notifyWith, this);

        this.notify = __bind(this.notify, this);

        this._storeCallbacks = __bind(this._storeCallbacks, this);

        var _this = this;
        this._state = PENDING;
        this.always = this._storeCallbacks((function() {
          return _this._state !== PENDING;
        }), this._alwaysCallbacks || (this._alwaysCallbacks = []));
        this.done = this._storeCallbacks((function() {
          return _this._state === RESOLVED;
        }), this._doneCallbacks || (this._doneCallbacks = []));
        this.fail = this._storeCallbacks((function() {
          return _this._state === REJECTED;
        }), this._failCallbacks || (this._failCallbacks = []));
        if (typeof fn === 'function') {
          fn.call(this, this);
        }
      }

      Deferred.prototype._storeCallbacks = function(shouldExecuteNow, holder) {
        var _this = this;
        return function() {
          var args, functions;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (args.length === 0) {
            return _this;
          }
          functions = flatten(args);
          if (_this._state === PENDING) {
            holder.push.apply(holder, functions);
          }
          if (shouldExecuteNow()) {
            functions.forEach(function(fn) {
              return fn.apply(_this._context, _this._withArguments);
            });
          }
          return _this;
        };
      };

      Deferred.prototype.always = void 0;

      Deferred.prototype.done = void 0;

      Deferred.prototype.fail = void 0;

      Deferred.prototype.notify = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.notifyWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.notifyWith = function() {
        var args, context, _ref;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        if ((_ref = this._progressCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(context, args);
          });
        }
        return this;
      };

      Deferred.prototype.pipe = function(doneFilter, failFilter) {
        var def;
        def = new Deferred();
        this.done(function() {
          var args, result, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (doneFilter != null) {
            result = doneFilter.apply(this, args);
            if (isObservable(result)) {
              return result.done(function() {
                var doneArgs, _ref;
                doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(doneArgs)));
              }).fail(function() {
                var failArgs, _ref;
                failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.rejectWith).call.apply(_ref, [def, this].concat(__slice.call(failArgs)));
              });
            } else {
              return def.resolveWith.call(def, this, result);
            }
          } else {
            return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(args)));
          }
        });
        this.fail(function() {
          var args, result, _ref, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (failFilter != null) {
            result = failFilter.apply(this, args);
            if (isObservable(result)) {
              result.done(function() {
                var doneArgs, _ref;
                doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(doneArgs)));
              }).fail(function() {
                var failArgs;
                failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return def.rejectWith.apply(def, [def, this].concat(__slice.call(failArgs)));
              });
            } else {
              def.rejectWith.call(def, this, result);
            }
            return (_ref = def.rejectWith).call.apply(_ref, [def, this].concat(__slice.call(args)));
          } else {
            return (_ref1 = def.rejectWith).call.apply(_ref1, [def, this].concat(__slice.call(args)));
          }
        });
        return def.promise();
      };

      Deferred.prototype.progress = function() {
        var args, functions, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 0 || this._state !== PENDING) {
          return this;
        }
        functions = flatten(args);
        this._progressCallbacks || (this._progressCallbacks = []);
        (_ref = this._progressCallbacks).push.apply(_ref, functions);
        return this;
      };

      Deferred.prototype.promise = function() {
        return this._promise || (this._promise = new Promise(this));
      };

      Deferred.prototype.reject = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.rejectWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.rejectWith = function() {
        var args, context, _ref, _ref1,
          _this = this;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        this._state = REJECTED;
        this._withArguments = args;
        this._context = context;
        if ((_ref = this._failCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        if ((_ref1 = this._alwaysCallbacks) != null) {
          _ref1.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        return this;
      };

      Deferred.prototype.resolve = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.resolveWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.resolveWith = function() {
        var args, context, _ref, _ref1,
          _this = this;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        this._state = RESOLVED;
        this._context = context;
        this._withArguments = args;
        if ((_ref = this._doneCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        if ((_ref1 = this._alwaysCallbacks) != null) {
          _ref1.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        return this;
      };

      Deferred.prototype.state = function() {
        return this._state;
      };

      Deferred.prototype.then = function(doneCallbacks, failCallbacks, progressCallbacks) {
        if (doneCallbacks) {
          this.done(doneCallbacks);
        }
        if (failCallbacks) {
          this.fail(failCallbacks);
        }
        if (progressCallbacks) {
          this.progress(progressCallbacks);
        }
        return this;
      };

      return Deferred;

    })();
    Deferred.when = function() {
      var allDoneArgs, allReady, args, readyCount;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 0) {
        return new Deferred().resolve().promise();
      }
      if (args.length === 1) {
        return args[0].promise();
      }
      allReady = new Deferred();
      readyCount = 0;
      allDoneArgs = [];
      args.forEach(function(dfr, idx) {
        return dfr.done(function() {
          var doneArgs;
          doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          readyCount += 1;
          allDoneArgs[idx] = doneArgs;
          if (readyCount === args.length) {
            return allReady.resolve.apply(allReady, allDoneArgs);
          }
        }).fail(function() {
          var failArgs;
          failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return allReady.rejectWith.apply(allReady, [this].concat(__slice.call(failArgs)));
        });
      });
      return allReady.promise();
    };
    _g.Deferred = Deferred;
  })(Greed);

  if (!('Greed' in window)) {
    window.Greed = {};
  }

  (function(Greed) {
    var AjaxCore, emptyFunc, _doc, _g;
    _g = Greed || {};
    _doc = window.document;
    _g.activeAjaxCount = 0;
    _g.isAjaxActive = function() {
      return !!_g.activeAjaxCount;
    };
    emptyFunc = function() {};
    AjaxCore = (function() {

      function AjaxCore(url, options) {
        this._onReadyStateChange = __bind(this._onReadyStateChange, this);
        this.xhr = new XMLHttpRequest();
        this.url = url;
        this.options = options;
        this._deferred = new _g.Deferred();
        this.responseReceived = false;
        if (this._check()) {
          this._send();
        } else {
          this._deferred.rejectWith(this);
        }
        return this._deferred.promise();
      }

      AjaxCore.prototype.defaults = {
        url: '',
        type: 'POST',
        dataType: 'text',
        async: true,
        cache: false,
        data: null,
        contentType: 'application/x-www-form-urlencoded',
        success: null,
        error: null,
        complete: null,
        timeoutDuration: 60 * 1000,
        accepts: {
          text: 'text/plain',
          html: 'text/html',
          xml: 'application/xml, text/xml',
          json: 'application/json, text/javascript'
        }
      };

      AjaxCore.prototype._send = function() {
        var opts;
        opts = this.options;
        if (!opts.cache) {
          opts.url += (opts.url.indexOf('?') > -1 ? '&' : '?') + '_nocache=' + (new Date()).getTime();
        }
        if (opts.data) {
          if (opts.type === 'GET') {
            opts.url += (opts.url.indexOf('?') > -1 ? '&' : '?') + _g.serializeData(opts.data);
            opts.data = null;
          } else {
            opts.data = _g.serializeData(opts.data);
          }
        }
        this.xhr.open(opts.type, opts.url, opts.async);
        this.xhr.setRequestHeader('Content-type', opts.contentType);
        if (opts.dataType && opts.accepts[opts.dataType]) {
          this.xhr.setRequestHeader('Accept', opts.accepts[opts.dataType]);
        }
        _g.activeAjaxCount++;
        if (_g.is('Function', opts.success)) {
          this._deferred.done(opts.success);
        }
        if (_g.is('Function', opts.error)) {
          this._deferred.fail(opts.error);
        }
        if (_g.is('Function', opts.complete)) {
          this._deferred.always(opts.complete);
        }
        if (opts.async) {
          this.xhr.onreadystatechange = this._onReadyStateChange;
          this.xhr.send(opts.data);
        } else {
          this.xhr.send(opts.data);
          this._onReadyStateChange();
        }
        return this;
      };

      AjaxCore.prototype._check = function() {
        if (_g.is('Object', this.url)) {
          this.options = this.url;
          this.url = void 0;
        }
        this.options = _g.fillData(this.options || {}, this.defaults);
        if (!this.options.url && this.url) {
          this.options.url = this.url;
        }
        return !!this.options.url;
      };

      AjaxCore.prototype._onReadyStateChange = function() {
        var data, opts;
        opts = this.options;
        data = null;
        if (this.xhr.readyState === 4 && !this.responseReceived) {
          this.responseReceived = true;
          if (this.xhr.status >= 200 && this.xhr.status < 300 || this.xhr.status === 304) {
            data = opts.dataType === 'xml' ? this.xhr.responseXML : this.xhr.responseText;
            if (opts.dataType === 'json') {
              data = JSON.parse(data);
            }
            this._deferred.resolveWith(this, data, this.xhr.status, this.xhr);
          } else {
            this._deferred.rejectWith(this, data, this.xhr, this.xhr.status);
          }
          _g.activeAjaxCount--;
        }
      };

      return AjaxCore;

    })();
    _g.ajax = function(url, options) {
      return new _g.AjaxCore(url, options);
    };
    _g.ajaxJson = function(url, options) {
      options || (options = {});
      options.dataType = 'json';
      return new _g.AjaxCore(url, options);
    };
    _g.AjaxCore = AjaxCore;
  })(Greed);

}).call(this);
